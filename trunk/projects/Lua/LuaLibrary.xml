<?xml version="1.0" encoding="UTF-8"?>

<library name="Lua" dynamic="yes">

  <class name="InteluaInterpreter" base="Object">
    <function lang="lua" name="loadFile"/>
    <!-- todo: parse, execute, ...  -->
  </class>

  <class name="ExecuteLuaString" base="WorkUnit">
    <variable type="String" name="code"/>
    <variable type="String" name="description"/>
    <variable type="Boolean" name="verbose"/>
  </class>
  
  <class name="ExecuteLuaFile" base="WorkUnit">
    <variable type="File" name="file"/>
  </class>

  <namespace name="lua">

    <class name="LineInfo" base="Object">
      <variable type="PositiveInteger" name="line"/>
      <variable type="PositiveInteger" name="column"/>
      <variable type="String" name="filename"/>
      <variable type="String" name="comments"/>
    </class>

    <class name="Node" abstract="yes">
      <function lang="lua" name="setLineInfo"/>
      <function lang="lua" name="getNumSubNodes"/>
      <function lang="lua" name="getSubNode"/>
      <function lang="lua" name="setSubNode"/>
      <function lang="lua" name="print"/>
    </class>
    <class name="List" base="lua::Node">
      <variable type="ObjectVector[lua::Node]" name="nodes"/>
    </class>
    
    <!-- Statement block -->
    <class name="Block" base="lua::Node">
      <variable type="ObjectVector[lua::Statement]" name="statements"/>
    </class>
    
    <!-- Statements -->
    <class name="Statement" base="lua::Node" abstract="yes"/>
    <class name="Do" base="lua::Statement">
      <variable type="lua::Block" name="block"/>
    </class>
    <class name="Set" base="lua::Statement">
      <variable type="lua::List" name="lhs"/>
      <variable type="lua::List" name="expr"/>
    </class>
    <class name="While" base="lua::Statement">
      <variable type="lua::Expression" name="condition"/>
      <variable type="lua::Block" name="block"/>
    </class>
    <class name="Repeat" base="lua::Statement">
      <variable type="lua::Block" name="block"/>
      <variable type="lua::Expression" name="condition"/>
    </class>
    <class name="If" base="lua::Statement">
      <variable type="ObjectVector[lua::Expression]" name="conditions"/>
      <variable type="ObjectVector[lua::Block]" name="blocks"/>
    </class>
    <class name="ForNum" base="lua::Statement">
      <variable type="lua::Identifier" name="identifier"/>
      <variable type="lua::Expression" name="from"/>
      <variable type="lua::Expression" name="to"/>
      <variable type="lua::Expression" name="step"/>
      <variable type="lua::Block" name="block"/>
    </class>
    <class name="ForIn" base="lua::Statement">
      <variable type="lua::List" name="identifiers"/>
      <variable type="lua::List" name="expressions"/>
      <variable type="lua::Block" name="block"/>
    </class>
    <class name="Local" base="lua::Statement">
      <variable type="lua::List" name="identifiers"/>
      <variable type="lua::List" name="expressions"/>
      <variable type="Boolean" name="localFunction"/>
    </class>
    <class name="Return" base="lua::Statement">
      <variable type="ObjectVector[lua::Expression]" name="expressions"/>
    </class>
    <class name="Break" base="lua::Statement"/>
    <class name="ExpressionStatement" base="lua::Statement">
      <variable type="lua::Expression" name="expression"/>
    </class>
    <class name="Parameter" base="lua::Statement">
      <variable type="lua::Identifier" name="identifier"/>
      <variable type="lua::Table" name="properties"/>
    </class>

    <!-- Expressions -->
    <class name="Expression" base="lua::Node" abstract="yes"/>

    <class name="Nil" base="lua::Expression"/>
    <class name="Dots" base="lua::Expression"/>

    <class name="LiteralBoolean" base="lua::Expression">
      <variable type="Boolean" name="value"/>
    </class>
    
    <class name="LiteralNumber" base="lua::Expression">
      <variable type="Double" name="value"/>
    </class>
    <class name="LiteralString" base="lua::Expression">
      <variable type="String" name="value"/>
    </class>
    
    <class name="Function" base="lua::Expression">
      <variable type="lua::List" name="prototype"/>
      <variable type="lua::Block" name="block"/>
    </class>

    <class name="Pair" base="lua::Expression">
      <variable type="lua::Expression" name="first"/>
      <variable type="lua::Expression" name="second"/>
    </class>

    <class name="Table" base="lua::Expression">
      <variable type="ObjectVector[lua::Node]" name="fields"/>
    </class>

    <class name="Operation" base="lua::Expression" abstract="yes"/>
    
    <enumeration name="UnaryOp">
      <value name="not"/>
      <value name="len"/>
      <value name="unm"/>
    </enumeration>

    <class name="UnaryOperation" base="lua::Operation">
      <variable type="lua::UnaryOp" name="op" enumeration="yes"/>
      <variable type="lua::Expression" name="expr"/>
    </class>

    <enumeration name="BinaryOp">
      <value name="add"/>
      <value name="sub"/>
      <value name="mul"/>
      <value name="div"/>
      <value name="mod"/>
      <value name="pow"/>
      <value name="concat"/>
      <value name="eq"/>
      <value name="lt"/>
      <value name="le"/>
      <value name="and"/>
      <value name="or"/>
    </enumeration>

    <class name="BinaryOperation" base="lua::Operation">
      <variable type="lua::BinaryOp" name="op" enumeration="yes"/>
      <variable type="lua::Expression" name="left"/>
      <variable type="lua::Expression" name="right"/>
    </class>

    <class name="Parenthesis" base="lua::Expression">
      <variable type="lua::Expression" name="expr"/>
    </class>

    <!-- Apply Expression -->
    <class name="ApplyExpression" base="lua::Expression" abstract="yes"/>
    <class name="Call" base="lua::ApplyExpression">
      <variable type="lua::Expression" name="function"/>
      <variable type="ObjectVector[lua::Expression]" name="arguments"/>
    </class>
    <class name="Invoke" base="lua::ApplyExpression">
      <variable type="lua::Expression" name="object"/>
      <variable type="lua::LiteralString" name="function"/>
      <variable type="ObjectVector[lua::Expression]" name="arguments"/>
    </class>

    <!-- LHS Expression -->
    <class name="LHSExpression" base="lua::Expression" abstract="yes"/>
    <class name="Identifier" base="lua::LHSExpression">
      <variable type="String" name="identifier"/>
      <variable type="Boolean" name="derivable"/>
    </class>
    <class name="Index" base="lua::LHSExpression">
      <variable type="lua::Expression" name="left"/>
      <variable type="lua::Expression" name="right"/>
    </class>

    <!-- Sub Lua -->
    <class name="Subspecified" base="lua::Expression">
      <variable type="lua::Expression" name="expr"/>
    </class>
    <!-- ------------------------- -->

    <!-- Scope -->
    <class name="Variable" base="Object">
      <variable type="lua::Identifier" name="declaration"/>
      <variable type="lua::Expression" name="initialValue"/>
      <variable type="Boolean" name="isConstant"/>
    </class>
    
    <class name="Scope" base="Object">
      <variable type="lua::Statement" name="node"/>
      <variable type="ObjectVector[lua::Variable]" name="variables"/>
      <variable type="ObjectVector[lua::Scope]" name="subScopes"/>
    </class>
    
  </namespace>
  
</library>
