/*-----------------------------------------.---------------------------------.
| Filename: SandBox.lcpp                   | Test Learning                   |
| Author  : Francis Maes                   |                                 |
| Started : 08/04/2010 16:27               |                                 |
`------------------------------------------/                                 |
                               |                                             |
                               `--------------------------------------------*/

#include <lbcpp/lbcpp.h>
#include "InferenceLearner/InferenceLearner.h"
#include "InferenceLearner/InferenceLearnerCallback.h"
#include "InferenceContext/CacheInferenceCallback.h"
#include "ProteinInference/ProteinEvaluationCallback.h"
#include "ProteinInference/ProteinInference.h"
using namespace lbcpp;

extern void declareProteinClasses();

class MyProteinSequenceLabelingInferenceStep : public ProteinSequenceLabelingInferenceStep
{
public:
  MyProteinSequenceLabelingInferenceStep(const String& name, const String& target, FeatureDictionaryPtr targetDictionary)
    : ProteinSequenceLabelingInferenceStep(name), target(target), targetDictionary(targetDictionary) {}
  MyProteinSequenceLabelingInferenceStep() {}

  virtual String getTargetName() const
    {return target;}

  virtual FeatureDictionaryPtr getTargetDictionary() const
  {
    jassert(targetDictionary);
    return targetDictionary;
  }

  virtual featureGenerator getInputFeatures(ObjectPtr input, size_t index) const
  {
    ProteinPtr protein = input.dynamicCast<Protein>();
    jassert(protein);
    LabelSequencePtr aminoAcidSequence = protein->getAminoAcidSequence();
    ScoreVectorSequencePtr positionSpecificScores = protein->getPositionSpecificScoringMatrix();

    featureCall("a") aminoAcidSequence->windowFeatures(index, 8, 8, true);
    featureCall("p") positionSpecificScores->windowFeatures(index, 8, 8, true);

    LabelSequencePtr secondaryStructure = protein->getSecondaryStructureSequence();
    if (secondaryStructure)
      {featureCall("s3") secondaryStructure->windowFeatures(index, 5, 5, true);}

    LabelSequencePtr dsspSecondaryStructure = protein->getDSSPSecondaryStructureSequence();
    if (dsspSecondaryStructure)
      {featureCall("s8") dsspSecondaryStructure->windowFeatures(index, 5, 5, true);}

    LabelSequencePtr solventAccesibility = protein->getSolventAccessibilitySequence();
    if (solventAccesibility)
      {featureCall("sa") solventAccesibility->windowFeatures(index, 5, 5, true);}

    //    featureCall("w8f") dsspSecondaryStructure->multiScaleSymetricFrequencyFeatures(index, 1, 2, 8, false); // 1, 2, 4, 8, 16, ..., 256
  }

protected:
  String target;
  FeatureDictionaryPtr targetDictionary;

  virtual bool load(InputStream& istr)
  {
    if (!ProteinSequenceLabelingInferenceStep::load(istr) ||
        !lbcpp::read(istr, target))
      return false;
    targetDictionary = FeatureDictionaryManager::getInstance().readDictionaryNameAndGet(istr);
    return targetDictionary != FeatureDictionaryPtr();
  }

  virtual void save(OutputStream& ostr) const
  {
    ProteinSequenceLabelingInferenceStep::save(ostr);
    lbcpp::write(ostr, target);
    lbcpp::write(ostr, targetDictionary->getName());
  }
};

class PrintClassifiersSummaryVisitor : public DefaultInferenceVisitor
{
public:
  PrintClassifiersSummaryVisitor() : hop(0) {}

  virtual void visit(ClassificationInferenceStepPtr inference)
  {
    ++hop;
    std::cout << "ClassificationInferenceStep " << hop << ": ";
    ClassifierPtr classifier = inference->getClassifier();
    if (!classifier)
      std::cout << "<no classifier>" << std::endl;
    else
    {
      GradientBasedClassifierPtr gbc = classifier.dynamicCast<GradientBasedClassifier>();
      if (gbc)
      {
        DenseVectorPtr parameters = gbc->getParameters();
        std::cout << parameters->l0norm() << " parameters, norm = " << parameters->l2norm() << std::endl;
        if (hop == 2)
        {
          std::cout << parameters->toString() << std::endl;
        }
      }
      else
        std::cout << "<unknown classifier>" << std::endl;
    }
  }

private:
  size_t hop;
};

class MyInferenceLearnerCallback : public InferenceLearnerCallback
{
public:
  MyInferenceLearnerCallback(ObjectContainerPtr trainingData, ObjectContainerPtr testingData, bool useCacheOnTestingData = true)
    : trainingData(trainingData), testingData(testingData), startingTime(Time::getMillisecondCounter())
  {
    if (useCacheOnTestingData)
      cache = new InferenceResultCache();
  }

  virtual InferenceContextPtr createContext()
    {return singleThreadedInferenceContext();}
  
  virtual ClassifierPtr createClassifier(FeatureDictionaryPtr labels)
  {
    static const double regularizer = 10.0;
    static const bool useConstantLearningRate = false;

    IterationFunctionPtr learningRate = useConstantLearningRate ? invLinearIterationFunction(2.0, 250000) : constantIterationFunction(1.0);
    GradientBasedLearnerPtr learner = stochasticDescentLearner(learningRate);  
    GradientBasedClassifierPtr classifier = maximumEntropyClassifier(learner, labels);
    classifier->setL2Regularizer(regularizer);
    return classifier;
  }

  virtual void preLearningIterationCallback(size_t iterationNumber)
    {std::cout << std::endl << " ================== ITERATION " << iterationNumber << " ================== " << (Time::getMillisecondCounter() - startingTime) / 1000.0 << " s" <<  std::endl;}

  // returns false if learning should stop
  virtual bool postLearningIterationCallback(InferenceStepPtr inference, size_t iterationNumber)
  {
    InferenceContextPtr validationContext = createContext();
    ProteinEvaluationCallbackPtr evaluation = new ProteinEvaluationCallback();
    validationContext->appendCallback(evaluation);
    if (cache)
      validationContext->appendCallback(new AutoSubStepsCacheInferenceCallback(cache, inference));

   // validationContext->runWithSupervisedExamples(inference, trainingData);
   // std::cout << "Train evaluation: " << evaluation->toString() << std::endl;
    
    validationContext->runWithSupervisedExamples(inference, testingData);
    std::cout << "Test evaluation: " << evaluation->toString() << std::endl;
    std::vector<double> scores1;
    scores1.push_back(evaluation->getQ3Score());
    scores1.push_back(evaluation->getQ8Score());
    scores1.push_back(evaluation->getSA2Score());
    
    File modelFile("C:\\Projets\\LBC++\\projects\\Proteins\\Models\\yo.inference");
    inference->saveToFile(modelFile);
    InferenceStepPtr inference2 = Object::createFromFileAndCast<InferenceStep>(modelFile);
    validationContext->runWithSupervisedExamples(inference2, testingData);
    std::vector<double> scores2;
    scores2.push_back(evaluation->getQ3Score());
    scores2.push_back(evaluation->getQ8Score());
    scores2.push_back(evaluation->getSA2Score());
    std::cout << "Serialisation Test evaluation: " << evaluation->toString() << std::endl;

    if (scores1 != scores2)
    {
      std::cout << "DIFFERENT SCORES !!!!" << std::endl;
      std::cout << "INFERENCE 1 = " << std::endl << inference->toString() << std::endl;
      std::cout << std::endl << "INFERENCE 2 = " << std::endl << inference2->toString() << std::endl;
      validationContext->runWithSupervisedExamples(inference2, testingData);
      std::cout << "Double check Serialisation Test evaluation: " << evaluation->toString() << std::endl;

      std::cout << "INFERENCE 1 Classifiers = " << std::endl;
      inference->accept(InferenceVisitorPtr(new PrintClassifiersSummaryVisitor()));
      std::cout << std::endl << "INFERENCE 2 Classifiers = " << std::endl;
      inference2->accept(InferenceVisitorPtr(new PrintClassifiersSummaryVisitor()));
      std::cout << std::endl;
      jassert(false);
    }

    // stopping criterion
    return iterationNumber < 3;
  }

  virtual void preLearningStepCallback(InferenceStepPtr step)
  {
    String passName = step->getName();
    std::cout << std::endl << "=====================================================" << std::endl;
    std::cout << "======= LEARNING PASS " << passName << " ==========" << (Time::getMillisecondCounter() - startingTime) / 1000 << " s" << std::endl;
    std::cout << "=====================================================" << std::endl;
  }

private:
  ObjectContainerPtr trainingData;
  ObjectContainerPtr testingData;
  InferenceResultCachePtr cache;
  juce::uint32 startingTime;
};

int main(int argc, char** argv)
{
  declareProteinClasses();
  LBCPP_DECLARE_CLASS(MyProteinSequenceLabelingInferenceStep);

//  File modelFile(T("C:\\Projets\\Proteins\\data\\models\\test.model"));
  File proteinsDirectory(T("C:\\Projets\\LBC++\\projects\\Proteins\\CB513New"));
  ObjectStreamPtr proteinsStream = directoryObjectStream(proteinsDirectory, T("*.protein"));
  ObjectContainerPtr proteins = proteinsStream->load(7)->randomize();

  /*
  ProteinPtr protein = proteins->getAndCast<Protein>(0);
  std::cout << "Amino Acid Sequence: " << protein->getAminoAcidSequence()->toString() << std::endl;
  SecondaryStructureInferenceStepPtr step = new SSContentOnlyInferenceStep("SS3CO", false);
  std::cout << "Input Features at position 2: " << step->getInputFeatures(protein, 2)->toSparseVector()->toString() << std::endl;
  return 0;*/

  proteins = proteins->apply(new ObjectToObjectPairFunction());
  ObjectContainerPtr trainingData = proteins->invFold(0, 7);
  ObjectContainerPtr testingData = proteins->fold(0, 7);
  std::cout << trainingData->size() << " Training Proteins "
            << testingData->size() << " Testing Proteins" << std::endl;

  ProteinInferencePtr proteinInference = new ProteinInference();
  
  ProteinSequenceLabelingInferenceStepPtr step;

  for (size_t i = 0; i < 2; ++i)
  {
    step = new MyProteinSequenceLabelingInferenceStep(T("SS3 Pass ") + lbcpp::toString(i), T("SecondaryStructureSequence"), SecondaryStructureDictionary::getInstance());
    proteinInference->appendStep(step);
    step = new MyProteinSequenceLabelingInferenceStep(T("SA Pass ") + lbcpp::toString(i), T("SolventAccessibilitySequence"), SolventAccesibility2StateDictionary::getInstance());
    proteinInference->appendStep(step);
    step = new MyProteinSequenceLabelingInferenceStep(T("SS8 Pass ") + lbcpp::toString(i), T("DSSPSecondaryStructureSequence"), DSSPSecondaryStructureDictionary::getInstance());
    proteinInference->appendStep(step);
  }
 
  InferenceLearnerCallbackPtr callback = new MyInferenceLearnerCallback(trainingData, testingData, true);
  InferenceLearnerPtr learner = stepByStepDeterministicSimulationLearner(callback, true);
  learner->train(proteinInference, trainingData);
  return 0;
}
