/*-----------------------------------------.---------------------------------.
| Filename: SandBox.lcpp                   | Test Learning                   |
| Author  : Francis Maes                   |                                 |
| Started : 08/04/2010 16:27               |                                 |
`------------------------------------------/                                 |
                               |                                             |
                               `--------------------------------------------*/

#include <lbcpp/lbcpp.h>
#include "InferenceStep/RegressionInferenceStep.h"
#include "InferenceStep/ParallelSharedMultiRegressionInferenceStep.h"
#include "InferenceLearner/InferenceLearner.h"
#include "InferenceLearner/InferenceLearnerCallback.h"
#include "InferenceContext/CacheInferenceCallback.h"
#include "InferenceData/ScoreSymmetricMatrix.h"
#include "Protein/Evaluation/ProteinEvaluationCallback.h"
#include "Protein/Evaluation/ProteinStatisticsCalculator.h"
#include "Protein/SecondaryStructureDictionary.h"
#include "Protein/Inference/Protein1DInferenceStep.h"
#include "Protein/Inference/ProteinBackboneBondSequenceInferenceStep.h"
#include "Protein/Inference/ProteinContactMapInferenceStep.h"
#include "Protein/Inference/ProteinInference.h"
using namespace lbcpp;

extern void declareProteinClasses();

class ProteinResidueRefinementInferenceStep : public VectorParallelInferenceStep
{
public:
  ProteinResidueRefinementInferenceStep(const String& name)
    : VectorParallelInferenceStep(name)
  {
    for (size_t i = 0; i < 3; ++i)
    {
      String prefix = name + T(" ") + getBackboneAtomName(i) + T(".");
      appendStep(new RegressionInferenceStep(prefix + T("x")));
      appendStep(new RegressionInferenceStep(prefix + T("y")));
      appendStep(new RegressionInferenceStep(prefix + T("z")));
    }
  }

  static String getBackboneAtomName(size_t index)
  {
    jassert(index < 3);
    static const juce::tchar* backboneAtomNames[] = {T("N"), T("CA"), T("C")};
    return backboneAtomNames[index];
  }

  virtual ObjectPtr getSubInput(ObjectPtr input, size_t index) const
    {return input;}

  virtual ObjectPtr getSubSupervision(ObjectPtr supervision, size_t index) const
  {
    ProteinResiduePtr residue = supervision.dynamicCast<ProteinResidue>();
    if (!residue)
      return ObjectPtr();

    jassert(index < 9);
    ProteinAtomPtr atom = residue->findAtomByName(getBackboneAtomName(index / 3));
    if (!atom || !atom->getPosition().exists())
      return ObjectPtr();

    Vector3 position = atom->getPosition();
    index %= 3;
    double target = (index == 0 ? position.getX() : (index == 1 ? position.getY() : position.getZ()));
   
    // loss(prediction) = (target - prediction)^2
    return squareFunction(addConstantScalarFunction(-target));
  }

  virtual ObjectPtr createEmptyOutput(ObjectPtr input) const
  {
    ProteinResiduePtr res = new ProteinResidue();
    res->addAtom(new ProteinAtom(T("N"), T("N")));
    res->addAtom(new ProteinAtom(T("CA"), T("C")));
    res->addAtom(new ProteinAtom(T("C"), T("C")));
    return res;
  }

  virtual void setSubOutput(ObjectPtr output, size_t index, ObjectPtr subOutput) const
  {
    ProteinResiduePtr residue = output.dynamicCast<ProteinResidue>();
    ScalarPtr prediction = subOutput.dynamicCast<Scalar>();
    jassert(residue && prediction);
    ProteinAtomPtr atom = residue->findAtomByName(getBackboneAtomName(index / 3));
    jassert(atom);
    index %= 3;
    if (index == 0)
      atom->getPosition().setX(prediction->getValue());
    else if (index == 1)
      atom->getPosition().setY(prediction->getValue());
    else if (index == 2)
      atom->getPosition().setZ(prediction->getValue());
  }
};

class ProteinTertiaryStructureRefinementInferenceStep : public Protein1DInferenceStep
{
public:
  ProteinTertiaryStructureRefinementInferenceStep(const String& name, ProteinResidueFeaturesPtr features)
    : Protein1DInferenceStep(name, new ProteinResidueRefinementInferenceStep(name + T(" Residue")), features, T("TertiaryStructure")) {}

  virtual void setSubOutput(ObjectPtr output, size_t index, ObjectPtr subOutput) const
  {
    ProteinTertiaryStructurePtr tertiaryStructure = output.dynamicCast<ProteinTertiaryStructure>();
    ProteinResiduePtr residue = subOutput.dynamicCast<ProteinResidue>();
    jassert(tertiaryStructure && residue);
    tertiaryStructure->setResidue(index, residue); 
  }
};
/*
class CartesianProteinResidueFeatures : public ProteinResidueFeatures
{
public:
  virtual featureGenerator compute(ProteinPtr protein, size_t position)
  {
    ProteinTertiaryStructurePtr tertiaryStructure = protein->getTertiaryStructure();
    if (!tertiaryStructure)
      return;

    featureSense("FIXME");
  }
};*/

///////////////////////////////////////////////////////////////////////////////////////////

/*
class PrintClassifiersSummaryVisitor : public DefaultInferenceVisitor
{
public:
  PrintClassifiersSummaryVisitor() : hop(0) {}

  virtual void visit(ClassificationInferenceStepPtr inference)
  {
    ++hop;
    std::cout << "ClassificationInferenceStep " << hop << ": ";
    ClassifierPtr classifier = inference->getClassifier();
    if (!classifier)
      std::cout << "<no classifier>" << std::endl;
    else
    {
      GradientBasedClassifierPtr gbc = classifier.dynamicCast<GradientBasedClassifier>();
      if (gbc)
      {
        DenseVectorPtr parameters = gbc->getParameters();
        std::cout << parameters->l0norm() << " parameters, norm = " << parameters->l2norm() << std::endl;
        this->parameters.push_back(parameters);
      }
      else
        std::cout << "<unknown classifier>" << std::endl;
    }
  }

  std::vector<DenseVectorPtr> parameters;

private:
  size_t hop;
};

typedef ReferenceCountedObjectPtr<PrintClassifiersSummaryVisitor> PrintClassifiersSummaryVisitorPtr;
*/
class MyInferenceLearnerCallback : public InferenceLearnerCallback
{
public:
  MyInferenceLearnerCallback(ObjectContainerPtr trainingData, ObjectContainerPtr testingData, bool useCacheOnTestingData = true)
    : trainingData(trainingData), testingData(testingData), startingTime(Time::getMillisecondCounter())
  {
    if (useCacheOnTestingData)
      cache = new InferenceResultCache();
  }

  virtual InferenceContextPtr createContext()
    {return singleThreadedInferenceContext();}
  
  virtual double getProbabilityToCreateAnExample(InferenceStackPtr stack, ObjectPtr input, ObjectPtr supervision)
  {
    String inferenceStepName = stack->getInference(1)->getName();
    if (inferenceStepName.startsWith(T("RR")) || inferenceStepName.startsWith(T("DR")))
    {
      LabelPtr label = supervision.dynamicCast<Label>();
      if (label->getIndex() == 1)
        return 1.0;
      else
        return inferenceStepName.startsWith(T("RR")) 
          ? 0.05 // 5% probability for negative residue-residue contact examples
          : 0.2; // 20% probability for negative disorder examples

    }
    return 1.0;
  }

  virtual ClassifierPtr createClassifier(InferenceStackPtr stack, FeatureDictionaryPtr labels)
  {
    std::cout << "CreateClassifier for step " << stack->getInference(1)->getName() << std::endl;
    if (labels == BinaryClassificationDictionary::getInstance())
    {
      IterationFunctionPtr learningRate = invLinearIterationFunction(0.5, 250000);
      GradientBasedLearnerPtr learner = stochasticDescentLearner(learningRate);  
      GradientBasedBinaryClassifierPtr classifier = linearSVMBinaryClassifier(learner, labels);
      classifier->setL2Regularizer(0.01);
      return classifier;
    }
    else
    {
      IterationFunctionPtr learningRate = invLinearIterationFunction(2.0, 250000);
      GradientBasedLearnerPtr learner = stochasticDescentLearner(learningRate);  
      return maximumEntropyClassifier(learner, labels, 20.0);
    }
  }

  virtual RegressorPtr createRegressor(InferenceStackPtr stack)
  {
    std::cout << "CreateRegressor for step " << stack->getInference(1)->getName() << std::endl;
    static const double regularizer = 0.0;
    static const bool useConstantLearningRate = true;

    IterationFunctionPtr learningRate = useConstantLearningRate ? constantIterationFunction(0.00001) : invLinearIterationFunction(0.5, 150000);
    GradientBasedLearnerPtr learner = stochasticDescentLearner(learningRate);  
    return generalizedLinearRegressor(learner, regularizer);
  }

  virtual void preLearningIterationCallback(size_t iterationNumber)
    {std::cout << std::endl << " ================== ITERATION " << iterationNumber << " ================== " << (Time::getMillisecondCounter() - startingTime) / 1000.0 << " s" <<  std::endl;}

  // returns false if learning should stop
  virtual bool postLearningIterationCallback(InferenceStepPtr inference, size_t iterationNumber)
  {
    InferenceContextPtr validationContext = createContext();
    ProteinEvaluationCallbackPtr evaluation = new ProteinEvaluationCallback();
    validationContext->appendCallback(evaluation);
    if (cache)
      validationContext->appendCallback(new AutoSubStepsCacheInferenceCallback(cache, inference));

    validationContext->runWithSupervisedExamples(inference, trainingData);
    std::cout << "Train evaluation: " << evaluation->toString() << std::endl;
    //double trainRmse = evaluation->getPSSMRootMeanSquareError();
    
    validationContext->runWithSupervisedExamples(inference, testingData);
    std::cout << "Test evaluation: " << evaluation->toString() << std::endl;
    /*double testRmse = evaluation->getPSSMRootMeanSquareError();

    if (trainRmse < bestTrainRmse)
    {
      bestTrainRmse = trainRmse;
      bestTestRmse = testRmse;
    }*/

    // stopping criterion
    return iterationNumber < 10;
  }

  virtual void preLearningStepCallback(InferenceStepPtr step)
  {
    String passName = step->getName();
    std::cout << std::endl << "=====================================================" << std::endl;
    std::cout << "======= LEARNING PASS " << passName << " ==========" << (Time::getMillisecondCounter() - startingTime) / 1000 << " s" << std::endl;
    std::cout << "=====================================================" << std::endl;
    //bestTrainRmse = bestTestRmse = DBL_MAX;
  }

  virtual void postLearningStepCallback(InferenceStepPtr step)
  {
    //std::cout << "Best Train RMSE: " << bestTrainRmse << std::endl;
    //std::cout << "Best Test RMSE: " << bestTestRmse << std::endl;
  }

private:
  ObjectContainerPtr trainingData;
  ObjectContainerPtr testingData;
  InferenceResultCachePtr cache;
  juce::uint32 startingTime;

//  double bestTrainRmse, bestTestRmse;
};

/*
class ProteinToInputOutputPair : public ObjectFunction
{
public:
  virtual String getOutputClassName(const String& inputClassName) const
    {return T("ObjectPair");}

  virtual ObjectPtr function(ObjectPtr input) const
  {
    ProteinPtr protein = input.dynamicCast<Protein>();
    jassert(protein);
    ProteinPtr inputProtein = new Protein(protein->getName());
    inputProtein->setObject(protein->getAminoAcidSequence());
    return new ObjectPair(inputProtein, protein);
  }
};*/

ObjectContainerPtr loadProteins(const File& directory, size_t maxCount = 0)
{
  ObjectStreamPtr proteinsStream = directoryObjectStream(directory, T("*.protein"));
#ifdef JUCE_DEBUG
  ObjectContainerPtr res = proteinsStream->load(maxCount ? maxCount : 7)->randomize();
#else
  ObjectContainerPtr res = proteinsStream->load(maxCount)->randomize();
#endif
  for (size_t i = 0; i < res->size(); ++i)
    res->getAndCast<Protein>(i)->computeMissingFields();
  return res;
}

int main(int argc, char** argv)
{
  declareProteinClasses();

  File modelDirectory(T("C:\\Projets\\LBC++\\projects\\temp\\Models\\BBB_TS_SmallPDB.model"));

  /*File cb513Directory(T("C:\\Projets\\LBC++\\projects\\temp\\CB513"));
  ObjectContainerPtr cb513Proteins = loadProteins(cb513Directory);
  File outputDirectory(T("C:\\Projets\\LBC++\\projects\\temp\\CB513"));
  for (size_t i = 0; i < cb513Proteins->size(); ++i)
  {
    ProteinPtr protein = cb513Proteins->getAndCast<Protein>(i);
    jassert(protein);
    std::cout << protein->getName() << std::endl;
    protein->computeMissingFields();
    protein->saveToFile(outputDirectory.getChildFile(protein->getName() + T(".protein")));
  }
  return 0;

  std::cout << "CB513 " << ProteinStatisticsCalculator::computeStatistics(cb513Proteins) << std::endl;*/

  File smallPDBDirectory(T("C:\\Projets\\LBC++\\projects\\temp\\SmallPDB\\protein"));
  ObjectContainerPtr smallPDBProteins = loadProteins(smallPDBDirectory);
  std::cout << "SmallPDB " << ProteinStatisticsCalculator::computeStatistics(smallPDBProteins) << std::endl;

  //proteins = proteins->apply(new ProteinToInputOutputPair());

  ObjectContainerPtr trainingData = smallPDBProteins->invFold(0,7)->apply(new ObjectToObjectPairFunction());
  ObjectContainerPtr testingData = smallPDBProteins->fold(0,7)->apply(new ObjectToObjectPairFunction());

  std::cout << trainingData->size() << " Training Proteins "
            << testingData->size() << " Testing Proteins" << std::endl;


  /*
  ** Creation of the feature function
  */
  CompositeProteinResidueFeaturesPtr featureFunction = new CompositeProteinResidueFeatures();

  featureFunction->addSubFeatures(proteinUnitResidueFeature());
//  featureFunction->addSubFeatures(proteinPositionIndexResidueFeature()); // DEBUG !!

  featureFunction->addSubFeatures(proteinSequenceWindowFeatures(T("AminoAcidSequence"), 8, 8, true));
  featureFunction->addSubFeatures(proteinSequenceWindowFeatures(T("PositionSpecificScoringMatrix"), 8, 8, true));
  featureFunction->addSubFeatures(proteinSequenceWindowFeatures(T("SecondaryStructureSequence"), 5, 5, true));
  featureFunction->addSubFeatures(proteinSequenceWindowFeatures(T("DSSPSecondaryStructureSequence"), 5, 5, true));
  featureFunction->addSubFeatures(proteinSequenceWindowFeatures(T("SolventAccessibilityThreshold20"), 5, 5, true));
  featureFunction->addSubFeatures(proteinSequenceWindowFeatures(T("DisorderProbabilitySequence"), 5, 5, true));
  featureFunction->addSubFeatures(proteinSequenceWindowFeatures(T("BackboneBondSequence"), 5, 5, true));

  CompositeProteinResidueFeaturesPtr tertiaryStructureFeatureFunction = new CompositeProteinResidueFeatures();
  tertiaryStructureFeatureFunction->addSubFeatures(proteinUnitResidueFeature());
  tertiaryStructureFeatureFunction->addSubFeatures(proteinSequenceWindowFeatures(T("TertiaryStructure"), 5, 5, true));

 /* featureFunction->addSubFeatures(proteinFrequencyWindowFeatures(T("DisorderProbabilitySequence"), 5, true));
  featureFunction->addSubFeatures(proteinFrequencyWindowFeatures(T("DisorderProbabilitySequence"), 10, true));
  featureFunction->addSubFeatures(proteinFrequencyWindowFeatures(T("DisorderProbabilitySequence"), 20, true));

  // New features :
  featureFunction->addSubFeatures(proteinSegmentConjunctionFeatures(T("SecondaryStructureSequence"), 2));
  featureFunction->addSubFeatures(proteinPositionFeatures());
  //featureFunction->addSubFeatures(proteinLengthFeatures());
  */

  CompositeProteinResiduePairFeaturesPtr pairFeatureFunction = new CompositeProteinResiduePairFeatures();
  pairFeatureFunction->addSubFeatures(proteinPointResiduePairFeatures(featureFunction));
  pairFeatureFunction->addSubFeatures(separationLengthResiduePairFeatures());

  /*
  ** Creation of the inference 
  */
  ProteinInferencePtr proteinInference = new ProteinInference();
  for (size_t i = 0; i < 2; ++i)
  {
    {
      //Protein2DInferenceStepPtr step = new ProteinContactMapInferenceStep(T("RR Pass ") + lbcpp::toString(i),
       //                                                   pairFeatureFunction, T("ResidueResidueContactMatrix8Cb"));
      //proteinInference->appendStep(step);
    }
    {
      Protein1DInferenceStepPtr step;

      if (i == 0)
      {
        step = new ProteinBackboneBondSequenceInferenceStep(T("Backbone Pass ") + lbcpp::toString(i), featureFunction);
        proteinInference->appendStep(step);
      }

      step = new ProteinTertiaryStructureRefinementInferenceStep(T("TS Pass ") + lbcpp::toString(i), tertiaryStructureFeatureFunction);
      proteinInference->appendStep(step);
     
#if 0
      step = new ProteinSequenceLabelingInferenceStep(T("SS3 Pass ") + lbcpp::toString(i), featureFunction, /*T("SecondaryStructureProbabilities"), */T("SecondaryStructureSequence"));
      proteinInference->appendStep(step);
      step = new ProteinSequenceLabelingInferenceStep(T("DR Pass ") + lbcpp::toString(i), featureFunction, T("DisorderProbabilitySequence"), T("DisorderSequence"));
      proteinInference->appendStep(step);
      step = new ProteinSequenceLabelingInferenceStep(T("SA Pass ") + lbcpp::toString(i), featureFunction, T("SolventAccessibilityThreshold20"));
      proteinInference->appendStep(step);
      step = new ProteinSequenceLabelingInferenceStep(T("SS8 Pass ") + lbcpp::toString(i), featureFunction, /*T("DSSPSecondaryStructureProbabilities"), */T("DSSPSecondaryStructureSequence"));
      proteinInference->appendStep(step);
#endif // 0

    }
  }

  /*
  ** Learning
  */
  InferenceLearnerCallbackPtr callback = new MyInferenceLearnerCallback(trainingData, testingData, true);
  InferenceLearnerPtr learner = stepByStepDeterministicSimulationLearner(callback, true, modelDirectory);
  learner->train(proteinInference, trainingData);

  /*
  ** Evaluation
  */
  InferenceContextPtr validationContext = singleThreadedInferenceContext();
  ProteinEvaluationCallbackPtr evaluation = new ProteinEvaluationCallback();
  validationContext->appendCallback(evaluation);

  validationContext->runWithSupervisedExamples(proteinInference, trainingData);
  std::cout << "Train evaluation: " << evaluation->toString() << std::endl;

  validationContext->runWithSupervisedExamples(proteinInference, testingData);
  std::cout << "Test evaluation: " << evaluation->toString() << std::endl;

  return 0;
}
