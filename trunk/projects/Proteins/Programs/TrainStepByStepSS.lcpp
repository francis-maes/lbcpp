/*-----------------------------------------.---------------------------------.
| Filename: FromScratch.lcpp               | Test Learning                   |
| Author  : Francis Maes                   |                                 |
| Started : 08/04/2010 16:27               |                                 |
`------------------------------------------/                                 |
                               |                                             |
                               `--------------------------------------------*/

#include <lbcpp/lbcpp.h>
#include "InferenceContext/CacheInferenceCallback.h"
#include "InferenceLearner/InferenceLearner.h"
#include "InferenceLearner/InferenceLearnerCallback.h"
#include "ProteinInference/ProteinEvaluationCallback.h"
#include "ProteinInference/ProteinInference.h"
#include "Programs/ArgumentSet.h"

using namespace lbcpp;

extern void declareProteinClasses();

class CustomableSecondaryStructureContent : public ProteinSequenceLabelingInferenceStep
{
public:
  enum Target {SS3 = 0, SS8, SA};

  CustomableSecondaryStructureContent(const String& name = String::empty)
    : ProteinSequenceLabelingInferenceStep(name), wAA(0), wPSSM(0), wSS3(0), wSS8(0), wSA(0), target(SS3)
    {}
  
  void setTarget(Target newTarget)
    {target = newTarget;}
  
  void enableAminoAcidFeatures(size_t windowLength)
    {wAA = windowLength;}
  
  void enablePositionSpecificScoreFeatures(size_t windowLength)
    {wPSSM = windowLength;}
  
  void enableSecondaryStructure3StatesFeatures(size_t windowLength)
    {wSS3 = windowLength;}
  
  void enableSecondaryStructure8StatesFeatures(size_t windowLength)
    {wSS8 = windowLength;}
  
  void enableSolventAccesibility2StatesFeatures(size_t windowLength)
    {wSA = windowLength;}
  
  void disableAminoAcidFeatures()
    {wAA = 0;}
  
  void disablePositionSpecificScoreFeatures()
    {wPSSM = 0;}
  
  void disableSecondaryStructure3StatesFeatures()
    {wSS3 = 0;}
  
  void disableSecondaryStructure8StatesFeatures()
    {wSS8 = 0;}
  
  void disableSolventAccesibility2StatesFeatures(size_t windowLength)
    {wSA = 0;}

  virtual featureGenerator getInputFeatures(ObjectPtr input, size_t index) const
  {
    ProteinPtr protein = input.dynamicCast<Protein>();
    jassert(protein);

    if (wAA)
    {
      LabelSequencePtr aminoAcidSequence = protein->getAminoAcidSequence();
      jassert(aminoAcidSequence);
      featureCall("AA") aminoAcidSequence->windowFeatures(index, wAA, wAA, true);
    }
    
    if (wPSSM)
    {
      ScoreVectorSequencePtr positionSpecificScores = protein->getPositionSpecificScoringMatrix();
      jassert(positionSpecificScores);
      featureCall("PSSM") positionSpecificScores->windowFeatures(index, wPSSM, wPSSM, true);
    }
    
    if (wSS3)
    {
      LabelSequencePtr secondaryStructure = protein->getSecondaryStructureSequence();
      jassert(secondaryStructure);
      featureCall("wSS3") secondaryStructure->windowFeatures(index, wSS3, wSS3, true);
    }
    
    if (wSS8)
    {
      LabelSequencePtr dsspSecondaryStructure = protein->getDSSPSecondaryStructureSequence();
      jassert(dsspSecondaryStructure);
      featureCall("wSS8") dsspSecondaryStructure->windowFeatures(index, wSS8, wSS8, true);
    }
    
    if (wSA)
    {
      LabelSequencePtr solventAccesibilityStructure = protein->getSolventAccessibilitySequence();
      jassert(solventAccesibilityStructure);
      featureCall("wSA") solventAccesibilityStructure->windowFeatures(index, wSA, wSA, true);
    }
  }
  

  virtual String getTargetName() const
  {
    static const juce::tchar* targetNames[] = {
      T("SecondaryStructureSequence"), T("DSSPSecondaryStructureSequence"), T("SolventAccessibilitySequence")
    };
    jassert((size_t)target < sizeof (targetNames) / sizeof (const juce::tchar* ));
    return targetNames[target];
  }

  virtual FeatureDictionaryPtr getTargetDictionary() const
  {
    static const FeatureDictionaryPtr targetDictionaries[] = {
      SecondaryStructureDictionary::getInstance(), DSSPSecondaryStructureDictionary::getInstance(), SolventAccesibility2StateDictionary::getInstance()
    };
    jassert((size_t)target < sizeof (targetDictionaries) / sizeof (FeatureDictionaryPtr));
    return targetDictionaries[target];
  }

  void setWindows(size_t newAA, size_t newPSSM, size_t newSS3, size_t newSS8, size_t newSA)
  {
    wAA   = newAA;
    wPSSM = newPSSM;
    wSS3  = newSS3;
    wSS8  = newSS8;
    wSA   = newSA;
  }

private:
  size_t wAA;
  size_t wPSSM;
  size_t wSS3;
  size_t wSS8;
  size_t wSA;
  Target target;
};

typedef ReferenceCountedObjectPtr<CustomableSecondaryStructureContent> CustomableSecondaryStructureContentPtr;

class MyInferenceLearnerCallback : public InferenceLearnerCallback
{
public:
  MyInferenceLearnerCallback(ObjectContainerPtr trainingData, ObjectContainerPtr testingData, String& prefix, size_t maxIteration, double regularizer, bool useCache = true)
    : trainingData(trainingData), testingData(testingData), startTimeIteration(0.0)
    , prefixFilename(prefix), oIteration(NULL), oPass(NULL)
    , currentPass(0), lastTrainQ3(0.), lastTrainQ8(0.)
    , lastTestQ3(0.), lastTestQ8(0.), lastIterationNumber(0)
    , maxIteration(maxIteration), regularizer(regularizer)
  {
    startTimePass = juce::Time::getMillisecondCounter();
    File cwd = File::getCurrentWorkingDirectory();
    File dst = cwd.getChildFile(prefixFilename + T(".pass"));
    std::cout << "New file: " << dst.getFullPathName() << std::endl;
    dst.deleteFile();
    oPass = dst.createOutputStream();
    
    if (useCache)
      cache = new InferenceResultCache();
  }

  virtual InferenceContextPtr createContext()
    {return singleThreadedInferenceContext();}

  virtual ClassifierPtr createClassifier(FeatureDictionaryPtr labels)
  {
    static const bool useConstantLearningRate = false;

    IterationFunctionPtr learningRate = useConstantLearningRate ? invLinearIterationFunction(2.0, 150000) : constantIterationFunction(1.0);
    GradientBasedLearnerPtr learner = stochasticDescentLearner(learningRate);  
    GradientBasedClassifierPtr classifier = maximumEntropyClassifier(learner, labels);
    classifier->setL2Regularizer(regularizer);
    return classifier;
  }

  virtual void preLearningIterationCallback(size_t iterationNumber)
  {
    std::cout << std::endl << " ================== ITERATION " << iterationNumber << " ================== " << std::endl;
    lastIterationNumber = iterationNumber;
  }

  // returns false if learning should stop
  virtual bool postLearningIterationCallback(InferenceStepPtr inference, size_t iterationNumber)
  {
    InferenceContextPtr validationContext = createContext();
    ProteinEvaluationCallbackPtr evaluation = new ProteinEvaluationCallback();
    validationContext->appendCallback(evaluation);
    if (cache)
      validationContext->appendCallback(new AutoSubStepsCacheInferenceCallback(cache, inference));

    validationContext->runWithSupervisedExamples(inference, trainingData);
    std::cout << "Train evaluation: " << evaluation->toString() << std::endl;

    lastTrainQ3 = evaluation->getQ3Score();
    lastTrainQ8 = evaluation->getQ8Score();
    
    validationContext->runWithSupervisedExamples(inference, testingData);
    std::cout << "Test evaluation: " << evaluation->toString() << std::endl;
    
    lastTestQ3 = evaluation->getQ3Score();
    lastTestQ8 = evaluation->getQ8Score();

    *oIteration << (int) lastIterationNumber << '\t'
               << lastTrainQ3 << '\t'
               << lastTestQ3  << '\t'
               << lastTrainQ8 << '\t'
               << lastTestQ8  << '\t'
               << (juce::Time::getMillisecondCounter() - startTimeIteration) / 1000. << '\t'
               << (int) currentPass << '\n';
    oIteration->flush();

    return iterationNumber < maxIteration;
  }

  virtual void preLearningStepCallback(InferenceStepPtr step)
  {
    String passName = step->getName();
    std::cout << std::endl << "=====================================================" << std::endl;
    std::cout << "======= LEARNING PASS " << passName << " ==========" << std::endl;
    std::cout << "=====================================================" << std::endl;
    
    startTimeIteration = juce::Time::getMillisecondCounter();

    File dst = File::getCurrentWorkingDirectory().getChildFile(prefixFilename + T(".iter_") + lbcpp::toString(currentPass));
    std::cout << "New file: " << dst.getFullPathName() << std::endl;
    dst.deleteFile();
    oIteration = dst.createOutputStream();
  }
  
  virtual void postLearningStepCallback(InferenceStepPtr step)
  {
    *oPass << (int) currentPass << '\t'
          << lastTrainQ3 << '\t'
          << lastTestQ3  << '\t'
          << lastTrainQ8 << '\t'
          << lastTestQ8  << '\t'
          << (juce::Time::getMillisecondCounter() - startTimePass) / 1000. << '\n';
    oPass->flush();
    
    currentPass++;
  }

private:
  ObjectContainerPtr trainingData;
  ObjectContainerPtr testingData;

  InferenceResultCachePtr cache;

  double startTimeIteration;
  double startTimePass;
  String& prefixFilename;
  OutputStream* oIteration;
  OutputStream* oPass;
  
  size_t currentPass;
  double lastTrainQ3;
  double lastTrainQ8;
  double lastTestQ3;
  double lastTestQ8;
  
  size_t lastIterationNumber;
  size_t maxIteration;
  double regularizer;
};


/*                                                *
                Under Heavy Development
 *                                                */

int main(int argc, char** argv)
{
  declareProteinClasses();
  
  String proteinsDirectory("/Users/jbecker/Documents/Workspace/CASP9/CB513");
  String prefixResults("result");
  int currentFold = 0;
  //String inferenceModel("CO");
  String predictionTarget("SS3");
  int maxIteration = 22;
  int maxPass = 5;
  int wAA = 10;
  int wPSSM = 10;
  int wSS3 = 10;
  int wSS8 = 10;
  int wSA = 10;
  double regularizer = 20.0;
  
  ArgumentSet arguments;
  arguments.insert(new StringArgument(T("ProteinsDirectory"), &proteinsDirectory));
  arguments.insert(new StringArgument(T("PrefixResults"), &prefixResults));
  arguments.insert(new IntegerArgument(T("CurrentFold"), &currentFold));
  //arguments.insert(new StringArgument(T("InferenceModel"), &inferenceModel));
  arguments.insert(new StringArgument(T("PredictionTarget"), &predictionTarget));
  arguments.insert(new IntegerArgument(T("MaximumIteration"), &maxIteration));
  arguments.insert(new IntegerArgument(T("MaximumPass"), &maxPass));
  arguments.insert(new IntegerArgument(T("AminoAcidWindow"), &wAA));
  arguments.insert(new IntegerArgument(T("PSSMWindow"), &wPSSM));
  arguments.insert(new IntegerArgument(T("SS3Window"), &wSS3));
  arguments.insert(new IntegerArgument(T("SS8Window"), &wSS8));
  arguments.insert(new IntegerArgument(T("SAWindow"), &wSA));
  arguments.insert(new DoubleArgument(T("Regularizer"), &regularizer));

  if (!arguments.parse(argv, 1, argc-1))
  {
    std::cout << "Usage: " << argv[0] << " " << arguments.toString() << std::endl;
    return -1;
  }

  File proteinsDirectoryFile = File::getCurrentWorkingDirectory().getChildFile(proteinsDirectory);
  
  enum{nbFolds = 7};
  
  std::cout << "*---- Program Parameters -----" << std::endl;
  std::cout << arguments;
  std::cout << "*-----------------------------" << std::endl;

  ObjectStreamPtr proteinsStream = directoryObjectStream(proteinsDirectoryFile, T("*.protein"));

#if 0
  ObjectContainerPtr prots = proteinsStream->load(7)->randomize();
  for (size_t i = 0; i < prots->size(); ++i)
  {
    ProteinPtr protein = (ProteinPtr) prots->get(i);

    std::cout << protein->toString() << std::endl;
  }
  
  
  return 0;
#endif // 0

  ObjectContainerPtr proteins = proteinsStream->load(7)->randomize()->apply(new ObjectToObjectPairFunction());

  ObjectContainerPtr trainingData = proteins->invFold(currentFold, nbFolds);
  ObjectContainerPtr testingData = proteins->fold(currentFold, nbFolds);

  std::cout << trainingData->size() << " Training Proteins "
            << testingData->size() << " Testing Proteins" << std::endl;

  ProteinInferencePtr proteinInference = new ProteinInference();
  
  if (predictionTarget == T("SS3"))
  {
    CustomableSecondaryStructureContentPtr step = new CustomableSecondaryStructureContent(T("AA+PSSM -> S3"));
    step->setTarget(CustomableSecondaryStructureContent::SS3);
    step->enableAminoAcidFeatures(wAA);
    step->enablePositionSpecificScoreFeatures(wPSSM);
    proteinInference->appendStep(step);
    
    for (size_t i = 0; i < (size_t) maxPass; ++i)
    {
      step = new CustomableSecondaryStructureContent(T("AA+PSSM+S3 -> S3 (") + toString(i) + T(")"));
      step->setTarget(CustomableSecondaryStructureContent::SS3);
      step->enableAminoAcidFeatures(wAA);
      step->enablePositionSpecificScoreFeatures(wPSSM);
      step->enableSecondaryStructure3StatesFeatures(wSS3);
      proteinInference->appendStep(step);
    }
  }
  else if (predictionTarget == T("SS8"))
  {
    CustomableSecondaryStructureContentPtr step = new CustomableSecondaryStructureContent(T("AA+PSSM -> S8"));
    step->setTarget(CustomableSecondaryStructureContent::SS8);
    step->enableAminoAcidFeatures(wAA);
    step->enablePositionSpecificScoreFeatures(wPSSM);
    proteinInference->appendStep(step);
    
    for (size_t i = 0; i < (size_t) maxPass; ++i)
    {
      step = new CustomableSecondaryStructureContent(T("AA+PSSM+S8 -> S8 (") + toString(i) + T(")"));
      step->setTarget(CustomableSecondaryStructureContent::SS8);
      step->enableAminoAcidFeatures(wAA);
      step->enablePositionSpecificScoreFeatures(wPSSM);
      step->enableSecondaryStructure8StatesFeatures(wSS8);
      proteinInference->appendStep(step);
    }
  } else if (predictionTarget == T("SA"))
  {
    CustomableSecondaryStructureContentPtr step = new CustomableSecondaryStructureContent(T("AA+PSSM -> SA"));
    step->setTarget(CustomableSecondaryStructureContent::SA);
    step->enableAminoAcidFeatures(wAA);
    step->enablePositionSpecificScoreFeatures(wPSSM);
    proteinInference->appendStep(step);

    for (size_t i = 0; i < (size_t) maxPass; ++i)
    {
      step = new CustomableSecondaryStructureContent(T("AA+PSSM+SA -> SA (") + toString(i) + T(")"));
      step->setTarget(CustomableSecondaryStructureContent::SA);
      step->enableAminoAcidFeatures(wAA);
      step->enablePositionSpecificScoreFeatures(wPSSM);
      step->enableSolventAccesibility2StatesFeatures(wSA);
      proteinInference->appendStep(step);
    }
  }
  else if (predictionTarget == T("SS3-SS8"))
  {
    CustomableSecondaryStructureContentPtr step = new CustomableSecondaryStructureContent(T("AA+PSSM -> S3"));
    step->setTarget(CustomableSecondaryStructureContent::SS3);
    step->enableAminoAcidFeatures(wAA);
    step->enablePositionSpecificScoreFeatures(wPSSM);
    proteinInference->appendStep(step);
    
    step = new CustomableSecondaryStructureContent(T("AA+PSSM -> S8"));
    step->setTarget(CustomableSecondaryStructureContent::SS8);
    step->enableAminoAcidFeatures(wAA);
    step->enablePositionSpecificScoreFeatures(wPSSM);
    proteinInference->appendStep(step);
    
    for (size_t i = 0; i < (size_t) maxPass; ++i)
    {
      step = new CustomableSecondaryStructureContent(T("AA+PSSM+S3+S8 -> S3 (") + toString(i) + T(")"));
      step->setTarget(CustomableSecondaryStructureContent::SS3);
      step->enableAminoAcidFeatures(wAA);
      step->enablePositionSpecificScoreFeatures(wPSSM);
      step->enableSecondaryStructure3StatesFeatures(wSS3);
      step->enableSecondaryStructure8StatesFeatures(wSS8);
      proteinInference->appendStep(step);
      
      step = new CustomableSecondaryStructureContent(T("AA+PSSM+S3+S8 -> S8 (") + toString(i) + T(")"));
      step->setTarget(CustomableSecondaryStructureContent::SS8);
      step->enableAminoAcidFeatures(wAA);
      step->enablePositionSpecificScoreFeatures(wPSSM);
      step->enableSecondaryStructure3StatesFeatures(wSS3);
      step->enableSecondaryStructure8StatesFeatures(wSS8);
      proteinInference->appendStep(step);
    }
  }

  InferenceLearnerCallbackPtr callback = new MyInferenceLearnerCallback(trainingData, testingData, prefixResults, maxIteration, regularizer, true);
  InferenceLearnerPtr learner = stepByStepDeterministicSimulationLearner(callback, true);
  learner->train(proteinInference, trainingData);

  return 0;
}
