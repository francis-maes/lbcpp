/*-----------------------------------------.---------------------------------.
| Filename: FromScratch.lcpp               | Test Learning                   |
| Author  : Francis Maes                   |                                 |
| Started : 08/04/2010 16:27               |                                 |
`------------------------------------------/                                 |
                               |                                             |
                               `--------------------------------------------*/

#include <lbcpp/lbcpp.h>
#include "GeneratedCode/Data/Bio/Protein.lh"
#include "VariableSetModel.h"
#include "InferenceStep/ProteinInferenceStep.h"
#include "InferenceStep/CompositeInferenceStep.h"
using namespace lbcpp;

extern void declareProteinsClasses();
extern void declareVariableSetClasses();

// the aim is to learn a "incomplete Protein => complete Protein" function

// Training Data: Proteins
// Inference: Protein -> Protein

class DecoratorInferenceStep : public InferenceStep
{
public:
  DecoratorInferenceStep(InferenceStepPtr decoratedProblem,
      ObjectFunctionPtr trainingDataPreprocessor = ObjectFunctionPtr(),
      ObjectFunctionPtr functionPreprocessor = ObjectFunctionPtr(),
      ObjectFunctionPtr functionPostprocessor = ObjectFunctionPtr());

};

class MainInferenceStep : public ChainInferenceStep
{
public:
  MainInferenceStep() : ChainInferenceStep(T("Main"))
  {
    append(new DecoratorInferenceStep(new SS3InferenceStep(),
      ObjectFunctionPtr(), ObjectFunctionPtr(), postprocessSS3Prediction)); 
  }

  void postprocessSS3Prediction(ObjectPtr currentInput, ObjectPtr ss3Output)
  {
    ProteinPtr protein = currentInput.dynamicCast<Protein>();
    jassert(protein);
    protein->setSecondaryStructureSequence(ss3Output.dynamicCast<SecondaryStructureSequence>());
  }
};

typedef ReferenceCountedObjectPtr<ProteinInferenceStep> ProteinInferenceStepPtr;


InferenceStepPtr createMainProblem()
{
  ChainInferenceStepPtr res = new ChainInferenceStep(T("SS3 Prediction"));
  InferenceStepPtr pass1;
  InferenceStepPtr pass2;
  res->append(pass1);
  res->append(pass2);
  return res;
}

int main(int argc, char** argv)
{
  File modelFile(T("C:\\Projets\\Proteins\\data\\models\\test.model"));
  File proteinsDirectory(T("C:\\Projets\\Proteins\\data\\CB513cool"));
  ObjectStreamPtr proteinsStream = directoryObjectStream(proteinsDirectory, T("*.protein"));
  ObjectContainerPtr proteins = proteinsStream->load()->randomize();
  ObjectContainerPtr trainingData = proteins->invFold(0, 7);
  ObjectContainerPtr testingData = proteins->fold(0, 7);

  InferenceStepPtr topLevelProblem = new MainInferenceStep();
  Time lastDataTime = proteinsDirectory.getLastModificationTime();
  ObjectFunctionPtr topLevelPredictor = topLevelProblem->trainPredictor(modelFile, trainingData, lastDataTime);

  for (size_t i = 0; i < testingData->size(); ++i)
  {
    ProteinPtr inputProtein = testingData->getAndCast<Protein>(i);
    jassert(inputProtein);
    ProteinPtr predictedProtein = topLevelPredictor->function(inputProtein).dynamicCast<Protein>();
    jassert(predictedProtein);
  }

  return 0;
}
