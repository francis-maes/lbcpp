/*-----------------------------------------.---------------------------------.
| Filename: FromScratch.lcpp               | Test Learning                   |
| Author  : Francis Maes                   |                                 |
| Started : 08/04/2010 16:27               |                                 |
`------------------------------------------/                                 |
                               |                                             |
                               `--------------------------------------------*/

#include <lbcpp/lbcpp.h>
#include "GeneratedCode/Data/Bio/Protein.lh"
#include "VariableSetModel.h"
#include "InferenceStep/ProteinInferenceSteps.h"
#include "InferenceStep/SequenceInferenceStep.h"
#include "InferenceCallback/ProteinEvaluationCallback.h"
#include "InferenceCallback/SingleStepSimulationLearningCallback.h"
#include "InferenceCallback/GlobalSimulationLearningCallback.h"
using namespace lbcpp;

extern void declareProteinsClasses();
extern void declareVariableSetClasses();

////////////////////////////////
//////Custom SS3 Problem////////
////////////////////////////////

// the aim is to learn a "incomplete Protein => complete Protein" function
// Input: Protein
// Output: SecondaryStructureSequence
class SS3ContentOnlyInferenceStep : public SecondaryStructureInferenceStep
{
public:
  SS3ContentOnlyInferenceStep() : SecondaryStructureInferenceStep(T("SS3ContentOnly")) {}

  virtual featureGenerator getInputFeatures(ProteinPtr protein, size_t index) const
  {
    LabelSequencePtr aminoAcidSequence = protein->getAminoAcidSequence();
    ScoreVectorSequencePtr positionSpecificScores = protein->getPositionSpecificScoringMatrix();

    featureCall("a") inline aminoAcidSequence->windowFeatures(index, 8, 8, true);
    featureCall("p") inline positionSpecificScores->windowFeatures(index, 8, 8, true);
  }
};

class SS3ContentAndStructureInferenceStep : public SecondaryStructureInferenceStep
{
public:
  SS3ContentAndStructureInferenceStep(size_t passNumber)
    : SecondaryStructureInferenceStep(T("SS3ContentAndStructure") + lbcpp::toString(passNumber)) {}

  virtual featureGenerator getInputFeatures(ProteinPtr protein, size_t index) const
  {
    LabelSequencePtr aminoAcidSequence = protein->getAminoAcidSequence();
    ScoreVectorSequencePtr positionSpecificScores = protein->getPositionSpecificScoringMatrix();
    SecondaryStructureSequencePtr secondaryStructure = protein->getSecondaryStructureSequence();

    featureCall("a") aminoAcidSequence->windowFeatures(index, 8, 8, true);
    featureCall("p") positionSpecificScores->windowFeatures(index, 8, 8, true);
    featureCall("w") secondaryStructure->windowFeatures(index, 5, 5, true);
  }
};

class MainInferenceStep : public SequenceInferenceStep
{
public:
  MainInferenceStep() : SequenceInferenceStep(T("Main"))
  {
    appendSubStep(new SS3ContentOnlyInferenceStep());
    /*appendSubStep(new SS3ContentAndStructureInferenceStep(1));
    appendSubStep(new SS3ContentAndStructureInferenceStep(2));
    appendSubStep(new SS3ContentAndStructureInferenceStep(3));*/
  }

  virtual ObjectPtr run(InferenceContextPtr context, ObjectPtr input, ObjectPtr supervision, ReturnCode& returnCode)
  {
    // input and working proteins
    ProteinPtr inputProtein = input.dynamicCast<Protein>();
    jassert(inputProtein);
    ProteinPtr workingProtein = inputProtein->cloneAndCast<Protein>();
    
    // supervision
    SecondaryStructureSequencePtr correctSecondaryStructure;
    ProteinPtr correctProtein = supervision.dynamicCast<Protein>();
    if (correctProtein)
      correctSecondaryStructure = correctProtein->getSecondaryStructureSequence();

    // main inference loop
    for (size_t i = 0; i < subSteps.size(); ++i)
    {
      SecondaryStructureSequencePtr predictedSS = context->runInference(subSteps[i], workingProtein, correctSecondaryStructure, returnCode);
      if (returnCode != finishedReturnCode)
        return ObjectPtr();
      workingProtein->setSecondaryStructureSequence(predictedSS);
    }

    // return the last version of the working protein
    return workingProtein;
  }
};

////////////////////////////////
/////////MAIN///////////////////
////////////////////////////////

void learn(InferenceCallbackPtr learningCallback, InferenceStepPtr inference, ObjectContainerPtr trainingData, ObjectContainerPtr testingData)
{
  ProteinEvaluationCallbackPtr evaluation = new ProteinEvaluationCallback();

  InferenceContextPtr trainingContext = singleThreadedInferenceContext();
  trainingContext->appendCallback(evaluation);
  trainingContext->appendCallback(learningCallback);

  InferenceContextPtr evaluationContext = singleThreadedInferenceContext();
  evaluationContext->appendCallback(evaluation);

  for (size_t i = 0; i < 10; ++i)
  {
    std::cout << std::endl << " ================== ITERATION " << i << " ================== " << std::endl;

    trainingContext->runWithSelfSupervisedExamples(inference, trainingData);
    std::cout << "Online evaluation:" << std::endl << evaluation->toString() << std::endl;

    evaluationContext->runWithSelfSupervisedExamples(inference, trainingData);
    std::cout << "Train evaluation:" << std::endl << evaluation->toString() << std::endl;

    evaluationContext->runWithSelfSupervisedExamples(inference, testingData);
    std::cout << "Test evaluation:" << std::endl << evaluation->toString() << std::endl;
  }
}

void learnWithGlobalSimulation(InferenceStepPtr inference, ObjectContainerPtr trainingData, ObjectContainerPtr testingData)
  {learn(new GlobalSimulationLearningCallback(), inference, trainingData, testingData);}

void learnStepByStep(SequenceInferenceStepPtr inference, ObjectContainerPtr trainingData, ObjectContainerPtr testingData)
{
  size_t numSteps = inference->getNumSubSteps();
  for (size_t stepNumber = 0; stepNumber < numSteps; ++stepNumber)
  {
    std::cout << std::endl << "=====================================================" << std::endl;
    std::cout << "============== LEARNING PASS " << stepNumber << " ======================" << std::endl;
    std::cout << "=====================================================" << std::endl;
    InferenceStepPtr step = inference->getSubStep(stepNumber);
    learn(new SingleStepSimulationLearningCallback(inference->getSubStep(stepNumber)), inference, trainingData, testingData);
  }
}

int main(int argc, char** argv)
{
  declareProteinsClasses();
  declareVariableSetClasses();

  File modelFile(T("C:\\Projets\\Proteins\\data\\models\\test.model"));
  File proteinsDirectory(T("C:\\Projets\\Proteins\\data\\CB513cool"));
  ObjectStreamPtr proteinsStream = directoryObjectStream(proteinsDirectory, T("*.protein"));
  ObjectContainerPtr proteins = proteinsStream->load()->randomize();

  ObjectContainerPtr trainingData = proteins->invFold(0, 7);
  ObjectContainerPtr testingData = proteins->fold(0, 7);
  std::cout << trainingData->size() << " Training Proteins "
            << testingData->size() << " Testing Proteins" << std::endl;

  InferenceStepPtr mainInferenceStep = new MainInferenceStep();
  learnStepByStep(mainInferenceStep, trainingData, testingData);
  return 0;
}
