/*-----------------------------------------.---------------------------------.
| Filename: FromScratch.lcpp               | Test Learning                   |
| Author  : Francis Maes                   |                                 |
| Started : 08/04/2010 16:27               |                                 |
`------------------------------------------/                                 |
                               |                                             |
                               `--------------------------------------------*/

#include <lbcpp/lbcpp.h>
#include "GeneratedCode/Data/Bio/Protein.lh"
#include "VariableSetModel.h"
#include "InferenceStep/SequentialInferenceStep.h"
#include "InferenceCallback/SingleStepSimulationLearningCallback.h"
#include "InferenceCallback/GlobalSimulationLearningCallback.h"

#include "ProteinInference/ProteinEvaluationCallback.h"
#include "ProteinInference/ProteinInference.h"
using namespace lbcpp;

extern void declareProteinsClasses();
extern void declareVariableSetClasses();

////////////////////////////////
//////Custom SS3 Problem////////
////////////////////////////////

// the aim is to learn a "incomplete Protein => complete Protein" function
// Input: Protein
// Output: SecondaryStructureSequence
class SSContentOnlyInferenceStep : public SecondaryStructureInferenceStep
{
public:
  SSContentOnlyInferenceStep(const String& name, bool useDSSPElements)
    : SecondaryStructureInferenceStep(name, useDSSPElements) {}

  virtual featureGenerator getInputFeatures(ObjectPtr input, size_t index) const
  {
    ProteinPtr protein = input.dynamicCast<Protein>();
    jassert(protein);
    LabelSequencePtr aminoAcidSequence = protein->getAminoAcidSequence();
    ScoreVectorSequencePtr positionSpecificScores = protein->getPositionSpecificScoringMatrix();

    featureCall("a") inline aminoAcidSequence->windowFeatures(index, 8, 8, true);
    featureCall("p") inline positionSpecificScores->windowFeatures(index, 8, 8, true);
  }
};

class SSContentAndStructureInferenceStep : public SecondaryStructureInferenceStep
{
public:
  SSContentAndStructureInferenceStep(const String& name, bool useDSSPElements)
    : SecondaryStructureInferenceStep(name, useDSSPElements) {}

  virtual featureGenerator getInputFeatures(ObjectPtr input, size_t index) const
  {
    ProteinPtr protein = input.dynamicCast<Protein>();
    jassert(protein);
    LabelSequencePtr aminoAcidSequence = protein->getAminoAcidSequence();
    ScoreVectorSequencePtr positionSpecificScores = protein->getPositionSpecificScoringMatrix();
    SecondaryStructureSequencePtr secondaryStructure = protein->getSecondaryStructureSequence();
    SecondaryStructureSequencePtr dsspSecondaryStructure = protein->getSecondaryStructureSequence(true);

    featureCall("a") aminoAcidSequence->windowFeatures(index, 8, 8, true);
    featureCall("p") positionSpecificScores->windowFeatures(index, 8, 8, true);
    featureCall("w3") secondaryStructure->windowFeatures(index, 5, 5, true);
    featureCall("w8") dsspSecondaryStructure->windowFeatures(index, 5, 5, true);
  }
};

////////////////////////////////
/////////MAIN///////////////////
////////////////////////////////

void learn(InferenceCallbackPtr learningCallback, InferenceCallbackPtr customEvaluationCallback, InferenceStepPtr inference, ObjectContainerPtr trainingData, ObjectContainerPtr testingData)
{
  ProteinEvaluationCallbackPtr evaluation = new ProteinEvaluationCallback();

  InferenceContextPtr trainingContext = singleThreadedInferenceContext();
  trainingContext->appendCallback(evaluation);
  trainingContext->appendCallback(learningCallback);

  InferenceContextPtr evaluationContext = singleThreadedInferenceContext();
  evaluationContext->appendCallback(evaluation);
  if (customEvaluationCallback)
    evaluationContext->appendCallback(customEvaluationCallback);

  for (size_t i = 0; i < 15; ++i)
  {
    std::cout << std::endl << " ================== ITERATION " << i << " ================== " << std::endl;

    trainingContext->runWithSelfSupervisedExamples(inference, trainingData->randomize());
    std::cout << "Online evaluation: " << evaluation->toString() << std::endl;

    //evaluationContext->runWithSelfSupervisedExamples(inference, trainingData);
    //std::cout << "Train evaluation: " << evaluation->toString() << std::endl;

    evaluationContext->runWithSelfSupervisedExamples(inference, testingData);
    std::cout << "Test evaluation: " << evaluation->toString() << std::endl;
  }
}

void learnWithGlobalSimulation(InferenceStepPtr inference, ObjectContainerPtr trainingData, ObjectContainerPtr testingData)
  {learn(new GlobalSimulationLearningCallback(), InferenceCallbackPtr(), inference, trainingData, testingData);}

void learnStepByStep(SequentialInferenceStepPtr inference, ObjectContainerPtr trainingData, ObjectContainerPtr testingData)
{
  size_t numSteps = inference->getNumSubSteps();
  for (size_t stepNumber = 0; stepNumber < numSteps; ++stepNumber)
  {
    InferenceStepPtr step = inference->getSubStep(stepNumber);
    std::cout << std::endl << "=====================================================" << std::endl;
    std::cout << "======= LEARNING PASS " << step->getName() << " ==========" << std::endl;
    std::cout << "=====================================================" << std::endl;
    InferenceCallbackPtr customEvaluationCallback;
    if (stepNumber < numSteps - 1)
      customEvaluationCallback = new CancelAfterStepCallback(step);
    learn(new SingleStepSimulationLearningCallback(step), customEvaluationCallback, inference, trainingData, testingData);
  }
}

int main(int argc, char** argv)
{
  declareProteinsClasses();
  declareVariableSetClasses();

  File modelFile(T("C:\\Projets\\Proteins\\data\\models\\test.model"));
  File proteinsDirectory(T("C:\\Projets\\Proteins\\data\\CB513cool"));
  ObjectStreamPtr proteinsStream = directoryObjectStream(proteinsDirectory, T("*.protein"));
  ObjectContainerPtr proteins = proteinsStream->load(7)->randomize();

  ObjectContainerPtr trainingData = proteins->invFold(0, 7);
  ObjectContainerPtr testingData = proteins->fold(0, 7);
  std::cout << trainingData->size() << " Training Proteins "
            << testingData->size() << " Testing Proteins" << std::endl;

  ProteinInferencePtr proteinInference = new ProteinInference();
  proteinInference->appendStep(new SSContentOnlyInferenceStep(T("AA+PSSM -> S3"), false), T("ThreeStateSecondaryStructure"));
  proteinInference->appendStep(new SSContentOnlyInferenceStep(T("AA+PSSM -> S8"), true), T("EightStateSecondaryStructure"));
  for (size_t i = 0; i < 5; ++i)
  {
    proteinInference->appendStep(new SSContentAndStructureInferenceStep(T("AA+PSSM+S3+S8 -> S3 (") + lbcpp::toString(i) + T(")"), false), T("ThreeStateSecondaryStructure"));
    proteinInference->appendStep(new SSContentAndStructureInferenceStep(T("AA+PSSM+S3+S8 -> S8 (") + lbcpp::toString(i) + T(")"), true), T("EightStateSecondaryStructure"));
  }
  
  learnStepByStep(proteinInference, trainingData, testingData);
  //learnWithGlobalSimulation(mainInferenceStep, trainingData, testingData);
  return 0;
}
