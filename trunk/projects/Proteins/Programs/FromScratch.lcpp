/*-----------------------------------------.---------------------------------.
| Filename: FromScratch.lcpp               | Test Learning                   |
| Author  : Francis Maes                   |                                 |
| Started : 08/04/2010 16:27               |                                 |
`------------------------------------------/                                 |
                               |                                             |
                               `--------------------------------------------*/

#include <lbcpp/lbcpp.h>
#include "GeneratedCode/Data/Bio/Protein.lh"
#include "VariableSetModel.h"
#include "InferenceStep/ProteinInferenceSteps.h"
#include "InferenceStep/SequenceInferenceStep.h"
using namespace lbcpp;

extern void declareProteinsClasses();
extern void declareVariableSetClasses();

// the aim is to learn a "incomplete Protein => complete Protein" function

// Input: Protein
// Output: SecondaryStructureSequence
class SS3ContentOnlyInferenceStep : public SecondaryStructureInferenceStep
{
public:
  SS3ContentOnlyInferenceStep() : SecondaryStructureInferenceStep(T("SS3ContentOnly")) {}

  virtual featureGenerator getInputFeatures(ProteinPtr protein, size_t index) const
  {
    LabelSequencePtr aminoAcidSequence = protein->getAminoAcidSequence();
    ScoreVectorSequencePtr positionSpecificScores = protein->getPositionSpecificScoringMatrix();

    featureCall("a") inline aminoAcidSequence->windowFeatures(index, 8, 8, true);
    featureCall("p") inline positionSpecificScores->windowFeatures(index, 8, 8, true);
  }
};

class SS3ContentAndStructureInferenceStep : public SecondaryStructureInferenceStep
{
public:
  SS3ContentAndStructureInferenceStep(size_t passNumber)
    : SecondaryStructureInferenceStep(T("SS3ContentAndStructure") + lbcpp::toString(passNumber)) {}

  virtual featureGenerator getInputFeatures(ProteinPtr protein, size_t index) const
  {
    LabelSequencePtr aminoAcidSequence = protein->getAminoAcidSequence();
    ScoreVectorSequencePtr positionSpecificScores = protein->getPositionSpecificScoringMatrix();
    SecondaryStructureSequencePtr secondaryStructure = protein->getSecondaryStructureSequence();

    featureCall("a") aminoAcidSequence->windowFeatures(index, 8, 8, true);
    featureCall("p") positionSpecificScores->windowFeatures(index, 8, 8, true);
    featureCall("w") secondaryStructure->windowFeatures(index, 5, 5, true);
  }
};

class MainInferenceStep : public CompositeInferenceStep
{
public:
  MainInferenceStep() : CompositeInferenceStep(T("Main"))
  {
    appendSubStep(new SS3ContentOnlyInferenceStep());
    appendSubStep(new SS3ContentAndStructureInferenceStep(1));
    appendSubStep(new SS3ContentAndStructureInferenceStep(2));
    appendSubStep(new SS3ContentAndStructureInferenceStep(3));
  }

  virtual ResultCode run(InferencePolicyPtr policy, ObjectPtr input, ObjectPtr& output)
  {
    ProteinPtr protein = input->cloneAndCast<Protein>();
    jassert(protein);
    ProteinPtr correctProtein = output ? output->cloneAndCast<Protein>() : ProteinPtr();
    output = protein;
    
    SecondaryStructureSequencePtr correctSecondaryStructure;
    if (correctProtein)
      correctSecondaryStructure = correctProtein->getSecondaryStructureSequence();

    for (size_t i = 0; i < subSteps.size(); ++i)
    {
      ObjectPtr subStepOutput = correctSecondaryStructure;
      ResultCode code = policy->doSubStep(subSteps[i], protein, subStepOutput);
      if (code != finishedReturnCode)
        return code;
      protein->setSecondaryStructureSequence(subStepOutput.dynamicCast<SecondaryStructureSequence>());
    }
    return finishedReturnCode;
  }
};

int main(int argc, char** argv)
{
  File modelFile(T("C:\\Projets\\Proteins\\data\\models\\test.model"));
  File proteinsDirectory(T("C:\\Projets\\Proteins\\data\\CB513cool"));
  ObjectStreamPtr proteinsStream = directoryObjectStream(proteinsDirectory, T("*.protein"));
  ObjectContainerPtr proteins = proteinsStream->load()->randomize();
  ObjectContainerPtr trainingData = proteins->invFold(0, 7);
  ObjectContainerPtr testingData = proteins->fold(0, 7);

  InferenceStepPtr mainInferenceStep = new MainInferenceStep();
  Time lastDataTime = proteinsDirectory.getLastModificationTime();
  /*
  ObjectFunctionPtr topLevelPredictor = topLevelProblem->trainPredictor(modelFile, trainingData, lastDataTime);

  for (size_t i = 0; i < testingData->size(); ++i)
  {
    ProteinPtr inputProtein = testingData->getAndCast<Protein>(i);
    jassert(inputProtein);
    ProteinPtr predictedProtein = topLevelPredictor->function(inputProtein).dynamicCast<Protein>();
    jassert(predictedProtein);
  }*/

  return 0;
}
