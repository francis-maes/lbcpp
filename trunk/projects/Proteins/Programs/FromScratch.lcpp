/*-----------------------------------------.---------------------------------.
| Filename: FromScratch.lcpp               | Test Learning                   |
| Author  : Francis Maes                   |                                 |
| Started : 08/04/2010 16:27               |                                 |
`------------------------------------------/                                 |
                               |                                             |
                               `--------------------------------------------*/

#include <lbcpp/lbcpp.h>
#include "GeneratedCode/Data/Bio/Protein.lh"
#include "VariableSetModel.h"
#include "InferenceStep/ProteinInferenceSteps.h"
#include "InferenceStep/SequenceInferenceStep.h"
#include "InferencePolicy/ProteinEvaluationPolicy.h"
#include "InferencePolicy/GlobalSimulationLearningPolicy.h"
using namespace lbcpp;

extern void declareProteinsClasses();
extern void declareVariableSetClasses();

////////////////////////////////
///////Inference Visitor////////
////////////////////////////////

class DefaultInferenceVisitor : public InferenceVisitor
{
public:
  virtual void visit(SequenceInferenceStepPtr inference)
  {
    for (size_t i = 0; i < inference->getNumSubSteps(); ++i)
      inference->getSubStep(i)->accept(InferenceVisitorPtr(this));
  }
};

class InferenceBuilder : public DefaultInferenceVisitor
{
public:
  
};


////////////////////////////////
//////InferencePolicy///////////
////////////////////////////////

/*
class FixedLengthChain2InferencePolicy : public DefaultInferencePolicy
{
public:
  FixedLengthChain2InferencePolicy(InferencePolicyPtr policy1, size_t policy1NumSteps, InferencePolicyPtr policy2, size_t policy2NumSteps)
    : policy1(policy1), policy1NumSteps(policy1NumSteps), policy2(policy2), policy2NumSteps(policy2NumSteps) {reset();}
  
  void reset()
    {currentPosition = 0;}

  virtual ReturnCode doSubStep(InferenceStepPtr step, ObjectPtr input, ObjectPtr& output)
  {
    if (currentPosition < policy1NumSteps)
    {
      ReturnCode res = policy1->doSubStep(step, input, output);
      ++currentPosition;
      return res;
    }
    else if (currentPosition < policy2NumSteps)
    {
      ReturnCode res = policy2->doSubStep(step, input, output);
      ++currentPosition;
      return res;
    }
    else
      return InferenceStep::canceledReturnCode;
  }

private:
  InferencePolicyPtr policy1;
  size_t policy1NumSteps;
  InferencePolicyPtr policy2;
  size_t policy2NumSteps;

  size_t currentPosition;
};

class LearnNthStepDeterministicInferencePolicy : public FixedLengthChain2InferencePolicy
{
public:
  LearnNthStepDeterministicInferencePolicy(size_t learnedStepNumber, InferencePolicyPtr learningPolicy)
    : FixedLengthChain2InferencePolicy(new DefaultInferencePolicy(), learnedStepNumber, learningPolicy, 1) {}
};
*/

////////////////////////////////
//////Custom SS3 Problem////////
////////////////////////////////

// the aim is to learn a "incomplete Protein => complete Protein" function
// Input: Protein
// Output: SecondaryStructureSequence
class SS3ContentOnlyInferenceStep : public SecondaryStructureInferenceStep
{
public:
  SS3ContentOnlyInferenceStep() : SecondaryStructureInferenceStep(T("SS3ContentOnly")) {}

  virtual featureGenerator getInputFeatures(ProteinPtr protein, size_t index) const
  {
    LabelSequencePtr aminoAcidSequence = protein->getAminoAcidSequence();
    ScoreVectorSequencePtr positionSpecificScores = protein->getPositionSpecificScoringMatrix();

    featureCall("a") inline aminoAcidSequence->windowFeatures(index, 8, 8, true);
    featureCall("p") inline positionSpecificScores->windowFeatures(index, 8, 8, true);
  }
};

class SS3ContentAndStructureInferenceStep : public SecondaryStructureInferenceStep
{
public:
  SS3ContentAndStructureInferenceStep(size_t passNumber)
    : SecondaryStructureInferenceStep(T("SS3ContentAndStructure") + lbcpp::toString(passNumber)) {}

  virtual featureGenerator getInputFeatures(ProteinPtr protein, size_t index) const
  {
    LabelSequencePtr aminoAcidSequence = protein->getAminoAcidSequence();
    ScoreVectorSequencePtr positionSpecificScores = protein->getPositionSpecificScoringMatrix();
    SecondaryStructureSequencePtr secondaryStructure = protein->getSecondaryStructureSequence();

    featureCall("a") aminoAcidSequence->windowFeatures(index, 8, 8, true);
    featureCall("p") positionSpecificScores->windowFeatures(index, 8, 8, true);
    featureCall("w") secondaryStructure->windowFeatures(index, 5, 5, true);
  }
};

class MainInferenceStep : public SequenceInferenceStep
{
public:
  MainInferenceStep() : SequenceInferenceStep(T("Main"))
  {
    appendSubStep(new SS3ContentOnlyInferenceStep());
    appendSubStep(new SS3ContentAndStructureInferenceStep(1));
    appendSubStep(new SS3ContentAndStructureInferenceStep(2));
    appendSubStep(new SS3ContentAndStructureInferenceStep(3));
  }

  virtual ObjectPtr run(InferencePolicyPtr policy, ObjectPtr input, ObjectPtr supervision, ReturnCode& returnCode)
  {
    // input and working proteins
    ProteinPtr inputProtein = input.dynamicCast<Protein>();
    jassert(inputProtein);
    ProteinPtr workingProtein = inputProtein->cloneAndCast<Protein>();
    
    // supervision
    SecondaryStructureSequencePtr correctSecondaryStructure;
    ProteinPtr correctProtein = supervision.dynamicCast<Protein>();
    if (correctProtein)
      correctSecondaryStructure = correctProtein->getSecondaryStructureSequence();

    // main inference loop
    for (size_t i = 0; i < subSteps.size(); ++i)
    {
      SecondaryStructureSequencePtr predictedSS = policy->doSubStep(subSteps[i], workingProtein, correctSecondaryStructure, returnCode);
      if (returnCode != finishedReturnCode)
        return ObjectPtr();
      workingProtein->setSecondaryStructureSequence(predictedSS);
    }

    // return the last version of the working protein
    return workingProtein;
  }
};

////////////////////////////////
/////////MAIN///////////////////
////////////////////////////////


int main(int argc, char** argv)
{
  declareProteinsClasses();
  declareVariableSetClasses();

  File modelFile(T("C:\\Projets\\Proteins\\data\\models\\test.model"));
  File proteinsDirectory(T("C:\\Projets\\Proteins\\data\\CB513cool"));
  ObjectStreamPtr proteinsStream = directoryObjectStream(proteinsDirectory, T("*.protein"));
  ObjectContainerPtr proteins = proteinsStream->load()->randomize();

  ObjectContainerPtr trainingData = proteins->invFold(0, 7);
  ObjectContainerPtr testingData = proteins->fold(0, 7);
  std::cout << trainingData->size() << " Training Proteins "
            << testingData->size() << " Testing Proteins" << std::endl;

  InferenceStepPtr mainInferenceStep = new MainInferenceStep();
  InferencePolicyPtr inferencePolicy = new GlobalSimulationLearningPolicy();
  for (size_t i = 0; i < 100; ++i)
  {
    std::cout << std::endl << " ================== ITERATION " << i << " ================== " << std::endl;
    ProteinEvaluationPolicyPtr onlineEvaluation = new ProteinEvaluationPolicy(inferencePolicy);
    onlineEvaluation->runOnSelfSupervisedExampleSet(mainInferenceStep, trainingData);
    std::cout << "Online evaluation:" << std::endl << onlineEvaluation->toString() << std::endl;

    onlineEvaluation = new ProteinEvaluationPolicy(new DefaultInferencePolicy());
    onlineEvaluation->runOnSelfSupervisedExampleSet(mainInferenceStep, trainingData);
    std::cout << "Train evaluation:" << std::endl << onlineEvaluation->toString() << std::endl;

    onlineEvaluation->runOnSelfSupervisedExampleSet(mainInferenceStep, testingData);
    std::cout << "Test evaluation:" << std::endl << onlineEvaluation->toString() << std::endl;
  }
  return 0;
}
