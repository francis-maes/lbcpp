/*-----------------------------------------.---------------------------------.
| Filename: ProteinResiduePairFeatures.lcpp| A feature function phi :        |
| Author  : Francis Maes                   | protein x i x j -> features     |
| Started : 27/04/2010 18:53               |                                 |
`------------------------------------------/                                 |
                               |                                             |
                               `--------------------------------------------*/

#include "Protein/Inference/ProteinResiduePairFeatures.h"
#include "InferenceData/CommonFeatureGenerators.h"
using namespace lbcpp;

/*
** CompositeProteinResiduePairFeatures
*/
featureGenerator CompositeProteinResiduePairFeatures::compute(ProteinPtr protein, size_t firstPosition, size_t secondPosition)
{
  for (size_t i = 0; i < this->getNumSubFeatureFunctions(); ++i)
  {
    ProteinResiduePairFeaturesPtr subFunction = this->getSubFeatureFunction(i);
    FeatureGeneratorPtr fg = subFunction->compute(protein, firstPosition, secondPosition);
    if (fg)
      featureCall(subFunction->getName()) fg;
  }
}

String CompositeProteinResiduePairFeatures::toString() const
{
  String res = T("Composite:\n");
  for (size_t i = 0; i < subFeatureFunctions.size(); ++i)
    res += subFeatureFunctions[i]->toString() + T("\n");
  return res;
}

bool CompositeProteinResiduePairFeatures::load(InputStream& istr)
  {return lbcpp::read(istr, subFeatureFunctions);}

void CompositeProteinResiduePairFeatures::save(OutputStream& ostr) const
  {lbcpp::write(ostr, subFeatureFunctions);}

/*
** ProteinUnitResiduePairFeature
*/
class ProteinUnitResiduePairFeature : public ProteinResiduePairFeatures
{
public:
  virtual featureGenerator compute(ProteinPtr protein, size_t firstPosition, size_t secondPosition)
    {featureSense(0);}

  virtual String toString() const
    {return T("unit");}

  virtual String getName() const
    {return T("unit");}
};

ProteinResiduePairFeaturesPtr lbcpp::proteinUnitResiduePairFeature()
  {return new ProteinUnitResiduePairFeature();}

/*
** ProteinPointResiduePairFeatures
*/
class ProteinPointResiduePairFeatures : public ProteinResiduePairFeatures
{
public:
  ProteinPointResiduePairFeatures(ProteinResidueFeaturesPtr pointFeatureGenerator)
    : pointFeatureGenerator(pointFeatureGenerator) {}
  ProteinPointResiduePairFeatures() {}

  virtual featureGenerator compute(ProteinPtr protein, size_t firstPosition, size_t secondPosition)
  {   
    featureCall(0) getFeatures(protein, firstPosition);
    featureCall(1) getFeatures(protein, secondPosition);
  }

  virtual String getName() const
    {return pointFeatureGenerator->getName() + T(" points");}

protected:
  ProteinResidueFeaturesPtr pointFeatureGenerator;
  ProteinPtr currentProtein;
  std::vector<SparseVectorPtr> pointFeatures;

  virtual bool load(InputStream& istr)
    {return ProteinResiduePairFeatures::load(istr) && lbcpp::read(istr, pointFeatureGenerator);}

  virtual void save(OutputStream& ostr) const
    {ProteinResiduePairFeatures::save(ostr); lbcpp::write(ostr, pointFeatureGenerator);}

  FeatureGeneratorPtr getFeatures(ProteinPtr protein, size_t position)
  {
    if (currentProtein != protein)
    {
      pointFeatures.clear();
      pointFeatures.resize(protein->getLength());
      currentProtein = protein;
    }
    if (!pointFeatures[position])
      pointFeatures[position] = pointFeatureGenerator->compute(protein, position)->toSparseVector();
    return pointFeatures[position];
  }
};

ProteinResiduePairFeaturesPtr lbcpp::proteinPointResiduePairFeatures(ProteinResidueFeaturesPtr pointFeatureGenerator)
  {return new ProteinPointResiduePairFeatures(pointFeatureGenerator);}

class SeparationLengthProteinResiduePairFeatures : public ProteinResiduePairFeatures
{
public:
  virtual String toString() const
    {return T("SeparationLength");}

  virtual String getName() const
    {return T("SeparationLength");}

  virtual FeatureGeneratorPtr compute(ProteinPtr protein, size_t firstPosition, size_t secondPosition)
  {
    size_t delta = (size_t)abs((int)firstPosition - (int)secondPosition);
    if (featuresPerLength.size() <= delta)
      featuresPerLength.resize(delta + 1);
    FeatureGeneratorPtr& res = featuresPerLength[delta];
    if (!res)
      res = numberLogFeatures((double)delta, 5)->toSparseVector();
    return res;
  }

private:
  std::vector<FeatureGeneratorPtr> featuresPerLength;
};

ProteinResiduePairFeaturesPtr lbcpp::separationLengthResiduePairFeatures()
  {return new SeparationLengthProteinResiduePairFeatures();}

/*
** ProteinCentralCompositionResiduePairFeatures
*/
class ProteinCentralCompositionResiduePairFeatures : public ProteinResiduePairFeatures
{
public:
  ProteinCentralCompositionResiduePairFeatures(const String& sequenceName)
    : sequenceName(sequenceName) {}

  ProteinCentralCompositionResiduePairFeatures() {}

  virtual String toString() const
    {return T("CentralComposition(") + sequenceName + T(")");}

  virtual String getName() const
    {return sequenceName + T(" central composition");}

  virtual FeatureGeneratorPtr compute(ProteinPtr protein, size_t firstPosition, size_t secondPosition)
  {
    if (firstPosition > secondPosition)
      {size_t tmp = firstPosition; firstPosition = secondPosition; secondPosition = tmp;}

    SequencePtr sequence = protein->getObject(sequenceName).dynamicCast<Sequence>();
    return sequence ? sequence->possiblyOutOfBoundsFrequencyFeatures((int)firstPosition + 1, (int)secondPosition - 1) : FeatureGeneratorPtr();
  }

protected:
  String sequenceName;

  virtual bool load(InputStream& istr)
    {return lbcpp::read(istr, sequenceName);}

  virtual void save(OutputStream& ostr) const
    {lbcpp::write(ostr, sequenceName);}
};

ProteinResiduePairFeaturesPtr lbcpp::proteinCentralCompositionResiduePairFeatures(const String& sequenceName)
  {return new ProteinCentralCompositionResiduePairFeatures(sequenceName);}

/*
** ConjunctionResiduePairFeatures
*/
class ConjunctionResiduePairFeatures : public ProteinResiduePairFeatures
{
public:
  ConjunctionResiduePairFeatures(ResiduePairConjunctionType conjunctionType, ProteinResiduePairFeaturesPtr baseFeatures)
    : conjunctionType(conjunctionType), baseFeatures(baseFeatures) {}

  ConjunctionResiduePairFeatures() {}
 
  String getConjunctionTypeName() const
  {
    switch (conjunctionType)
    {
    case aaResiduePairConjunction:
      return T("aaResiduePair");
    case aaCategoryResiduePairConjunction:
      return T("aaCategoryResiduePair");
    case proteinLengthResiduePairConjunction:
      return T("proteinLengthResiduePair");
    }
    return String::empty;
  }
 
  virtual String getName() const
    {return baseFeatures->getName() + T(" ") + getConjunctionTypeName();}

  virtual featureGenerator compute(ProteinPtr protein, size_t firstPosition, size_t secondPosition)
  {
    LabelSequencePtr aminoAcidSequence = protein->getAminoAcidSequence();
    size_t n = aminoAcidSequence->size();

    switch (conjunctionType)
    {
    case aaResiduePairConjunction:
      featureScope(0)
        featureScope(aminoAcidSequence->getIndex(firstPosition))
          featureCall(aminoAcidSequence->getIndex(secondPosition))
            baseFeatures->compute(protein, firstPosition, secondPosition);
      break;

    case aaCategoryResiduePairConjunction:
      featureScope(1)
        featureScope(AminoAcidDictionary::getCategory((AminoAcidDictionary::Type)aminoAcidSequence->getIndex(firstPosition)))
          featureCall(AminoAcidDictionary::getCategory((AminoAcidDictionary::Type)aminoAcidSequence->getIndex(secondPosition)))
            baseFeatures->compute(protein, firstPosition, secondPosition);
      break;

    case proteinLengthResiduePairConjunction:
      {
        int l;
        if (n <= 50)
          l = 0;
        else if (n <= 100)
          l = 1;
        else if (n <= 150)
          l = 2;
        else if (n > 150)
          l = 3;
        featureScope(2) featureCall(l) baseFeatures->compute(protein, firstPosition, secondPosition);
      }
      break;
    };
  }

protected:
  ResiduePairConjunctionType conjunctionType;
  ProteinResiduePairFeaturesPtr baseFeatures;

  virtual bool load(InputStream& istr)
  {
    int t;
    if (!lbcpp::read(istr, t) || !lbcpp::read(istr, baseFeatures))
      return false;
    conjunctionType = (ResiduePairConjunctionType)t;
    return true;
  }

  virtual void save(OutputStream& ostr) const
    {lbcpp::write(ostr, (int)conjunctionType); lbcpp::write(ostr, baseFeatures);}
};


ProteinResiduePairFeaturesPtr lbcpp::conjunctionResiduePairFeatures(ResiduePairConjunctionType conjunctionType, ProteinResiduePairFeaturesPtr baseFeatures)
  {return new ConjunctionResiduePairFeatures(conjunctionType, baseFeatures);}

/*
** ProteinPositionIndexResidueFeature
*/
class ProteinPositionIndicesResiduePairFeature : public ProteinResiduePairFeatures
{
public:
  virtual featureGenerator compute(ProteinPtr protein, size_t firstPosition, size_t secondPosition)
    {featureScope(firstPosition) featureSense(secondPosition);}

  virtual String getName() const
    {return T("positionIndex");}

  virtual String toString() const
    {return T("positionIndex");}
};

ProteinResiduePairFeaturesPtr lbcpp::proteinPositionIndexResiduePairFeature()
  {return new ProteinPositionIndicesResiduePairFeature();}

/*
** Classes
*/
void declareProteinResiduePairFeaturesClasses()
{
  LBCPP_DECLARE_CLASS(ProteinUnitResiduePairFeature);
  LBCPP_DECLARE_CLASS(CompositeProteinResiduePairFeatures);
  LBCPP_DECLARE_CLASS(ProteinPointResiduePairFeatures);
  LBCPP_DECLARE_CLASS(SeparationLengthProteinResiduePairFeatures);
  LBCPP_DECLARE_CLASS(ProteinCentralCompositionResiduePairFeatures);
}
