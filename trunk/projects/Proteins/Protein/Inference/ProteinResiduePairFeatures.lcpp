/*-----------------------------------------.---------------------------------.
| Filename: ProteinResiduePairFeatures.lcpp| A feature function phi :        |
| Author  : Francis Maes                   | protein x i x j -> features     |
| Started : 27/04/2010 18:53               |                                 |
`------------------------------------------/                                 |
                               |                                             |
                               `--------------------------------------------*/

#include "Protein/Inference/ProteinResiduePairFeatures.h"
#include "InferenceData/CommonFeatureGenerators.h"
using namespace lbcpp;

/*
** CompositeProteinResidueFeatures
*/
featureGenerator CompositeProteinResiduePairFeatures::compute(ProteinPtr protein, size_t firstPosition, size_t secondPosition)
{
  for (size_t i = 0; i < this->getNumSubFeatureFunctions(); ++i)
  {
    ProteinResiduePairFeaturesPtr subFunction = this->getSubFeatureFunction(i);
    FeatureGeneratorPtr fg = subFunction->compute(protein, firstPosition, secondPosition);
    if (fg)
      featureCall(subFunction->getName()) fg;
  }
}

String CompositeProteinResiduePairFeatures::toString() const
{
  String res = T("Composite:\n");
  for (size_t i = 0; i < subFeatureFunctions.size(); ++i)
    res += subFeatureFunctions[i]->toString() + T("\n");
  return res;
}

bool CompositeProteinResiduePairFeatures::load(InputStream& istr)
  {return lbcpp::read(istr, subFeatureFunctions);}

void CompositeProteinResiduePairFeatures::save(OutputStream& ostr) const
  {lbcpp::write(ostr, subFeatureFunctions);}

class ProteinPointResiduePairFeatures : public ProteinResiduePairFeatures
{
public:
  ProteinPointResiduePairFeatures(ProteinResidueFeaturesPtr pointFeatureGenerator)
    : pointFeatureGenerator(pointFeatureGenerator) {}
  ProteinPointResiduePairFeatures() {}

  virtual featureGenerator compute(ProteinPtr protein, size_t firstPosition, size_t secondPosition)
  {
    featureCall(0) pointFeatureGenerator->compute(protein, firstPosition);
    featureCall(0) pointFeatureGenerator->compute(protein, secondPosition);
  }

protected:
  ProteinResidueFeaturesPtr pointFeatureGenerator;

  virtual bool load(InputStream& istr)
    {return ProteinResiduePairFeatures::load(istr) && lbcpp::read(istr, pointFeatureGenerator);}

  virtual void save(OutputStream& ostr) const
    {ProteinResiduePairFeatures::save(ostr); lbcpp::write(ostr, pointFeatureGenerator);}
};

ProteinResiduePairFeaturesPtr lbcpp::proteinPointResiduePairFeatures(ProteinResidueFeaturesPtr pointFeatureGenerator)
  {return new ProteinPointResiduePairFeatures(pointFeatureGenerator);}

class SeparationLengthProteinResiduePairFeatures : public ProteinResiduePairFeatures
{
public:
  virtual FeatureGeneratorPtr compute(ProteinPtr protein, size_t firstPosition, size_t secondPosition)
    {return multiScaleNumberFeatures((double)abs((int)firstPosition - (int)secondPosition));}
};

ProteinResiduePairFeaturesPtr lbcpp::separationLengthResiduePairFeatures()
  {return new SeparationLengthProteinResiduePairFeatures();}

/*
** Classes
*/
void declareProteinResiduePairFeaturesClasses()
{
  LBCPP_DECLARE_CLASS(CompositeProteinResiduePairFeatures);
  LBCPP_DECLARE_CLASS(ProteinPointResiduePairFeatures);
  LBCPP_DECLARE_CLASS(SeparationLengthProteinResiduePairFeatures);
}
