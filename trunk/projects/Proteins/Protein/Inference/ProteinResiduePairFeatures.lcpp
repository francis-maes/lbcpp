/*-----------------------------------------.---------------------------------.
| Filename: ProteinResiduePairFeatures.lcpp| A feature function phi :        |
| Author  : Francis Maes                   | protein x i x j -> features     |
| Started : 27/04/2010 18:53               |                                 |
`------------------------------------------/                                 |
                               |                                             |
                               `--------------------------------------------*/

#include "Protein/Inference/ProteinResiduePairFeatures.h"
#include "InferenceData/CommonFeatureGenerators.h"
using namespace lbcpp;

/*
** CompositeProteinResiduePairFeatures
*/
featureGenerator CompositeProteinResiduePairFeatures::compute(ProteinPtr protein, size_t firstPosition, size_t secondPosition)
{
  for (size_t i = 0; i < this->getNumSubFeatureFunctions(); ++i)
  {
    ProteinResiduePairFeaturesPtr subFunction = this->getSubFeatureFunction(i);
    FeatureGeneratorPtr fg = subFunction->compute(protein, firstPosition, secondPosition);
    if (fg)
      featureCall(subFunction->getName()) fg;
  }
}

String CompositeProteinResiduePairFeatures::toString() const
{
  String res = T("Composite:\n");
  for (size_t i = 0; i < subFeatureFunctions.size(); ++i)
    res += subFeatureFunctions[i]->toString() + T("\n");
  return res;
}

bool CompositeProteinResiduePairFeatures::load(InputStream& istr)
  {return lbcpp::read(istr, subFeatureFunctions);}

void CompositeProteinResiduePairFeatures::save(OutputStream& ostr) const
  {lbcpp::write(ostr, subFeatureFunctions);}

class ProteinPointResiduePairFeatures : public ProteinResiduePairFeatures
{
public:
  ProteinPointResiduePairFeatures(ProteinResidueFeaturesPtr pointFeatureGenerator)
    : pointFeatureGenerator(pointFeatureGenerator) {}
  ProteinPointResiduePairFeatures() {}

  void prepare(ProteinPtr protein)
  {
    if (currentProtein != protein)
    {
      pointFeatures.resize(protein->getLength());
      for (size_t i = 0; i < pointFeatures.size(); ++i)
        pointFeatures[i] = pointFeatureGenerator->compute(protein, i)->toSparseVector();
      currentProtein = protein;
    }
  }

  virtual featureGenerator compute(ProteinPtr protein, size_t firstPosition, size_t secondPosition)
  {
    prepare(protein);
    featureCall(0) pointFeatures[firstPosition];
    featureCall(1) pointFeatures[secondPosition];
  }

protected:
  ProteinResidueFeaturesPtr pointFeatureGenerator;
  ProteinPtr currentProtein;
  std::vector<SparseVectorPtr> pointFeatures;

  virtual bool load(InputStream& istr)
    {return ProteinResiduePairFeatures::load(istr) && lbcpp::read(istr, pointFeatureGenerator);}

  virtual void save(OutputStream& ostr) const
    {ProteinResiduePairFeatures::save(ostr); lbcpp::write(ostr, pointFeatureGenerator);}
};

ProteinResiduePairFeaturesPtr lbcpp::proteinPointResiduePairFeatures(ProteinResidueFeaturesPtr pointFeatureGenerator)
  {return new ProteinPointResiduePairFeatures(pointFeatureGenerator);}

class SeparationLengthProteinResiduePairFeatures : public ProteinResiduePairFeatures
{
public:
  virtual FeatureGeneratorPtr compute(ProteinPtr protein, size_t firstPosition, size_t secondPosition)
  {
    size_t delta = (size_t)abs((int)firstPosition - (int)secondPosition);
    if (featuresPerLength.size() <= delta)
      featuresPerLength.resize(delta + 1);
    FeatureGeneratorPtr& res = featuresPerLength[delta];
    if (!res)
      res = numberLogFeatures((double)delta);
    return res;
  }

private:
  std::vector<FeatureGeneratorPtr> featuresPerLength;
};

ProteinResiduePairFeaturesPtr lbcpp::separationLengthResiduePairFeatures()
  {return new SeparationLengthProteinResiduePairFeatures();}

/*
** ProteinPositionIndexResidueFeature
*/
class ProteinPositionIndicesResiduePairFeature : public ProteinResiduePairFeatures
{
public:
  virtual featureGenerator compute(ProteinPtr protein, size_t firstPosition, size_t secondPosition)
    {featureScope(firstPosition) featureSense(secondPosition);}

  virtual String toString() const
    {return T("positionIndex");}

  virtual String getName() const
    {return T("positionIndex");}
};

ProteinResiduePairFeaturesPtr lbcpp::proteinPositionIndexResiduePairFeature()
  {return new ProteinPositionIndicesResiduePairFeature();}

/*
** Classes
*/
void declareProteinResiduePairFeaturesClasses()
{
  LBCPP_DECLARE_CLASS(CompositeProteinResiduePairFeatures);
  LBCPP_DECLARE_CLASS(ProteinPointResiduePairFeatures);
  LBCPP_DECLARE_CLASS(SeparationLengthProteinResiduePairFeatures);
}
