/*-----------------------------------------.---------------------------------.
| Filename: ProteinGlobalFeatures.lcpp     | A feature function phi :        |
| Author  : Francis Maes                   |    protein -> features          |
| Started : 05/05/2010 16:53               |                                 |
`------------------------------------------/                                 |
                               |                                             |
                               `--------------------------------------------*/

#include "Protein/Inference/ProteinGlobalFeatures.h"
#include "Protein/Inference/ProteinResidueFeatures.h"
#include "Protein/Inference/ProteinResiduePairFeatures.h"
#include "InferenceData/CommonFeatureGenerators.h"
using namespace lbcpp;

/*
** LengthProteinResidueFeatures
*/
class LengthProteinGlobalFeatures : public ProteinGlobalFeatures
{
public:
  LengthProteinGlobalFeatures(size_t numIntervalsPerLog10)
    : numIntervalsPerLog10(numIntervalsPerLog10) {}
  LengthProteinGlobalFeatures() {}

  virtual FeatureGeneratorPtr compute(ProteinPtr protein)
    {return numberLogFeatures((double)protein->getLength(), numIntervalsPerLog10);}

  virtual String toString() const
    {return T("length");}

  virtual String getName() const
    {return T("length");}

protected:
  size_t numIntervalsPerLog10;

  virtual bool load(InputStream& istr)
    {return lbcpp::read(istr, numIntervalsPerLog10);}

  virtual void save(OutputStream& ostr) const
    {lbcpp::write(ostr, numIntervalsPerLog10);}
};

ProteinGlobalFeaturesPtr lbcpp::proteinLengthFeatures(size_t numIntervalsPerLog10)
  {return new LengthProteinGlobalFeatures(numIntervalsPerLog10);}

/*
** ProteinGlobalCompositionFeatures
*/
class ProteinGlobalCompositionFeatures : public ProteinGlobalFeatures
{
public:
  ProteinGlobalCompositionFeatures(const String& sequenceName) : sequenceName(sequenceName) {}
  ProteinGlobalCompositionFeatures() {}

  virtual featureGenerator compute(ProteinPtr protein)
  {
    SequencePtr sequence = protein->getObject(sequenceName);
    if (sequence)
      featureCall((size_t)0, 1.0 / (double)sequence->size()) sequence->sumFeatures(0, sequence->size());
  }

  virtual String toString() const
    {return T("globalComposition(") + sequenceName + T(")");}

  virtual String getName() const
    {return T("globalComposition(") + sequenceName + T(")");}

private:
  String sequenceName;

  virtual bool load(InputStream& istr)
    {return lbcpp::read(istr, sequenceName);}

  virtual void save(OutputStream& ostr) const
    {lbcpp::write(ostr, sequenceName);}
};

ProteinGlobalFeaturesPtr lbcpp::proteinGlobalCompositionFeatures(const String& sequenceName)
  {return new ProteinGlobalCompositionFeatures(sequenceName);}

/*
** ProteinGlobalToResidueFeatures
*/
class ProteinGlobalToResidueFeatures : public ProteinResidueFeatures
{
public:
  ProteinGlobalToResidueFeatures(ProteinGlobalFeaturesPtr globalFeatures)
    : globalFeatures(globalFeatures) {}

  ProteinGlobalToResidueFeatures() {}

  virtual String getName() const
    {return globalFeatures->getName();}

  virtual String toString() const
    {return globalFeatures->toString();}

  virtual FeatureGeneratorPtr compute(ProteinPtr protein, size_t position)
  {
    if (currentProtein != protein)
    {
      currentProtein = protein;
      currentProteinFeatures = globalFeatures->compute(protein)->toSparseVector();
    }
    return currentProteinFeatures;
  }

protected:
  ProteinPtr currentProtein;
  SparseVectorPtr currentProteinFeatures;
  ProteinGlobalFeaturesPtr globalFeatures;

  virtual bool load(InputStream& istr)
    {return lbcpp::read(istr, globalFeatures);}

  virtual void save(OutputStream& ostr) const
    {lbcpp::write(ostr, globalFeatures);}
};

ProteinResidueFeaturesPtr lbcpp::proteinGlobalToResidueFeatures(ProteinGlobalFeaturesPtr globalFeatures)
  {return new ProteinGlobalToResidueFeatures(globalFeatures);}

/*
** ProteinGlobalToResiduePairFeatures
*/
class ProteinGlobalToResiduePairFeatures : public ProteinResiduePairFeatures
{
public:
  ProteinGlobalToResiduePairFeatures(ProteinGlobalFeaturesPtr globalFeatures)
    : globalFeatures(globalFeatures) {}

  ProteinGlobalToResiduePairFeatures() {}

  virtual String getName() const
    {return globalFeatures->getName();}

  virtual String toString() const
    {return globalFeatures->toString();}

  virtual FeatureGeneratorPtr compute(ProteinPtr protein, size_t, size_t)
  {
    if (currentProtein != protein)
    {
      currentProtein = protein;
      currentProteinFeatures = globalFeatures->compute(protein)->toSparseVector();
    }
    return currentProteinFeatures;
  }

protected:
  ProteinPtr currentProtein;
  SparseVectorPtr currentProteinFeatures;
  ProteinGlobalFeaturesPtr globalFeatures;

  virtual bool load(InputStream& istr)
    {return lbcpp::read(istr, globalFeatures);}

  virtual void save(OutputStream& ostr) const
    {lbcpp::write(ostr, globalFeatures);}
};

ProteinResiduePairFeaturesPtr lbcpp::proteinGlobalToResiduePairFeatures(ProteinGlobalFeaturesPtr globalFeatures)
  {return new ProteinGlobalToResiduePairFeatures(globalFeatures);}

/*
** Classes
*/
void declareProteinGlobalFeaturesClasses()
{
  LBCPP_DECLARE_CLASS(LengthProteinGlobalFeatures);
  LBCPP_DECLARE_CLASS(ProteinGlobalCompositionFeatures);
  LBCPP_DECLARE_CLASS(ProteinGlobalToResidueFeatures);
  LBCPP_DECLARE_CLASS(ProteinGlobalToResiduePairFeatures);
}
