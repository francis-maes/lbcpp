/*-----------------------------------------.---------------------------------.
| Filename: ProteinResidueFeatures.lcpp    | A feature function phi :        |
| Author  : Francis Maes                   | protein x position -> features  |
| Started : 22/04/2010 22:10               |                                 |
`------------------------------------------/                                 |
                               |                                             |
                               `--------------------------------------------*/

#include "Protein/Inference/ProteinResidueFeatures.h"
using namespace lbcpp;


/*
** CompositeProteinResidueFeatures
*/
featureGenerator CompositeProteinResidueFeatures::compute(ProteinPtr protein, size_t position)
{
  for (size_t i = 0; i < this->getNumSubFeatureFunctions(); ++i)
  {
    ProteinResidueFeaturesPtr subFunction = this->getSubFeatureFunction(i);
    FeatureGeneratorPtr fg = subFunction->compute(protein, position);
    if (fg)
      featureCall(subFunction->getName()) fg;
  }
}

String CompositeProteinResidueFeatures::toString() const
{
  String res = T("Composite:\n");
  for (size_t i = 0; i < subFeatureFunctions.size(); ++i)
    res += subFeatureFunctions[i]->toString() + T("\n");
  return res;
}

bool CompositeProteinResidueFeatures::load(InputStream& istr)
  {return lbcpp::read(istr, subFeatureFunctions);}

void CompositeProteinResidueFeatures::save(OutputStream& ostr) const
  {lbcpp::write(ostr, subFeatureFunctions);}

/*
** SequenceWindowProteinResidueFeatures
*/
class SequenceWindowProteinResidueFeatures : public ProteinResidueFeatures
{
public:
  SequenceWindowProteinResidueFeatures(const String& sequenceName, size_t numPrevs, size_t numNexts, bool includeCurrent)
    : sequenceName(sequenceName), numPrevs(numPrevs), numNexts(numNexts), includeCurrent(includeCurrent) {}
  SequenceWindowProteinResidueFeatures() {}

  virtual String toString() const
    {return sequenceName + T("[-") + lbcpp::toString(numPrevs) + T(",") + lbcpp::toString(numNexts) + T("]");}

  virtual String getName() const
    {return sequenceName + T(" window");}

  virtual FeatureGeneratorPtr compute(ProteinPtr protein, size_t position)
  {
    SequencePtr sequence = protein->getObject(sequenceName).dynamicCast<Sequence>();
    if (!sequence)
      return FeatureGeneratorPtr();
    return sequence->windowFeatures(position, numPrevs, numNexts, includeCurrent);
  }

protected:
  String sequenceName;
  size_t numPrevs;
  size_t numNexts;
  bool includeCurrent;

  virtual bool load(InputStream& istr)
    {return lbcpp::read(istr, sequenceName) && lbcpp::read(istr, numPrevs)
      && lbcpp::read(istr, numNexts) && lbcpp::read(istr, includeCurrent);}

  virtual void save(OutputStream& ostr) const
    {lbcpp::write(ostr, sequenceName); lbcpp::write(ostr, numPrevs); lbcpp::write(ostr, numNexts); lbcpp::write(ostr, includeCurrent);}
};

ProteinResidueFeaturesPtr lbcpp::proteinSequenceWindowFeatures(const String& sequenceName, size_t numPrevs, size_t numNexts, bool includeCurrent)
  {return ProteinResidueFeaturesPtr(new SequenceWindowProteinResidueFeatures(sequenceName, numPrevs, numNexts, includeCurrent));}

/*
** Misc
*/
#include "Protein/Inference/PositionSpecificScoringMatrixInferenceStep.h"

featureGenerator PSSMRowPredictionInferenceStep::getInputFeatures(ObjectPtr input, size_t scoreIndex) const
{
  FeatureGeneratorPtr commonFeatures = input.dynamicCast<FeatureGenerator>();
  jassert(commonFeatures);
  featureSense(scoreIndex);
  featureCall(scoreIndex) commonFeatures;
}

/*
** Classes
*/
void declareProteinResidueFeaturesClasses()
{
  LBCPP_DECLARE_CLASS(SequenceWindowProteinResidueFeatures);
  LBCPP_DECLARE_CLASS(CompositeProteinResidueFeatures);
}
