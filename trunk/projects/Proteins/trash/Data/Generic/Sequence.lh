/*-----------------------------------------.---------------------------------.
| Filename: Sequence.lh                    | Sequence base class             |
| Author  : Francis Maes                   |                                 |
| Started : 26/03/2010 18:05               |                                 |
`------------------------------------------/                                 |
                               |                                             |
                               `--------------------------------------------*/

#include "VariableSet.lh"

namespace lbcpp
{

class Sequence : public VariableSet
{
public:
  /*
  ** ObjectContainer
  */
  virtual void resize(size_t newSize)
    {setLength(newSize, true);}


  /*
  ** Sequence
  */
  virtual size_t getLength() const = 0;
  virtual void setLength(size_t newLength, bool clearPreviousContent = true) = 0;
  
  virtual String elementToString(size_t position) const = 0;
  virtual FeatureGeneratorPtr elementFeatures(size_t position) const = 0;
  
  featureGenerator frequencyFeatures(int startPosition, int endPosition) const
  {
    jassert(startPosition <= endPosition);
    if (startPosition == endPosition)
      return;
    //int count = endPosition - startPosition;
    //double invCount = 1.0 / (double)count;
    for (int i = startPosition; i <= endPosition; ++i)
      featureCall(0)
        possiblyOutOfBoundsElementFeatures(i);
  }

  featureGenerator symetricFrequencyFeatures(size_t position, size_t size, bool includeCurrent) const
  {
    int start = (int)position - (int)size;
    int end = (int)position;
    if (includeCurrent)
      ++end;
    featureCall("before") frequencyFeatures(start, end);
    start = (int)position;
    if (!includeCurrent)
      ++start;
    end = (int)(position + size + 1);
    featureCall("after") frequencyFeatures(start, end);
  }

  featureGenerator possiblyOutOfBoundsElementFeatures(int position) const
  {
    if (position < 0)
      featureSense("before");
    else if (position < (int)getLength())
      featureCall("in") elementFeatures((size_t)position);
    else
      featureSense("after");
  }

  featureGenerator windowFeatures(size_t position, size_t numPrevs, size_t numNexts, bool includeCurrent) const
  {
    featureScope("previous")
    {
      for (size_t i = 0; i < numPrevs; ++i)
        featureCall(i)
          possiblyOutOfBoundsElementFeatures((int)position - (int)i - 1);
    }

    if (includeCurrent)
      featureCall("current")
        elementFeatures(position);

    featureScope("nexts")
    {
      for (size_t i = 0; i < numNexts; ++i)
        featureCall(i)
          possiblyOutOfBoundsElementFeatures((int)(position + i + 1));
    }
  }

  /*
  ** Object
  */
  virtual String toString() const
  {
    size_t l = getLength();
    String res;
    for (size_t i = 0; i < l; ++i)
      res += elementToString(i);
    return res;
  }
};

typedef ReferenceCountedObjectPtr<Sequence> SequencePtr;

}; /* namespace lbcpp */
