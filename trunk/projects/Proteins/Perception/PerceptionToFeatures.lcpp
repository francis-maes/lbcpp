/*-----------------------------------------.---------------------------------.
| Filename: PerceptionToFeatures.lcpp      | Transform a Perception into a   |
| Author  : Francis Maes                   |   Feature Generator             |
| Started : 14/07/2010 19:06               |                                 |
`------------------------------------------/                                 |
                               |                                             |
                               `--------------------------------------------*/

#include "Perception/PerceptionToFeatures.h"
#include "Perception/CommonFeatureGenerators.h"
namespace lbcpp
{

bool canSubVariableBePruned(const Variable& subVariable)
{
  if (subVariable.getType()->inheritsFrom(probabilityType()))
    return subVariable.getDouble() == 0.0;
  return false;
}

static std::vector<FeatureGeneratorPtr> integerFeatures;

FeatureGeneratorPtr computeIntegerFeatures(int value)
  {return numberLogFeatures((double)value);}

FeatureGeneratorPtr getIntegerFeatures(int value)
{
  if (value >= 0 && value < (int)integerFeatures.size())
    return integerFeatures[value];
  if (value >= 0 && (value < juce::jmax(2 * integerFeatures.size(), 1000)))
  {
    if (value >= (int)integerFeatures.size())
      integerFeatures.resize(value + 1);
    return (integerFeatures[value] = computeIntegerFeatures(value));
  }
  else
    return computeIntegerFeatures(value);
}

featureGenerator variableFeatures(Variable variable)
{
  if (variable.isNil())
  {
    featureSense(0);
    return;
  }
  else if (variable.isMissingValue())
  {
    featureSense(2);
    return;
  }
  
  TypePtr type = variable.getType();

  if (type == probabilityType())
  {
    featureSense(2, variable.getDouble());
    return;
  }

  if (variable.isEnumeration())
  {
    EnumerationPtr enumeration = type.dynamicCast<Enumeration>();
    jassert(enumeration);
    featureSense(2 + variable.getInteger());
    return;
  }

  if (type->inheritsFrom(objectClass()))
  {
    ObjectPtr object = variable.getObject();
    size_t n = object->getNumVariables(); 
    for (size_t i = 0; i < n; ++i)
    {
      Variable subVariable = object->getVariable(i);
      if (!canSubVariableBePruned(subVariable))
        featureCall(i) variableFeatures(subVariable);
    }
    return;
  }

  if (variable.isInteger())
  {
    featureCall(0) getIntegerFeatures(variable.getInteger());
    return;
  }

  if (variable.isDouble())
  {
    featureCall(0) numberLogFeatures(variable.getDouble());
    return;
  }

  jassert(false); // conversion of this type to features is not implemented
}

featureGenerator topLevelVariableFeatures(Variable variable)
{
  featureSense("unit");
  featureCall("variable") variableFeatures(variable);
}

}; /* namespace lbcpp */
