<?xml version="1.0" encoding="UTF-8"?>

<library name="ProteinRosetta" directory="Rosetta">

  <import name="ProteinRosettaMover"/>
  <import name="ProteinRosettaOptimizer"/>
  <import name="ProteinRosettaSampler"/>
  
  <class name="ProteinMover" base="Object" abstract="yes">
    <variable type="String" name="moverName" shortName="n" description="Name of the mover"/>
  </class>
  
  <class name="RigidBodyMover" base="ProteinMover" abstract="yes">
  </class>
  
  <class name="RosettaTest" base="WorkUnit">
    <variable type="Integer" name="arg" shortName="a" description="An input argument to RosettaTest"/>
    <variable type="String" name="proteinsDir" shortName="d" description="Directory of proteins to load"/>
  </class>

  <class name="ProteinFeaturesGeneratorWorkUnit" base="WorkUnit">
    <variable type="String" name="proteinsDirectory" shortName="i" description="Directory of input proteins to load"/>
    <variable type="String" name="resultsDirectory" shortName="o" description="Directory where to store the outputs"/>
    <variable type="Integer" name="timesFeatureGeneration" shortName="t" description="Number of generate output files for one protein. So one file generated every maxNumberIterations/timesFeatureGeneration."/>
    <variable type="Integer" name="maxNumberIterations" shortName="m" description="Max number of desired iterations for the optimization"/>
  </class>
  
  <class name="ProteinOptimizerWorkUnit" base="CompositeWorkUnit">
  </class>
  
  <class name="ProteinOptimizer" base="Object" abstract="yes">
  </class>
  
  <class name="XmlToPDBConverterWorkUnit" base="WorkUnit">
    <variable type="String" name="proteinsDirectory" shortName="i" description="Directory of input proteins to load"/>
    <variable type="String" name="resultsDirectory" shortName="o" description="Directory where to store the outputs"/>
  </class>
  
  <class name="Sampler" base="Object" abstract="yes">
  </class>
  
  <class name="ContinuousSampler" base="Sampler" abstract="yes">
  </class>

  <class name="DiscreteSampler" base="Sampler" abstract="yes">
  </class>

  <class name="SequentialSampler" base="Sampler" abstract="yes">
  </class>

  <class name="CompositeSampler" base="Sampler" abstract="yes">
  </class>  
  
</library>
