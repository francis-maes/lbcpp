/*-----------------------------------------.---------------------------------.
| Filename: LabelSequence.lh               | Label Sequence                  |
| Author  : Francis Maes                   |                                 |
| Started : 26/03/2010 12:32               |                                 |
`------------------------------------------/                                 |
                               |                                             |
                               `--------------------------------------------*/

#include "Sequence.lh"

namespace lbcpp
{

class LabelSequence : public Sequence
{
public:
  /*
  ** InterdependantVariableSet
  */
  virtual VariableType getVariablesType() const
    {return discreteVariable;}

  virtual size_t getNumVariables() const
    {return getLength();}

  virtual bool getVariable(size_t index, size_t& result) const
  {
    int label = getLabel(index);
    if (label < 0)
      return false;
    result = (size_t)label;
    return true;
  }

  virtual void setVariable(size_t index, size_t value)
    {setLabel(index, (int)value);}

  /*
  ** Sequence
  */
  virtual size_t getLength() const
    {return sequence.size();}

  virtual void setLength(size_t newLength, bool clearPreviousContent = true)
    {sequence.resize(newLength, (Label)255);}

  virtual String elementToString(size_t position) const
    {return String(getLabel(position));}

  /*
  ** LabelSequence
  */
  int getLabel(size_t position) const
  {
    jassert(position < sequence.size());
    Label label = sequence[position];
    return label == 255 ? -1 : (int)label;
  }
  
  void setLabel(size_t position, int value)
  {
    jassert(value >= -1 && value < 255);
    jassert(position < sequence.size());
    sequence[position] = value >= 0 ? (Label)value : (Label)255;
  }

protected:
  virtual bool load(InputStream& istr)
    {return lbcpp::read(istr, sequence);}
  
  virtual void save(OutputStream& ostr) const
    {lbcpp::write(ostr, sequence);}

private:
  // Note: most sequence labeling tasks involve less than 255 labels,
  //  so we use a single byte per element in order to spare memory
  // Labels: 0..254
  // Special value for unlabeled elements: 255
  typedef unsigned char Label;

  std::vector<Label> sequence;
};

}; /* namespace lbcpp */
