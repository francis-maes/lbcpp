/*-----------------------------------------.---------------------------------.
| Filename: ScoreSequence.lh               | Score Sequence                  |
| Author  : Francis Maes                   |                                 |
| Started : 26/03/2010 18:51               |                                 |
`------------------------------------------/                                 |
                               |                                             |
                               `--------------------------------------------*/

#include "Sequence.lh"

namespace lbcpp
{

class ScoreSequence : public Sequence
{
public:
  /*
  ** InterdependantVariableSet
  */
  virtual VariableType getVariablesType() const
    {return numericVariable;}

  virtual size_t getNumVariables() const
    {return getLength();}

  virtual bool getVariable(size_t index, double& result) const
  {
    result = getScore(index);
    return true;
  }

  virtual void setVariable(size_t index, double value)
    {setScore(index, value);}

  virtual featureGenerator computeVariableFeatures(size_t index) const
    {featureSense ("score", getScore(index));}

  /*
  ** Sequence
  */
  virtual size_t getLength() const
    {return sequence.size();}

  virtual void setLength(size_t newLength, bool clearPreviousContent = true)
    {sequence.resize(newLength, 0.0);}

  virtual String elementToString(size_t position) const
    {return String(getScore(position));}

  virtual FeatureGeneratorPtr elementFeatures(size_t position) const
    {return computeVariableFeatures(position);}

  virtual ObjectPtr clone() const
  {
    ReferenceCountedObjectPtr<ScoreSequence> res = Object::createAndCast<ScoreSequence>(getClassName());
    res->sequence = sequence;
    return res;
  }

  /*
  ** ScoreSequence
  */
  double getScore(size_t position) const
    {jassert(position < sequence.size()); return sequence[position];}
  
  void setScore(size_t position, double value)
    {jassert(position < sequence.size()); sequence[position] = value;}

protected:
  virtual bool load(InputStream& istr)
    {return lbcpp::read(istr, sequence);}
  
  virtual void save(OutputStream& ostr) const
    {lbcpp::write(ostr, sequence);}

private:
  std::vector<double> sequence;
};

typedef ReferenceCountedObjectPtr<ScoreSequence> ScoreSequencePtr;

}; /* namespace lbcpp */
