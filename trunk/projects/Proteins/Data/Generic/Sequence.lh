/*-----------------------------------------.---------------------------------.
| Filename: Sequence.lh                    | Sequence base class             |
| Author  : Francis Maes                   |                                 |
| Started : 26/03/2010 18:05               |                                 |
`------------------------------------------/                                 |
                               |                                             |
                               `--------------------------------------------*/

namespace lbcpp
{

class InterdependantVariableSet : public Object
{
public:
  enum VariableType
  {
    discreteVariable,
    numericVariable
  };

  virtual VariableType getVariablesType() const = 0;

  virtual size_t getNumVariables() const = 0;

  virtual bool getVariable(size_t index, size_t& result) const
    {jassert(false); return false;}

  virtual bool getVariable(size_t index, double& result) const
    {jassert(false); return false;}

  virtual void setVariable(size_t index, size_t value) const
    {jassert(false);}

  virtual void setVariable(size_t index, double value) const
    {jassert(false);}
};

typedef ReferenceCountedObjectPtr<InterdependantVariableSet> InterdependantVariableSetPtr;

class Sequence : public InterdependantVariableSet
{
public:
  /*
  ** Sequence
  */
  virtual size_t getLength() const = 0;
  virtual void setLength(size_t newLength, bool clearPreviousContent = true) = 0;
  
  virtual String elementToString(size_t position) const = 0;

  //virtual featureGenerator computeFeatures(size_t position) const = 0;

  /*
  ** Object
  */
  virtual String toString() const
  {
    size_t l = getLength();
    String res;
    for (size_t i = 0; i < l; ++i)
      res += elementToString(i);
    return res;
  }
};

}; /* namespace lbcpp */
