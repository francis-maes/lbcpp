/*-----------------------------------------.---------------------------------.
| Filename: Sequence.lh                    | Sequence base class             |
| Author  : Francis Maes                   |                                 |
| Started : 26/03/2010 18:05               |                                 |
`------------------------------------------/                                 |
                               |                                             |
                               `--------------------------------------------*/

#include "VariableSet.lh"

namespace lbcpp
{

class Sequence : public VariableSet
{
public:
  /*
  ** Sequence
  */
  virtual size_t getLength() const = 0;
  virtual void setLength(size_t newLength, bool clearPreviousContent = true) = 0;
  
  virtual String elementToString(size_t position) const = 0;
  virtual FeatureGeneratorPtr elementFeatures(size_t position) const = 0;
  
  featureGenerator windowFeatures(size_t position, size_t numPrevs, size_t numNexts, bool includeCurrent) const
  {
    featureScope("previous")
    {
      for (size_t i = 0; i < numPrevs; ++i)
      {
        int index = (int)position - (int)i - 1;
        if (index >= 0)
          featureCall(i) elementFeatures((size_t)index);
        //else
        //  featureScope(i) featureSense("N/A");
      }
    }
    if (includeCurrent)
      featureCall("current") elementFeatures(position);
    featureScope("nexts")
    {
      for (size_t i = 0; i < numNexts; ++i)
      {
        size_t index = position + i + 1;
        if (index < this->getLength())
          featureCall(i) elementFeatures(index);
        //else
        //  featureScope(i) featureSense("N/A");
      }
    }
  }

  /*
  ** Object
  */
  virtual String toString() const
  {
    size_t l = getLength();
    String res;
    for (size_t i = 0; i < l; ++i)
      res += elementToString(i);
    return res;
  }
};

typedef ReferenceCountedObjectPtr<Sequence> SequencePtr;

}; /* namespace lbcpp */
