/*-----------------------------------------.---------------------------------.
| Filename: Protein.lh                     | Protein                         |
| Author  : Francis Maes                   |                                 |
| Started : 27/03/2010 12:23               |                                 |
`------------------------------------------/                                 |
                               |                                             |
                               `--------------------------------------------*/

#include "AminoAcidSequence.lh"
#include "PositionSpecificScoringMatrix.lh"
#include "SecondaryStructureSequence.lh"
#include "SolventAccesibilitySequence.lh"

namespace lbcpp
{

class Protein : public StringToObjectMap
{
public:
  Protein(const String& name)
    : name(name) {}
  Protein() {}

  virtual String toString() const
    {return T("Protein ") + name + T(":\n") + StringToObjectMap::toString();}

  virtual String getName() const
    {return name;}

  void setAminoAcidSequence(AminoAcidSequencePtr sequence)
    {setObject(T("AminoAcidSequence"), sequence);}

  AminoAcidSequencePtr getAminoAcidSequence() const
    {return getObject(T("AminoAcidSequence"));}

  void setPositionSpecificScoringMatrix(PositionSpecificScoringMatrixPtr pssm)
    {setObject(T("PositionSpecificScoringMatrix"), pssm);}

  PositionSpecificScoringMatrixPtr getPositionSpecificScoringMatrix() const
    {return getObject(T("PositionSpecificScoringMatrix"));}

  void setSolventAccessibilitySequence(SolventAccessibilitySequencePtr solventAccessibility)
    {setObject(T("SolventAccessibilitySequence"), solventAccessibility);}

  void setSecondaryStructureSequence(SecondaryStructureSequencePtr sequence)
    {setObject(sequence->hasEightStates() ? T("EightStateSecondaryStructure") : T("ThreeStateSecondaryStructure"), sequence);}

  SecondaryStructureSequencePtr getSecondaryStructureSequence(bool heightState = false) const
    {return getObject(heightState ? T("EightStateSecondaryStructure") : T("ThreeStateSecondaryStructure"));}

protected:
  virtual bool load(InputStream& istr)
    {return lbcpp::read(istr, name) && StringToObjectMap::load(istr);}

  virtual void save(OutputStream& ostr) const
    {lbcpp::write(ostr, name); StringToObjectMap::save(ostr);}

private:
  String name;
};

typedef ReferenceCountedObjectPtr<Protein> ProteinPtr;

class SecondaryStructureVariableSetExample : public VariableSetExample
{
public:
  SecondaryStructureVariableSetExample(ProteinPtr protein)
    : aminoAcidSequence(protein->getAminoAcidSequence()),
      positionSpecificScores(protein->getPositionSpecificScoringMatrix()),
      secondaryStructure(protein->getSecondaryStructureSequence(false))
    {}
  
  virtual VariableSetPtr getTargetVariables() const
    {return secondaryStructure;}

  virtual VariableSetPtr createInitialPrediction() const
  {
    LabelSequencePtr res = new SecondaryStructureSequence(false);
    res->setLength(secondaryStructure->getLength());
    return res;
  }
    
  virtual featureGenerator getVariableFeatures(size_t variableIndex, VariableSetPtr prediction) const
  {
    featureCall("aminoAcidWindow") aminoAcidSequence->windowFeatures(variableIndex, 7, 7, true);
    featureCall("pssmWindow") positionSpecificScores->windowFeatures(variableIndex, 7, 7, true);
    if (prediction)
    {
      LabelSequencePtr predictedSecondaryStructure = prediction.dynamicCast<LabelSequence>();
      jassert(predictedSecondaryStructure);
      featureCall("prediction") predictedSecondaryStructure->windowFeatures(variableIndex, 2, 2, false);
    }
  }
    
private:
  LabelSequencePtr aminoAcidSequence;
  ScoreVectorSequencePtr positionSpecificScores;
  LabelSequencePtr secondaryStructure;
};
  
}; /* namespace lbcpp */
