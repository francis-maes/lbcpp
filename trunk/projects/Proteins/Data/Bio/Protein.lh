/*-----------------------------------------.---------------------------------.
| Filename: Protein.lh                     | Protein                         |
| Author  : Francis Maes                   |                                 |
| Started : 27/03/2010 12:23               |                                 |
`------------------------------------------/                                 |
                               |                                             |
                               `--------------------------------------------*/

#include "AminoAcidSequence.lh"
#include "PositionSpecificScoringMatrix.lh"
#include "SecondaryStructureSequence.lh"
#include "SolventAccesibilitySequence.lh"

namespace lbcpp
{

class Protein : public StringToObjectMap
{
public:
  Protein(const String& name)
    : name(name) {}
  Protein() {}

  virtual String toString() const
    {return T("Protein ") + name + T(":\n") + StringToObjectMap::toString();}

  virtual String getName() const
    {return name;}

  void setAminoAcidSequence(AminoAcidSequencePtr sequence)
    {setObject(T("AminoAcidSequence"), sequence);}

  AminoAcidSequencePtr getAminoAcidSequence() const
    {return getObject(T("AminoAcidSequence"));}

  void setPositionSpecificScoringMatrix(PositionSpecificScoringMatrixPtr pssm)
    {setObject(T("PositionSpecificScoringMatrix"), pssm);}

  PositionSpecificScoringMatrixPtr getPositionSpecificScoringMatrix() const
    {return getObject(T("PositionSpecificScoringMatrix"));}

  void setSolventAccessibilitySequence(SolventAccessibilitySequencePtr solventAccessibility)
    {setObject(T("SolventAccessibilitySequence"), solventAccessibility);}

  void setSecondaryStructureSequence(SecondaryStructureSequencePtr sequence)
    {setObject(sequence->hasEightStates() ? T("EightStateSecondaryStructure") : T("ThreeStateSecondaryStructure"), sequence);}

  SecondaryStructureSequencePtr getSecondaryStructureSequence(bool heightState = false) const
    {return getObject(heightState ? T("EightStateSecondaryStructure") : T("ThreeStateSecondaryStructure"));}

protected:
  virtual bool load(InputStream& istr)
    {return lbcpp::read(istr, name) && StringToObjectMap::load(istr);}

  virtual void save(OutputStream& ostr) const
    {lbcpp::write(ostr, name); StringToObjectMap::save(ostr);}

private:
  String name;
};

typedef ReferenceCountedObjectPtr<Protein> ProteinPtr;

class SecondaryStructureVariableSetExample : public VariableSetExample
{
public:
  SecondaryStructureVariableSetExample(ProteinPtr protein)
    : aminoAcidSequence(protein->getAminoAcidSequence()),
      positionSpecificScores(protein->getPositionSpecificScoringMatrix()),
      secondaryStructure(protein->getSecondaryStructureSequence(false))
    {}
  
  virtual VariableSetPtr getTargetVariables() const
    {return secondaryStructure;}

  virtual VariableSetPtr createInitialPrediction() const
  {
    LabelSequencePtr res = new SecondaryStructureSequence(false);
    res->setLength(secondaryStructure->getLength());
    return res;
  }
    
    
  static featureGenerator numberLogFeaturesBase(const String& nameMin, const String& nameMax, double valMin, double valMax, double value, double weight)
  {
    jassert(value >= valMin && value <= valMax);
    double delta = valMax - valMin;
    jassert(delta > 0);
    featureSense (nameMin, (1 - ((value - valMin) / delta)) * weight);
    featureSense (nameMax, (1 - ((valMax - value) / delta)) * weight);
  }

  static featureGenerator numberLogFeatures(double positiveNumber, double weight)
  {
    static const double clog2 = log10(2.0);
    static const double clog5 = log10(5.0);
    double l = log10(positiveNumber);
    double fl = floor(l);
    double frac = l - fl;
    double base = pow(10.0, fl);

    if (frac < clog2)
      featureCall inline numberLogFeaturesBase(lbcpp::toString(base), lbcpp::toString(2 * base), 0, clog2, frac, weight);
    else if (frac < clog5)
      featureCall inline numberLogFeaturesBase(lbcpp::toString(2 * base), lbcpp::toString(5 * base), clog2, clog5, frac, weight);
    else
      featureCall inline numberLogFeaturesBase(lbcpp::toString(5 * base), lbcpp::toString(10 * base), clog5, 1.0, frac, weight);
  }

  static featureGenerator numberFeatures(double value, double weight)
  {
    if (value > 0)
      featureCall("positive") inline numberLogFeatures(value, weight);
    else if (value < 0)
      featureCall("negative") inline numberLogFeatures(-value, weight);
    else
      featureSense("nullValue", weight);
  }

  static featureGenerator percentFeatures(double percent, double weight)
  {
    jassert(percent >= 0.0 && percent <= 1.0);
    enum {valueCount = 10};
    double p = percent * valueCount;
    featureSense((size_t)p, (p - (int)p) * weight);
  }

  featureGenerator posAndLengthFeatures(size_t variableIndex, double weight) const
  {
    double length = (double)aminoAcidSequence->getNumVariables();
    featureCall("length") numberFeatures(length, weight);
    featureCall("position") numberFeatures((double)variableIndex / length, weight);
  }

  virtual featureGenerator getVariableFeatures(size_t variableIndex, VariableSetPtr prediction) const
  {
    featureCall inline posAndLengthFeatures(variableIndex, 1.0);

    // conjunctions with current amino acid
    featureCall(T("A") + String((int)aminoAcidSequence->getLabel(variableIndex))) inline posAndLengthFeatures(variableIndex, 1.0);

    /* conjunctions with current pssm entries
    size_t n = positionSpecificScores->getNumScores();
    for (size_t i = 0; i < n; ++i)
    {
      double score = positionSpecificScores->getScore(variableIndex, i);
      if (score)
        featureCall(T("SS") + String((int)i)) inline posAndLengthFeatures(variableIndex, score);
    }*/
    
    featureCall("a") aminoAcidSequence->windowFeatures(variableIndex, 7, 7, true);
    featureCall("p") positionSpecificScores->windowFeatures(variableIndex, 7, 7, true);
    if (prediction)
    {
      LabelSequencePtr predictedSecondaryStructure = prediction.dynamicCast<LabelSequence>();
      jassert(predictedSecondaryStructure);
      featureCall("pr") predictedSecondaryStructure->windowFeatures(variableIndex, 7, 7, false);
    }
  }
    
private:
  LabelSequencePtr aminoAcidSequence;
  ScoreVectorSequencePtr positionSpecificScores;
  LabelSequencePtr secondaryStructure;
};
  
}; /* namespace lbcpp */
