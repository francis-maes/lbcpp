<?xml version="1.0" encoding="UTF-8"?>

<library name="MCGP" dynamic="yes">

  <class name="SearchNode" base="Object">
    <variable type="SearchState" name="state"/>
    <variable type="ObjectVector[SearchNode]" name="successors"/>
    <variable type="DiscreteDomain" name="actions"/>
    <variable type="Boolean" name="fullyVisited"/>
  </class>

  <class name="PrunedSearchState" base="SearchState">
    <variable type="SearchNode" name="node"/>
  </class>
  
  <class name="RepeatSolver" base="Solver">
    <variable type="Solver" name="solver"/>
  </class>
  
  <class name="ExpressionToSearchProblem" base="DecoratorProblem"/>

  <!-- Expression Problems -->
  <class name="ExpressionProblem" base="Problem" abstract="yes"/>
  
  <!-- Symbolic Regression Problems -->
  <class name="SymbolicRegressionProblem" base="ExpressionProblem" abstract="yes"/>
  <class name="KozaSymbolicRegressionProblem" base="SymbolicRegressionProblem" abstract="yes"/>
  <class name="QuarticSymbolicRegressionProblem" base="KozaSymbolicRegressionProblem" shortName="quartic"/>
  <!--
  <class name="F8SymbolicRegressionProblem" base="SymbolicRegressionProblem" shortName="symbreg">
    <variable type="PositiveInteger" name="functionIndex"/>
  </class>-->

  <!-- Boolean Problems -->
  <class name="BooleanExpressionProblem" base="ExpressionProblem" abstract="yes"/>
  <class name="BooleanParityProblem" base="BooleanExpressionProblem" shortName="parity">
    <variable type="PositiveInteger" name="numBits"/>
  </class>
  <class name="BooleanMultiplexerProblem" base="BooleanExpressionProblem" shortName="multiplexer">
    <variable type="PositiveInteger" name="numAddressBits"/>
  </class>

  <!-- Sante Fe Trail Problem -->
  <class name="SantaFeTrailWorld" base="Object"/>
  
  <class name="SantaFeTrailState" base="Object">
    <variable type="SantaFeTrailWorld" name="world"/>
    <variable type="PositiveInteger" name="maxNumSteps"/>
  </class>
  
  <class name="SantaFeTrailAction" base="Object" abstract="yes"/>
  <class name="MoveSantaFeTrailAction" base="SantaFeTrailAction"/>
  <class name="LeftSantaFeTrailAction" base="SantaFeTrailAction"/>
  <class name="RightSantaFeTrailAction" base="SantaFeTrailAction"/>
  <class name="IfFoodAheadSantaFeTrailAction" base="SantaFeTrailAction">
    <variable type="SantaFeTrailAction" name="thenAction"/>
    <variable type="SantaFeTrailAction" name="elseAction"/>
  </class>
  <class name="SequenceSantaFeTrailAction" base="SantaFeTrailAction">
    <variable type="ObjectVector[SantaFeTrailAction]" name="actions"/>
  </class>

  <class name="SantaFeTrailFunction" base="Function" abstract="yes"/>
  <class name="Progn2SantaFeTrailFunction" base="SantaFeTrailFunction"/>
  <class name="Progn3SantaFeTrailFunction" base="SantaFeTrailFunction"/>
  <class name="IfFoodAheadSantaFeTrailFunction" base="SantaFeTrailFunction"/>

  <class name="SantaFeTrailProblem" base="ExpressionProblem" shortName="ant">
    <variable type="PositiveInteger" name="maxNumSteps"/>
  </class>

  <!-- Specific to expressions -->
  <class name="ExpressionSampler" base="Sampler" abstract="yes"/>
  <class name="RPNExpressionSampler" base="ExpressionSampler" abstract="yes">
    <variable type="PositiveInteger" name="expressionSize"/>
  </class>
  <class name="RandomRPNExpressionSampler" base="RPNExpressionSampler"/>

  <class name="SimpleExpressionSearchActionCodeGenerator" base="SearchActionCodeGenerator"/>
  <class name="NGramExpressionSearchActionCodeGenerator" base="SearchActionCodeGenerator">
    <variable type="PositiveInteger" name="n"/>
  </class>

  <!-- Tree GP: Samplers -->
  <class name="DepthControlledExpressionSampler" base="ExpressionSampler" abstract="yes">
    <variable type="PositiveInteger" name="minDepth"/>
    <variable type="PositiveInteger" name="maxDepth"/>
  </class>
  <class name="FullExpressionSampler" base="DepthControlledExpressionSampler">
    <constructor arguments="size_t minDepth, size_t maxDepth"/>
  </class>
  <class name="GrowExpressionSampler" base="DepthControlledExpressionSampler">
    <constructor arguments="size_t minDepth, size_t maxDepth"/>
  </class>
  <class name="BinaryMixtureSampler" base="Sampler">
    <constructor arguments="SamplerPtr sampler1, SamplerPtr sampler2, double probability"/>
    <variable type="Sampler" name="sampler1"/>
    <variable type="Sampler" name="sampler2"/>
    <variable type="Probability" name="probability"/>
  </class>
  
  <!-- Tree GP: Mutations -->
  <class name="MutationSampler" base="Object" abstract="yes"/>
  <class name="ExpressionMutationSampler" base="MutationSampler" abstract="yes"/>
  <class name="ShrinkExpressionMutationSampler" base="ExpressionMutationSampler">
    <constructor returnType="MutationSampler"/>
  </class>
  <class name="SwapExpressionMutationSampler" base="ExpressionMutationSampler">
    <constructor arguments="double functionSelectionProbability" returnType="MutationSampler"/>
    <variable type="Probability" name="functionSelectionProbability"/>
  </class>
  <class name="InsertExpressionMutationSampler" base="ExpressionMutationSampler">
    <constructor arguments="size_t maxDepth" returnType="MutationSampler"/>
    <variable type="PositiveInteger" name="maxDepth"/>
  </class>
  <class name="StandardExpressionMutationSampler" base="ExpressionMutationSampler">
    <constructor arguments="DepthControlledExpressionSamplerPtr sampler, size_t maxRegenerationDepth, size_t maxDepth" returnType="MutationSampler"/>
    <variable type="DepthControlledExpressionSampler" name="sampler"/>
    <variable type="PositiveInteger" name="maxRegenerationDepth"/>
    <variable type="PositiveInteger" name="maxDepth"/>
  </class>

  <!-- Tree GP: Cross-over -->
  <class name="CrossOverSampler" base="Object" abstract="yes"/>
  <class name="SubTreeCrossOverSampler" base="CrossOverSampler">
    <constructor arguments="double functionSelectionProbability, size_t maxDepth"/>
    <variable type="Probability" name="functionSelectionProbability"/>
    <variable type="PositiveInteger" name="maxDepth"/>
  </class>

  <!-- Tree GP: Operators -->
  <class name="SolutionsOperator" base="Object" abstract="yes"/>

  <class name="CompositeSolutionsOperator" base="SolutionsOperator">
    <constructor arguments="const std::vector&lt;SolutionsOperatorPtr&gt;&amp; operators"/>
    <constructor arguments="SolutionsOperatorPtr operator1, SolutionsOperatorPtr operator2, SolutionsOperatorPtr operator3, SolutionsOperatorPtr operator4, SolutionsOperatorPtr operator5"/>
    <variable type="ObjectVector[SolutionsOperator]" name="operators"/>
  </class>

  <class name="SolutionSelector" base="SolutionsOperator" abstract="yes"/>
  <class name="TournamentSolutionSelector" base="SolutionSelector">
    <constructor arguments="SolutionComparatorPtr comparator, size_t tournamentSize"/>
    <variable type="SolutionComparator" name="comparator"/>
    <variable type="PositiveInteger" name="tournamentSize"/>
  </class>

  <class name="MutationOperator" base="SolutionsOperator">
    <constructor arguments="MutationSamplerPtr mutation, double mutationProbability"/>
    <variable type="MutationSampler" name="mutation"/>
    <variable type="Probability" name="mutationProbability"/>
  </class>

  <class name="CrossOverOperator" base="SolutionsOperator">
    <constructor arguments="CrossOverSamplerPtr crossOver, double crossOverProbability"/>
    <variable type="CrossOverSampler" name="crossOver"/>
    <variable type="Probability" name="crossOverProbability"/>
  </class>

  
  <!-- Tree GP: Top-level -->
  <class name="TreeBasedGeneticProgrammingSolver" base="PopulationBasedSolver">
    <variable type="Sampler" name="initialSampler"/>
    <variable type="SolutionsOperator" name="solutionOperator"/>
  </class>

  <!-- SandBox -->
  <class name="MCGPSandBox" base="WorkUnit">
    <variable type="ExpressionProblem" name="problem"/>
    <variable type="PositiveInteger" name="numEvaluations"/>
    <variable type="PositiveInteger" name="numRuns"/>
    <variable type="PositiveInteger" name="maxExpressionSize"/>
    <variable type="File" name="outputDirectory"/>
  </class>

  <class name="SampleExpressionTrajectories" base="WorkUnit">
    <variable type="ExpressionProblem" name="problem"/>
    <variable type="PositiveInteger" name="numExpressions"/>
    <variable type="PositiveInteger" name="maxExpressionSize"/>
  </class>

</library>
