<?xml version="1.0" encoding="UTF-8"?>

<library name="MCGP" dynamic="yes">

  <class name="SearchNode" base="Object">
    <variable type="SearchState" name="state"/>
    <variable type="Vector[SearchNode]" name="successors"/>
    <variable type="DiscreteDomain" name="actions"/>
    <variable type="Boolean" name="fullyVisited"/>
  </class>

  <class name="PrunedSearchState" base="SearchState">
    <variable type="SearchNode" name="node"/>
  </class>
  
  <class name="ExpressionToSearchProblem" base="Problem"/>
  
  <!-- Symbolic Regression Problems -->
  <class name="KozaSymbolicRegressionProblem" base="Problem" abstract="yes"/>
  <class name="QuarticSymbolicRegressionProblem" base="KozaSymbolicRegressionProblem" shortName="quartic"/>
  <!--
  <class name="F8SymbolicRegressionProblem" base="Problem" shortName="symbreg">
    <variable type="PositiveInteger" name="functionIndex"/>
  </class>-->

  <!-- Boolean Problems -->
  <class name="BooleanParityProblem" base="Problem" shortName="parity">
    <variable type="PositiveInteger" name="numBits"/>
  </class>
  <class name="BooleanMultiplexerProblem" base="Problem" shortName="multiplexer">
    <variable type="PositiveInteger" name="numAddressBits"/>
  </class>

  <!-- Sante Fe Trail Problem -->
  <class name="SantaFeTrailWorld" base="Object"/>
  
  <class name="SantaFeTrailState" base="Object">
    <variable type="SantaFeTrailWorld" name="world"/>
    <variable type="PositiveInteger" name="maxNumSteps"/>
  </class>
  
  <class name="SantaFeTrailAction" base="Object" abstract="yes"/>
  <class name="MoveSantaFeTrailAction" base="SantaFeTrailAction"/>
  <class name="LeftSantaFeTrailAction" base="SantaFeTrailAction"/>
  <class name="RightSantaFeTrailAction" base="SantaFeTrailAction"/>
  <class name="IfFoodAheadSantaFeTrailAction" base="SantaFeTrailAction">
    <variable type="SantaFeTrailAction" name="thenAction"/>
    <variable type="SantaFeTrailAction" name="elseAction"/>
  </class>
  <class name="SequenceSantaFeTrailAction" base="SantaFeTrailAction">
    <variable type="Vector[SantaFeTrailAction]" name="actions"/>
  </class>

  <class name="SantaFeTrailFunction" base="Function" abstract="yes"/>
  <class name="Progn2SantaFeTrailFunction" base="SantaFeTrailFunction"/>
  <class name="Progn3SantaFeTrailFunction" base="SantaFeTrailFunction"/>
  <class name="IfFoodAheadSantaFeTrailFunction" base="SantaFeTrailFunction"/>

  <class name="SantaFeTrailProblem" base="Problem" shortName="ant">
    <variable type="PositiveInteger" name="maxNumSteps"/>
  </class>

  <!-- Specific to expressions -->
  <class name="SimpleExpressionSearchActionCodeGenerator" base="SearchActionCodeGenerator"/>
  <class name="NGramExpressionSearchActionCodeGenerator" base="SearchActionCodeGenerator">
    <variable type="PositiveInteger" name="n"/>
  </class>
  
  <!-- Tree GP: Implementation based on operations -->
  <class name="SolutionsOperator" base="Object" abstract="yes"/>

  <class name="CompositeSolutionsOperator" base="SolutionsOperator">
    <constructor arguments="const std::vector&lt;SolutionsOperatorPtr&gt;&amp; operators"/>
    <constructor arguments="SolutionsOperatorPtr operator1, SolutionsOperatorPtr operator2, SolutionsOperatorPtr operator3, SolutionsOperatorPtr operator4, SolutionsOperatorPtr operator5"/>
    <variable type="Vector[SolutionsOperator]" name="operators"/>
  </class>

  <class name="SolutionSelector" base="SolutionsOperator" abstract="yes"/>
  <class name="TournamentSolutionSelector" base="SolutionSelector">
    <constructor arguments="SolutionComparatorPtr comparator, size_t tournamentSize"/>
    <variable type="SolutionComparator" name="comparator"/>
    <variable type="PositiveInteger" name="tournamentSize"/>
  </class>

  <class name="NBestsSolutionSelector" base="SolutionsOperator">
    <constructor arguments="SolutionComparatorPtr comparator, size_t numBests"/>
    <variable type="SolutionComparator" name="comparator"/>
    <variable type="PositiveInteger" name="numBests"/>
  </class>

  <class name="MutationOperator" base="SolutionsOperator">
    <constructor arguments="PerturbatorPtr perturbator, double probability"/>
    <variable type="Perturbator" name="perturbator"/>
    <variable type="Probability" name="probability"/>
  </class>

  <class name="CrossOverOperator" base="SolutionsOperator">
    <constructor arguments="BinaryPerturbatorPtr perturbator, double probability"/>
    <variable type="BinaryPerturbator" name="perturbator"/>
    <variable type="Probability" name="probability"/>
  </class>
  
  <class name="TreeGPOperationsSolver" base="PopulationBasedSolver">
    <variable type="Sampler" name="initialSampler"/>
    <variable type="SolutionsOperator" name="solutionOperator"/>
  </class>

  <!-- Tree GP: Implementation based on samplers -->
  <class name="TournamentSampler" base="Sampler">
    <constructor arguments="SolutionComparatorPtr comparator, size_t tournamentSize"/>
    <variable type="SolutionComparator" name="comparator"/>
    <variable type="PositiveInteger" name="tournamentSize"/>
  </class>
  
  <class name="PerturbatorSampler" base="DecoratorSampler">
    <constructor arguments="SamplerPtr inputSampler, PerturbatorPtr perturbator, double probability"/>
    <variable type="Perturbator" name="perturbator"/>
    <variable type="Probability" name="probability"/>
  </class>

  <class name="BinaryPerturbatorSampler" base="DecoratorSampler">
    <constructor arguments="SamplerPtr inputSampler, BinaryPerturbatorPtr perturbator, double probability"/>
    <variable type="BinaryPerturbator" name="perturbator"/>
    <variable type="Probability" name="probability"/>
  </class>

  <class name="TreeGPSamplersSolver" base="PopulationBasedSolver">
    <variable type="Sampler" name="initialSampler"/>
    <variable type="Sampler" name="subsequentSampler"/>
  </class>

  <class name="TestSolver" base="PopulationBasedSolver">
    <variable type="Sampler" name="initialSampler"/>
  </class>


  <!-- Minimalistic incremental -->
  <class name="MinimalisticIncrementalEvolver" base="IterativeSolver">
    <variable type="Sampler" name="sampler"/>
    <variable type="PositiveInteger" name="tournamentSize"/>
  </class>

  <class name="RandomWithActiveSubTreesSampler" base="SearchSampler">
    <variable type="Vector[Expression]" name="subTrees"/>
  </class>
  <class name="RandomWithActiveSubTreesSolver" base="PopulationBasedSolver">
    <variable type="PositiveInteger" name="numBests"/>
    <variable type="PositiveInteger" name="numActiveSubTrees"/>
  </class>


  <class name="MABSamplerExpressionSolver" base="IterativeSolver">
    <variable type="SearchActionCodeGenerator" name="codeGenerator"/>
    <variable type="PositiveInteger" name="numArms"/>
    <variable type="PositiveInteger" name="maxExpressionSize"/>
    <variable type="Boolean" name="usePostfixNotation"/>
  </class>


  <!-- SandBox -->
  <class name="MCGPSandBox" base="WorkUnit">
    <variable type="Problem" name="problem"/>
    <variable type="PositiveInteger" name="numEvaluations"/>
    <variable type="PositiveInteger" name="numRuns"/>
    <variable type="PositiveInteger" name="maxExpressionSize"/>
    <variable type="File" name="outputDirectory"/>
    <variable type="Boolean" name="verbose"/>
  </class>

  <class name="SampleExpressionTrajectories" base="WorkUnit">
    <variable type="Problem" name="problem"/>
    <variable type="PositiveInteger" name="numExpressions"/>
    <variable type="PositiveInteger" name="maxExpressionSize"/>
  </class>


  <class name="OptimizeExpressionSamplerProblem" base="Problem">
    <variable type="SearchActionCodeGenerator" name="codeGenerator"/>
    <variable type="Problem" name="targetProblem"/>
  </class>
  <class name="OptimizeExpressionSamplerSandBox" base="WorkUnit">
    <variable type="Problem" name="problem"/>
    <variable type="PositiveInteger" name="numEvaluations"/>
    <variable type="PositiveInteger" name="maxExpressionSize"/>
  </class>
  
  <!-- Classification Sand Box -->
  <class name="ClassificationSandBox" base="WorkUnit">
    <variable type="File" name="dataFile"/>
    <variable type="PositiveInteger" name="maxExamples"/>
    <variable type="PositiveInteger" name="verbosity"/>
  </class>
  
  <class name="RegressionSandBox" base="WorkUnit"/>

</library>
