<?xml version="1.0" encoding="UTF-8"?>

<library name="Luape" directory="Luape">

  <class name="LuapeNodeCache"/>

  <!-- Luape Function -->
  <class name="LuapeFunction" abstract="yes"/>
  <class name="HomogeneousBinaryLuapeFunction" base="LuapeFunction" abstract="yes"/>
  <class name="BinaryBooleanLuapeFunction" base="HomogeneousBinaryLuapeFunction" abstract="yes"/>
    <class name="AndBooleanLuapeFunction" base="BinaryBooleanLuapeFunction">
      <constructor returnType="LuapeFunction"/>
    </class>
    <class name="EqualBooleanLuapeFunction" base="BinaryBooleanLuapeFunction">
      <constructor returnType="LuapeFunction"/>
    </class>
  <class name="BinaryDoubleLuapeFunction" base="HomogeneousBinaryLuapeFunction" abstract="yes"/>
    <class name="AddDoubleLuapeFunction" base="BinaryDoubleLuapeFunction">
      <constructor returnType="LuapeFunction"/>
    </class>
    <class name="SubDoubleLuapeFunction" base="BinaryDoubleLuapeFunction">
      <constructor returnType="LuapeFunction"/>
    </class>
    <class name="MulDoubleLuapeFunction" base="BinaryDoubleLuapeFunction">
      <constructor returnType="LuapeFunction"/>
    </class>
    <class name="DivDoubleLuapeFunction" base="BinaryDoubleLuapeFunction">
      <constructor returnType="LuapeFunction"/>
    </class>
    <class name="GreaterThanDoubleLuapeFunction" base="LuapeFunction">
      <constructor returnType="LuapeFunction"/>
    </class>
  <class name="EqualsConstantEnumLuapeFunction" base="LuapeFunction">
    <constructor arguments="const Variable&amp; value"/>
    <variable type="Variable" name="value"/>
  </class>
  <class name="GetVariableLuapeFunction" base="LuapeFunction">
    <constructor arguments="size_t variableIndex"/>
    <variable type="PositiveInteger" name="variableIndex"/>
  </class>
  <class name="StumpLuapeFunction" base="LuapeFunction">
    <constructor arguments="double threshold"/>
    <variable type="Double" name="threshold"/>
  </class>
  
  <!-- Nodes -->
  <class name="LuapeNode" base="NameableObject" abstract="yes">
    <variable type="Type" name="type"/>
    <variable type="LuapeNodeCache" name="cache"/>
  </class>
  <class name="LuapeInputNode" base="LuapeNode"/>
  <class name="LuapeFunctionNode" base="LuapeNode">
    <variable type="LuapeFunction" name="function"/>
    <variable type="GenericVector[PositiveInteger]" name="arguments"/>
  </class>
  <class name="LuapeYieldNode" base="LuapeNode">
    <variable type="PositiveInteger" name="argument"/>
  </class>

  <!-- Graph -->
  <class name="LuapeGraphUniverse" base="Object"/>
  <class name="LuapeGraph" base="Object">
    <variable type="ObjectVector[LuapeNode]" name="nodes"/>
    <variable type="LuapeGraphUniverse" name="universe"/>
  </class>

  <!-- Inference -->
  <class name="LuapeInference" base="Function" abstract="yes">
    <variable type="LuapeGraph" name="graph"/>
    <variable type="Vector[Variable]" name="votes"/>
  </class>
  <class name="LuapeBinaryClassifier" base="LuapeInference">
    <constructor/>
  </class>
  <class name="LuapeClassifier" base="LuapeInference">
    <constructor/>
  </class>
  <class name="LuapeRanker" base="LuapeInference">
    <constructor/>
  </class>
  <class name="LuapeRegressor" base="LuapeInference">
    <constructor/>
  </class>

  <!-- Objective and Problem -->
  <class name="LuapeObjective" abstract="yes"/>
  <class name="L2RegressionLuapeObjective" base="LuapeObjective">
    <constructor/>
  </class>
  <class name="RankingLuapeObjective" base="LuapeObjective">
    <constructor arguments="RankingLossFunctionPtr rankingLoss"/>
  </class>
  
  <class name="LuapeProblem">
    <variable type="LuapeObjective" name="objective"/>
    <variable type="ObjectVector[VariableSignature]" name="inputs"/>
    <variable type="ObjectVector[Function]" name="functions"/>
    <variable type="Boolean" name="failed"/>
    <function lang="lua" name="input"/>
    <function lang="lua" name="function"/>
  </class>

  <!-- Builder Type Search Space -->
  <class name="LuapeGraphBuilderTypeState">
    <variable type="PositiveInteger" name="depth"/>
    <variable type="ObjectVector[Type]" name="stack"/>
  </class>
  <class name="LuapeGraphBuilderTypeSearchSpace"/>

  <!-- Builder Decision Problem -->
  <class name="LuapeGraphBuilderAction"/>
  
  <class name="LuapeGraphBuilderState" base="DecisionProblemState">
    <variable type="LuapeGraph" name="graph"/>
    <variable type="LuapeGraphBuilderTypeSearchSpace" name="typeSearchSpace"/>
    <variable type="LuapeGraphBuilderTypeState" name="typeState"/>
    <variable type="ObjectVector[LuapeNode]" name="stack"/>
    <variable type="PositiveInteger" name="numSteps"/>
  </class>

  <class name="LuapeRPNGraphBuilderState" base="DecisionProblemState">
    <variable type="LuapeProblem" name="problem"/>
    <variable type="LuapeGraph" name="graph"/>
    <variable type="PositiveInteger" name="maxSteps"/>
    <variable type="PositiveInteger" name="numSteps"/>
  </class>

  <!-- Weak Learners -->
  <class name="LuapeWeakLearner" base="Object" abstract="yes"/>
  <class name="LuapeGraphBuilderWeakLearner" base="LuapeWeakLearner">
    <constructor arguments="OptimizerPtr optimizer, size_t maxSteps"/>
    <variable type="Optimizer" name="optimizer"/>
    <variable type="PositiveInteger" name="maxSteps"/>
  </class>
  <class name="SingleStumpWeakLearner" base="LuapeWeakLearner">
    <constructor/>
  </class>
  <class name="CombinedStumpWeakLearner" base="LuapeWeakLearner">
    <constructor/>
  </class>
  <class name="ProductWeakLearner" base="LuapeWeakLearner">
    <constructor arguments="LuapeWeakLearnerPtr baseLearner, size_t numBaseClassifiers"/>
    <variable type="LuapeWeakLearner" name="baseLearner"/>
    <variable type="PositiveInteger" name="numBaseClassifiers"/>
  </class>

  <!-- Batch Learners -->
  <class name="LuapeBatchLearner" base="BatchLearner" abstract="yes">
    <variable type="LuapeProblem" name="problem"/>
  </class>
  <class name="BoostingLuapeLearner" base="LuapeBatchLearner" abstract="yes">
    <variable type="LuapeWeakLearner" name="weakLearner"/>
    <variable type="PositiveInteger" name="maxIterations"/>
  </class>
  <class name="AdaBoostLuapeLearner" base="BoostingLuapeLearner">
    <constructor arguments="LuapeProblemPtr problem, LuapeWeakLearnerPtr weakLearner, size_t maxIterations" returnType="BatchLearner"/>
  </class>
  <class name="AdaBoostMHLuapeLearner" base="BoostingLuapeLearner">
    <constructor arguments="LuapeProblemPtr problem, LuapeWeakLearnerPtr weakLearner, size_t maxIterations" returnType="BatchLearner"/>
  </class>
  
  <!-- Sand Box -->
  <class name="LuapeSandBox" base="WorkUnit">
    <variable type="File" name="trainFile"/>
    <variable type="File" name="testFile"/>
    <variable type="PositiveInteger" name="maxExamples"/>
    <variable type="PositiveInteger" name="maxSteps"/>
    <variable type="PositiveInteger" name="budgetPerIteration"/>
    <variable type="PositiveInteger" name="maxIterations"/>
  </class>
</library>
