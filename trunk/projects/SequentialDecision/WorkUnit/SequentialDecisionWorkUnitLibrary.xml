<?xml version="1.0" encoding="UTF-8"?>

<library name="SequentialDecisionWorkUnit" directory="WorkUnit">

  <!-- LinearLearnableHeuristic -->
  <class name="SearchTreeNodeIndexFeatureGenerator" base="FeatureGenerator"/>

  <class name="HeuristicSearchTreeNodeFeaturesFunction" base="CompositeFunction"/>
  <class name="GenericClosedSearchTreeNodeFeaturesFunction" base="CompositeFunction"/>
  <class name="LinearLearnableSearchHeuristic" base="LearnableSearchHeuristic"/>

  <class name="SequentialDecisionSandBox" base="WorkUnit">
    <variable type="DecisionProblem" name="problem" shortName="p"/>
    <variable type="RankingLossFunction" name="rankingLoss" shortName="l" description="E.g. mostViolatedPair(hinge), allPairs(logBinomial)"/>
    <variable type="PositiveInteger" name="numInitialStates" shortName="n"/>
    <variable type="PositiveInteger" name="maxSearchNodes" shortName="m"/>
    <variable type="PositiveInteger" name="beamSize" shortName="b"/>
    <variable type="PositiveInteger" name="maxLearningIterations" shortName="i"/>
    <variable type="PositiveInteger" name="numPasses" shortName="N"/>
  </class>
  
  <!-- HIV -->
  <class name="WeightedRewardsFeatureGenerator" base="FeatureGenerator" shortName="weightedRewardsSearchNodeFeatures"/>
  <class name="SimpleSearchNodeFeatureGenerator" base="CompositeFunction" shortName="simpleSearchNodeFeatures">
    <variable type="Boolean" name="applyLog"/>
    <variable type="Boolean" name="includeUnit"/>
  </class>

  <class name="HIVStateFeatures" base="CompositeFunction"/>
  <class name="LPPStateFeatures" base="CompositeFunction"/>
  
  <class name="HIVSearchFeatures" base="CompositeFunction">
    <variable type="Double" name="discount"/>
    <variable type="Double" name="maxReward"/>
    <variable type="Double" name="maxDepth"/>
    <variable type="Function" name="stateFeatures"/>
  </class>

  <class name="HIVSearchHeuristic" base="LearnableSearchHeuristic">
    <variable type="Function" name="featuresFunction"/>
    <variable type="Enumeration" name="featuresEnumeration" generated="yes"/>
    <variable type="DenseDoubleVector[EnumValue,Double]" name="parameters"/>
  </class>

  <class name="HIVSandBox" base="WorkUnit">
    <variable type="DecisionProblem" name="problem" shortName="dp"/>
    <variable type="Function" name="featuresFunction" shortName="phi"/>
    <variable type="PositiveInteger" name="minDepth" shortName="dmin"/>
    <variable type="PositiveInteger" name="maxDepth" shortName="dmax"/>
    <variable type="Boolean" name="depthIsBudget"/>
    <variable type="PositiveInteger" name="maxHorizon" shortName="h"/>
    <variable type="PositiveInteger" name="numInitialStates"/>
    <variable type="Boolean" name="verboseTrajectories"/>
    <variable type="Boolean" name="computeGeneralization"/>
    
    <variable type="PositiveInteger" name="iterations" shortName="i"/>
    <variable type="PositiveInteger" name="populationSize" shortName="p"/>
    <variable type="PositiveInteger" name="numBests" shortName="n"/>
    <variable type="Boolean" name="reinjectBest"/>

    <variable type="Boolean" name="baseHeuristics"/>
    <variable type="Boolean" name="optimisticHeuristics"/>
    <variable type="Boolean" name="learnedHeuristic"/>
    <variable type="File" name="loadedHeuristics"/>
  </class>
  
  <!-- Bandits -->
  <class name="BanditStatistics" base="Object">
    
  </class>

  <class name="DiscreteBanditPolicy" base="Object" abstract="yes">
    <!--
    <variable type="PositiveInteger" name="timeStep"/>
    <variable type="ObjectVector[BanditStatistics]" name="banditStatistics"/>
    -->
  </class>
  <class name="IndexBasedDiscreteBanditPolicy" base="DiscreteBanditPolicy" abstract="yes"/>

  <class name="UCB1DiscreteBanditPolicy" base="IndexBasedDiscreteBanditPolicy" shortName="ucb1"/>
  <class name="UCB1TunedDiscreteBanditPolicy" base="IndexBasedDiscreteBanditPolicy" shortName="ucb1Tuned"/>
  <class name="UCB2DiscreteBanditPolicy" base="IndexBasedDiscreteBanditPolicy" shortName="ucb2">
    <variable type="Double" name="alpha"/>
<!--    <variable type="GenericVector[PositiveInteger]" name="episodeCounts"/>
    <variable type="PositiveInteger" name="episodeRemainingSteps"/>
    <variable type="PositiveInteger" name="currentBandit"/> -->
  </class>

  <class name="EpsilonGreedyDiscreteBanditPolicy" base="IndexBasedDiscreteBanditPolicy" shortName="epsilonGreedy">
    <variable type="Double" name="c"/>
    <variable type="Double" name="d"/>
  </class>

  <class name="WeightedUCBBanditPolicy" base="IndexBasedDiscreteBanditPolicy" shortName="weightedUCB">
    <variable type="Double" name="C"/>
  </class>
  
  <enumeration name="TimeDependentWeightedUCBBanditPolicyEnumeration">
    <value name="1"/>
    <value name="log10(timeStep)"/>
    <value name="playedCount"/>
  </enumeration>

  <class name="TimeDependentWeightedUCBBanditPolicy" base="IndexBasedDiscreteBanditPolicy" shortName="timeDependentWeightedUCB">
    <variable type="DenseDoubleVector[TimeDependentWeightedUCBBanditPolicyEnumeration,Double]" name="parameters"/>
  </class>

  <class name="MomentsWeightedUCBBanditPolicy" base="IndexBasedDiscreteBanditPolicy">
    <variable type="DenseDoubleVector[EnumValue,Double]" name="parameters"/>
  </class>

  <class name="PowerFunctionParameterizedBanditPolicy" base="IndexBasedDiscreteBanditPolicy">
    <variable type="PositiveInteger" name="maxPower"/>
    <variable type="Enumeration" name="parametersEnumeration" generated="yes"/>
    <variable type="DenseDoubleVector[EnumValue,Double]" name="parameters"/>
  </class>
  
  <enumeration name="OldStyleParameterizedBanditPolicyEnumeration">
    <value name="mean(reward)"/>
    <value name="stddev(reward)"/>
    <value name="conf(reward)"/>
    <value name="log(timeStep).mean(reward)"/>
    <value name="log(timeStep).stddev(reward)"/>
    <value name="log(timeStep).conf(reward)"/>
    <value name="mean(reward)^2"/>
    <value name="mean(reward).stddev(reward)"/>
    <value name="mean(reward).conf(reward)"/>
    <value name="variance(reward)"/>
    <value name="stddev(reward).conf(reward)"/>
    <value name="conf(reward)^2"/>
  </enumeration>
  
  <class name="OldStyleParameterizedBanditPolicy" base="IndexBasedDiscreteBanditPolicy" shortName="oldStyle">
    <variable type="DenseDoubleVector[OldStyleParameterizedBanditPolicyEnumeration,Double]" name="parameters"/>
  </class>

  <class name="EvaluateDiscreteBanditPolicyWorkUnit" base="WorkUnit">
    <variable type="PositiveInteger" name="numBandits"/>
    <variable type="PositiveInteger" name="maxTimeStep"/>
    <variable type="ObjectVector[DiscreteBanditState]" name="initialStates"/>
    <variable type="DiscreteBanditPolicy" name="policy"/>
    <variable type="Boolean" name="verbose"/>
  </class>
  
  <class name="EvaluateOptimizedDiscreteBanditPolicyParameters" base="Function">
    <variable type="DiscreteBanditPolicy" name="policy"/>
    <variable type="PositiveInteger" name="numBandits"/>
    <variable type="PositiveInteger" name="maxTimeStep"/>
    <variable type="ObjectVector[DiscreteBanditState]" name="initialStates"/>
    <variable type="Boolean" name="verbose"/>
  </class>
  
  <class name="BanditsSandBox" base="WorkUnit">
    <variable type="PositiveInteger" name="numBandits" shortName="K"/>
    <variable type="PositiveInteger" name="maxTimeStep" shortName="N"/>
    <variable type="PositiveInteger" name="numTrainingProblems" shortName="T"/>
    <variable type="PositiveInteger" name="numTestingProblems"/>
    <!-- <variable type="DiscreteBanditPolicy" name="policyToOptimize" shortName="p"/> -->
  </class>


</library>
