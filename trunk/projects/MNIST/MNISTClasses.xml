<?xml version="1.0" encoding="UTF-8"?>

<file name="MNIST">

  <namespace name="lbcpp">
    
    <!-- Enumeration -->
    <enumeration name="DigitType">
      <value name="0" oneLetterCode="0"/>
      <value name="1" oneLetterCode="1"/>
      <value name="2" oneLetterCode="2"/>
      <value name="3" oneLetterCode="3"/>
      <value name="4" oneLetterCode="4"/>
      <value name="5" oneLetterCode="5"/>
      <value name="6" oneLetterCode="6"/>
      <value name="7" oneLetterCode="7"/>
      <value name="8" oneLetterCode="8"/>
      <value name="9" oneLetterCode="9"/>
    </enumeration>
    
    <!-- Data -->
    <class name="MNISTImage">
      <variable type="GenericVector[Double]" name="pixels"/>
      <variable type="DigitType" name="digit"/>
    </class>
    
    <class name="Image">
      <constructor arguments="size_t width, size_t height"/>
      <variable type="PositiveInteger" name="width"/>
      <variable type="PositiveInteger" name="height"/>
      <variable type="GenericVector[Double]" name="pixels"/>
    </class>
    
    <class name="BinaryImage">
      <constructor arguments="size_t width, size_t height"/>
    </class>
    
    <!-- Program -->
    <class name="LearnerProgram" base="Program">
      <variable type="File" name="learningFile" shortName="ls"/>
      <variable type="File" name="testingFile" shortName="ts"/>
      <variable type="File" name="output" shortName="o"/>
      <variable type="PositiveInteger" name="numIterations" shortName="n"/>
      <variable type="Double" name="binarizationThreshold" shortName="bin"/>
      <variable type="Double" name="regularizer" shortName="reg"/>
    </class>
    
    <class name="PredictorProgram" base="Program">
      <variable type="File" name="dataFile" shortName="data"/>
      <variable type="File" name="inferenceFile" shortName="inf"/>
      <variable type="File" name="output" shortName="o"/>
    </class>
    
    <class name="BinarizerProgram" base="Program">
      <variable type="File" name="inputFile" shortName="in"/>
      <variable type="File" name="outputFile" shortName="o"/>
    </class>
    
    <!-- Perception -->
    <class name="ImageFlattenPerception" base="Perception">
      <constructor/>
    </class>
    
    <class name="BinarizeImagePerception" base="Perception">
      <constructor arguments="double threshold"/>
      <variable type="Double" name="threshold"/>
    </class>
    
  <code>
  ContainerPtr parseDataFile(const File&amp; file)
  {
    if (file.getFileExtension().toLowerCase() == T(".bin"))
    {
      VectorPtr res = vector(mnistImageClass);
      InputStream* is = file.createInputStream();
      while (!is-&gt;isExhausted())
      {
        bool hasSupervision = is-&gt;readBool();
        std::vector&lt;double&gt; pixels(MNISTImage::numPixels);
        for (size_t i = 0; i &lt; MNISTImage::numPixels; ++i)
          pixels[i] = is-&gt;readDouble();
        size_t digit = Variable::missingValue(digitTypeEnumeration).getInteger();
        if (hasSupervision)
          digit = is-&gt;readInt();
        res-&gt;append(Variable(ObjectPtr(new MNISTImage(pixels, digit)), mnistImageClass));
      }
      return res;
    }
    
    return StreamPtr(new MatlabFileParser(file))-&gt;load();
  }
  </code>
  
  </namespace>

  <declarationCode>
    lbcpp::Type::finishDeclarations();
  </declarationCode>
  
</file>
