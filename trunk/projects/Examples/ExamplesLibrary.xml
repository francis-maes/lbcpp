<?xml version="1.0" encoding="UTF-8"?>

<library name="Examples" dynamic="yes">

  <!-- Xor Regression Example -->
  <class name="XorPerception" base="Perception"/>
  <class name="XorRegressionExample" base="WorkUnit"/>

  <!-- WorkUnit Example -->
  <class name="SubWorkUnitExample" base="WorkUnit"/>
  <class name="WorkUnitExample" base="WorkUnit"/>
 
  <!-- Simple Introspection Example -->
  <class name="SimpleClass">
    <variable type="Boolean" name="myBool"/>
    <variable type="Integer" name="myInt"/>
    <variable type="Double" name="myDouble"/>
    <variable type="String" name="myString"/>
    <variable type="Object" name="myObject"/>
    <variable type="Variable" name="myVariable"/>
  </class>
  <class name="SimpleIntrospectionExample" base="WorkUnit"/>

  <!-- Missing Values Example -->
  <class name="VerySimpleClass" base="Object"/>
  <class name="MissingValuesExample" base="WorkUnit"/>

  <!-- Feature Generators -->
  <class name="FeatureGeneratorsExample" base="WorkUnit"/>

  <!-- Train/Test Learning Machine -->
  <class name="LearningProblem" abstract="yes">
    <code>
      virtual VariableValue createFromString(ExecutionContext&amp; context, const String&amp; value) const
      {
        if (value == T("MultiClass"))
          return new MultiClassClassificationProblem();
        else if (value == T("MultiLabel"))
          return new MultiLabelClassificationProblem();
        else
        {
          context.errorCallback(T("Could not create learning problem ") + value.quoted());
          return VariableValue();
        }
      }
    </code>
  </class>
  <class name="MultiClassClassificationProblem" base="LearningProblem"/>
  <class name="MultiLabelClassificationProblem" base="LearningProblem"/>

  <class name="LearningMachineFamily" abstract="yes">
    <code>
      virtual VariableValue createFromString(ExecutionContext&amp; context, const String&amp; value) const
      {
        if (value == T("Linear"))
          return new LinearLearningMachineFamily();
        else if (value == T("ExtraTree"))
          return new ExtraTreeLearningMachineFamily();
        else
        {
          context.errorCallback(T("Could not create learning machine family ") + value.quoted());
          return VariableValue();
        }
      }
    </code>
  </class>
  <class name="LinearLearningMachineFamily" base="LearningMachineFamily"/>
  <class name="ExtraTreeLearningMachineFamily" base="LearningMachineFamily"/>

  <class name="TrainTestLearningMachine" base="WorkUnit">
    <variable type="LearningProblem" name="learningProblem" shortName="t"/>
    <variable type="LearningMachineFamily" name="learningMachineFamily" shortName="f"/>
    <variable type="String" name="methodToUse" shortName="m"/>
    <variable type="File" name="trainingFile" shortName="train"/>
    <variable type="File" name="testingFile" shortName="test"/>
    <variable type="PositiveInteger" name="maxExamples" shortName="max"/>
  </class>
</library>
