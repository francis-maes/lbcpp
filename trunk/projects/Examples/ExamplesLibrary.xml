<?xml version="1.0" encoding="UTF-8"?>

<library name="Examples" dynamic="yes">

  <!-- Xor Regression Example -->
  <class name="XorFeatureGenerator" base="FeatureGenerator"/>
  <class name="LearnableXorFunction" base="CompositeFunction"/>
  <class name="XorRegressionExample" base="WorkUnit"/>

  <!-- WorkUnit Example -->
  <class name="SubWorkUnitExample" base="WorkUnit"/>
  <class name="WorkUnitExample" base="WorkUnit"/>
 
  <!-- Simple Introspection Example -->
  <class name="SimpleClass">
    <variable type="Boolean" name="myBool"/>
    <variable type="Integer" name="myInt"/>
    <variable type="Double" name="myDouble"/>
    <variable type="String" name="myString"/>
    <variable type="Object" name="myObject"/>
    <variable type="Variable" name="myVariable"/>
  </class>
  <class name="SimpleIntrospectionExample" base="WorkUnit"/>

  <!-- Missing Values Example -->
  <class name="VerySimpleClass" base="Object"/>
  <class name="MissingValuesExample" base="WorkUnit"/>

  <!-- Feature Generators -->
  <class name="FeatureGeneratorsExample" base="WorkUnit"/>

  <!-- Train/Test Learning Machine -->
  <class name="LearningProblem" abstract="yes"/>

  <class name="RegressionProblem" base="LearningProblem" shortName="regression"/>
  <class name="BinaryClassificationProblem" base="LearningProblem" shortName="binary"/>
  <class name="MultiClassClassificationProblem" base="LearningProblem" shortName="multiClass"/>
  <class name="MultiLabelClassificationProblem" base="LearningProblem" shortName="multiLabel"/>
  
  <class name="TrainTestLearningMachine" base="WorkUnit">
    <variable type="LearningProblem" name="learningProblem" shortName="t"/>
    <variable type="Function" name="learningMachine" shortName="m"/>
    <variable type="File" name="trainingFile" shortName="train"/>
    <variable type="File" name="testingFile" shortName="test"/>
    <variable type="PositiveInteger" name="maxExamples" shortName="max"/>
  </class>
  
  <!-- Genetic Programming Example -->
  <class name="AgAddFunction" base="SimpleBinaryFunction"/>
  <class name="AgSubFunction" base="SimpleBinaryFunction"/>
  <class name="AgMultiplyFunction" base="SimpleBinaryFunction"/>
  <class name="AgDivideFunction" base="SimpleBinaryFunction"/>
  
  <class name="GeneticProgrammingExample" base="WorkUnit">
    <variable type="PositiveInteger" name="numInputVariables"/>
    <variable type="PositiveInteger" name="numData"/>
    <variable type="PositiveInteger" name="numTrees"/>
    <variable type="PositiveInteger" name="numGenerations"/>
    <variable type="Double" name="probOfCrossOver"/>
    <variable type="Double" name="probOfReproduction"/>
    <variable type="Double" name="probOfMutation"/>
  </class>
  
  <!-- Optimizer Example -->
  <class name="OptimizerExampleWorkUnit" base="WorkUnit"/>
  <class name="TestObjectiveFunction" base="Function"/>
  
  <!-- Random Generator Example -->
  <class name="RandomGeneratorExample" base="WorkUnit"/>
  
  <!-- OptimizerTestBed -->
  <class name="SphereFunction" base="ScalarVectorFunction">
    <constructor arguments="const DenseDoubleVectorPtr&amp; xopt, double fopt"/>
    <variable type="DenseDoubleVector[PositiveIntegerEnumeration,Double]" name="xopt"/>
    <variable type="Double" name="fopt"/> 
  </class>
  
  <class name="EllipsoidalFunction" base="ScalarVectorFunction">
    <constructor arguments="const DenseDoubleVectorPtr&amp; xopt, double fopt"/>
    <variable type="DenseDoubleVector[PositiveIntegerEnumeration,Double]" name="xopt"/>
    <variable type="Double" name="fopt"/> 
  </class>
  
  <class name="RastriginFunction" base="ScalarVectorFunction">
    <constructor arguments="const DenseDoubleVectorPtr&amp; xopt, double fopt"/>
    <variable type="DenseDoubleVector[PositiveIntegerEnumeration,Double]" name="xopt"/>
    <variable type="Double" name="fopt"/> 
  </class>
  
  <class name="BucheRastriginFunction" base="ScalarVectorFunction">
    <constructor arguments="const DenseDoubleVectorPtr&amp; xopt, double fopt"/>
    <variable type="DenseDoubleVector[PositiveIntegerEnumeration,Double]" name="xopt"/>
    <variable type="Double" name="fopt"/> 
  </class>
  
  <class name="LinearSlopeFunction" base="ScalarVectorFunction">
    <constructor arguments="const DenseDoubleVectorPtr&amp; xopt, double fopt"/>
    <variable type="DenseDoubleVector[PositiveIntegerEnumeration,Double]" name="xopt"/>
    <variable type="Double" name="fopt"/> 
  </class>
  
  <class name="AttractiveSectorFunction" base="ScalarVectorFunction">
    <constructor arguments="const DenseDoubleVectorPtr&amp; xopt, double fopt"/>
    <variable type="DenseDoubleVector[PositiveIntegerEnumeration,Double]" name="xopt"/>
    <variable type="Double" name="fopt"/> 
  </class>
  
  <class name="StepEllipsoidalFunction" base="ScalarVectorFunction">
    <constructor arguments="const DenseDoubleVectorPtr&amp; xopt, double fopt"/>
    <variable type="DenseDoubleVector[PositiveIntegerEnumeration,Double]" name="xopt"/>
    <variable type="Double" name="fopt"/> 
  </class>
  
  <class name="RosenbrockFunction" base="ScalarVectorFunction">
    <constructor arguments="const DenseDoubleVectorPtr&amp; xopt, double fopt"/>
    <variable type="DenseDoubleVector[PositiveIntegerEnumeration,Double]" name="xopt"/>
    <variable type="Double" name="fopt"/> 
  </class>
  
  <class name="RosenbrockRotatedFunction" base="ScalarVectorFunction">
    <constructor arguments="const DenseDoubleVectorPtr&amp; xopt, double fopt"/>
    <variable type="DenseDoubleVector[PositiveIntegerEnumeration,Double]" name="xopt"/>
    <variable type="Double" name="fopt"/> 
  </class>
  
  <class name="IllEllipsoidalFunction" base="ScalarVectorFunction">
    <constructor arguments="const DenseDoubleVectorPtr&amp; xopt, double fopt"/>
    <variable type="DenseDoubleVector[PositiveIntegerEnumeration,Double]" name="xopt"/>
    <variable type="Double" name="fopt"/> 
  </class>

  <class name="DiscusFunction" base="ScalarVectorFunction">
    <constructor arguments="const DenseDoubleVectorPtr&amp; xopt, double fopt"/>
    <variable type="DenseDoubleVector[PositiveIntegerEnumeration,Double]" name="xopt"/>
    <variable type="Double" name="fopt"/> 
  </class>
  
  <class name="BentCigarFunction" base="ScalarVectorFunction">
    <constructor arguments="const DenseDoubleVectorPtr&amp; xopt, double fopt"/>
    <variable type="DenseDoubleVector[PositiveIntegerEnumeration,Double]" name="xopt"/>
    <variable type="Double" name="fopt"/> 
  </class>
  
  <class name="SharpRidgeFunction" base="ScalarVectorFunction">
    <constructor arguments="const DenseDoubleVectorPtr&amp; xopt, double fopt"/>
    <variable type="DenseDoubleVector[PositiveIntegerEnumeration,Double]" name="xopt"/>
    <variable type="Double" name="fopt"/> 
  </class>
  
  <class name="DifferentPowersFunction" base="ScalarVectorFunction">
    <constructor arguments="const DenseDoubleVectorPtr&amp; xopt, double fopt"/>
    <variable type="DenseDoubleVector[PositiveIntegerEnumeration,Double]" name="xopt"/>
    <variable type="Double" name="fopt"/> 
  </class>
  
</library>
