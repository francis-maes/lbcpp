<?xml version="1.0" encoding="UTF-8"?>

<library name="MOO" dynamic="yes">

  <class name="ProblemFromSharkObjectiveFunction" base="Problem" abstract="yes">
    <variable type="PositiveInteger" name="numDimensions"/>
  </class>

  <class name="SphereProblem" base="ProblemFromSharkObjectiveFunction"/>
  <class name="AckleyProblem" base="ProblemFromSharkObjectiveFunction"/>
  <class name="GriewangkProblem" base="ProblemFromSharkObjectiveFunction"/>
  <class name="RastriginProblem" base="ProblemFromSharkObjectiveFunction"/>
  <class name="RosenbrockProblem" base="ProblemFromSharkObjectiveFunction"/>
  <class name="RosenbrockRotatedProblem" base="ProblemFromSharkObjectiveFunction"/>

  <class name="ZDTMOProblem" base="ProblemFromSharkObjectiveFunction" abstract="yes"/>
  <class name="ZDT1MOProblem" base="ZDTMOProblem"/>
  <class name="ZDT2MOProblem" base="ZDTMOProblem"/>
  <class name="ZDT3MOProblem" base="ZDTMOProblem"/>
  <class name="ZDT4MOProblem" base="ZDTMOProblem"/>
  <class name="ZDT6MOProblem" base="ZDTMOProblem"/>

  <class name="LZ06MOProblem" base="ProblemFromSharkObjectiveFunction" abstract="yes"/>
  <class name="LZ06_F1MOProblem" base="LZ06MOProblem"/>

  <class name="DTLZMOProblem" base="ProblemFromSharkObjectiveFunction" abstract="yes"/>
  <class name="DTLZ1MOProblem" base="DTLZMOProblem"/>
  <class name="DTLZ2MOProblem" base="DTLZMOProblem"/>
  <class name="DTLZ3MOProblem" base="DTLZMOProblem"/>
  <class name="DTLZ4MOProblem" base="DTLZMOProblem"/>
  <class name="DTLZ5MOProblem" base="DTLZMOProblem"/>
  <class name="DTLZ6MOProblem" base="DTLZMOProblem"/>
  <class name="DTLZ7MOProblem" base="DTLZMOProblem"/>

  <class name="WFGProblem" base="Problem" abstract="yes"/>
  <class name="WFG1Problem" base="WFGProblem"/>
  <class name="WFG2Problem" base="WFGProblem"/>
  <class name="WFG3Problem" base="WFGProblem"/>
  <class name="WFG4Problem" base="WFGProblem"/>
  <class name="WFG5Problem" base="WFGProblem"/>
  <class name="WFG6Problem" base="WFGProblem"/>
  <class name="WFG7Problem" base="WFGProblem"/>
  <class name="WFG8Problem" base="WFGProblem"/>
  <class name="WFG9Problem" base="WFGProblem"/>

  <class name="SolverInfo"/>
  <class name="TestOneOptimizer" base="WorkUnit"/>

  <class name="MOOSandBox" base="WorkUnit">
    <variable type="Boolean" name="useDefaults" description="Use default settings for the problems. This will override any settings to numDimensions"/>
    <variable type="PositiveInteger" name="numDimensions"/>
    <variable type="PositiveInteger" name="numObjectives"/>
    <variable type="PositiveInteger" name="numEvaluations"/>
    <variable type="PositiveInteger" name="verbosity"/>
    <variable type="PositiveInteger" name="numRuns"/>
    <variable type="PositiveInteger" name="problemIdx"/>
    <variable type="PositiveInteger" name="archiveSize"/>
    <variable type="String" name="paretoFrontDir"/>
  </class>
  
  <class name="TestRandomForestUncertainties" base="WorkUnit">
    <variable type="PositiveInteger" name="numSamples"/>
    <variable type="PositiveInteger" name="numTrees"/>
    <variable type="PositiveInteger" name="numObjectives"/>
    <variable type="PositiveInteger" name="randomSeed"/>
  </class>

  <class name="HoeffdingTreeLearnerExperiments" base="WorkUnit">
    <variable type="PositiveInteger" name="numSamples"/>
    <variable type="PositiveInteger" name="randomSeed"/>
    <variable type="Double" name="learningRate"/>
    <variable type="Double" name="learningRateDecay"/>
    <variable type="Double" name="delta"/>
    <variable type="Double" name="threshold"/>
    <variable type="PositiveInteger" name="numDims" description="Dimensionality of DTLZ problems. For numDims > 1 no curve is drawn."/>
    <variable type="PositiveInteger" name="verbosity"/>
  </class>

  <class name="PerceptronTest" base="WorkUnit">
    <variable type="PositiveInteger" name="numSamples"/>
    <variable type="PositiveInteger" name="numInitialSamples"/>
    <variable type="PositiveInteger" name="randomSeed"/>
    <variable type="Double" name="learningRate"/>
    <variable type="Double" name="learningRateDecay"/>
  </class>

  <class name="RewardLearningTest" base="WorkUnit">
    <variable type="PositiveInteger" name="numSamples"/>
    <variable type="PositiveInteger" name="numInitialSamples"/>
    <variable type="PositiveInteger" name="randomSeed"/>
    <variable type="Double" name="learningRate"/>
    <variable type="Double" name="learningRateDecay"/>
  </class>

  <class name="SBOExperiments" base="WorkUnit">
    <variable type="PositiveInteger" name="numEvaluations" shortName="n" description="Number of evaluations [1000]"/>
    <variable type="Boolean" name="runBaseline" description="Run baseline methods [false]"/>
    <variable type="PositiveInteger" name="populationSize" description="Population size for baseline methods and inner optimization of surrogate-based methods [20]"/>
    <variable type="Boolean" name="runAll" description="Run Baseline, RF, XT and IXT with LHS, ModifiedLHS and EdgeSampling"/>
    <variable type="Boolean" name="runRandomForests" description="Run surrogate-based optimization with random forests [false]"/>
    <variable type="Boolean" name="runXT" description="Run surrogate-based optimization with extremely randomized trees [false]"/>
    <variable type="Boolean" name="runIncrementalXT" description="Run surrogate-based optimization with incremental extremely randomized trees [false]"/>
    <variable type="Boolean" name="runGP" description="Run surrogate-based optimization with gaussian processes [false]"/>
    <variable type="Boolean" name="runParEGO" description="Run the ParEGO algorithm [false]"/>
    <variable type="Boolean" name="uniformSampling" description="Initialize surrogate-based optimizers with uniform sampling [false]"/>
    <variable type="Boolean" name="latinHypercubeSampling" description="Initialize surrogate-based optimizers with latin hypercube sampling [false]"/>
    <variable type="Boolean" name="modifiedLatinHypercubeSampling" description="Initialize surrogate-based optimizers with modified latin hypercube sampling [false]"/>
    <variable type="Boolean" name="edgeSampling" description="Initialize surrogate-based optimizers with edge sampling [false]"/>
    <variable type="PositiveInteger" name="numTrees" shortName="t" description="Number of trees in surrogate models [100]"/>
    <variable type="Double" name="optimism" shortName="o" description="Level of optimism for optimistic selection criterion [2.0]"/>
    <variable type="Double" name="evaluationPeriod" description="Number of seconds between evaluations in function of CPU time [10.0]"/>
    <variable type="Double" name="evaluationPeriodFactor" description="After each evaluation for CPU time, evaluationPeriod is multiplied by this factor [1.0]"/>
    <variable type="PositiveInteger" name="numDims" shortName="d" description="Dimensionality of test problems [6]"/>
    <variable type="PositiveInteger" name="numRuns" shortName="r" description="Number of times to run each method on each problem [10]"/>
    <variable type="PositiveInteger" name="verbosity" description="Verbosity of output, verbosity >= 2 gives curves for each run [1]"/>
    <variable type="PositiveInteger" name="optimizerVerbosity" description="Verbosity of optimizers [1]"/>
    <variable type="PositiveInteger" name="problemIdx" shortName="p" description="The problem to run (1-6) [1]"/>
  </class>

  <class name="SBOEnsembleSizeExperiments" base="WorkUnit">
    <variable type="PositiveInteger" name="numEvaluations" shortName="n" description="Number of evaluations [1000]"/>
    <variable type="Double" name="evaluationPeriod" description="Number of seconds between evaluations in function of CPU time [10.0]"/>
    <variable type="Double" name="evaluationPeriodFactor" description="After each evaluation for CPU time, evaluationPeriod is multiplied by this factor [1.0]"/>
    <variable type="PositiveInteger" name="numDims" shortName="d" description="Dimensionality of test problems [6]"/>
    <variable type="PositiveInteger" name="numRuns" shortName="r" description="Number of times to run each method on each problem [10]"/>
    <variable type="PositiveInteger" name="verbosity" description="Verbosity of output, verbosity >= 2 gives curves for each run [1]"/>
    <variable type="PositiveInteger" name="optimizerVerbosity" description="Verbosity of optimizers [1]"/>
    <variable type="PositiveInteger" name="problemIdx" shortName="p" description="The problem to run (1-6) [1]"/>
  </class>
  
  <class name="TestSBOInnerOptimizers" base="WorkUnit">
    <variable type="PositiveInteger" name="numEvaluations"/>
    <variable type="PositiveInteger" name="numTrees"/>
    <variable type="PositiveInteger" name="numDims"/>
    <variable type="PositiveInteger" name="numRuns"/>
  </class>
  
  <!-- FQI Based Solver -->
  <class name="FQIBasedSolver" base="PopulationBasedSolver" abstract="yes"/>
  
  <class name="ScalarVectorSearchState" base="SearchState">
    <variable type="ScalarVectorDomain" name="vectorDomain"/>
    <variable type="DenseDoubleVector[PositiveIntegerEnumeration,Double]" name="vector"/>
  </class>
  <class name="ScalarVectorFQIBasedSolver" base="FQIBasedSolver"/>

  <!--<class name="HoeffdingTreeLearnerTest" base="WorkUnit" >
    <variable type="PositiveInteger" name="randomSeed"/>
    <variable type="PositiveInteger" name="nbSamples"/>
    <variable type="PositiveInteger" name="nbTestSamples"/>
    <variable type="Boolean" name="modelNY"/>
    <variable type="Boolean" name="modelNXY"/>
  </class>-->
</library>
