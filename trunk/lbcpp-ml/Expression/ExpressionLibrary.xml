<?xml version="1.0" encoding="UTF-8"?>

<library name="Expression" directory="Expression">

  <include file="lbcpp-ml/Expression.h"/>
  <include file="lbcpp-ml/ExpressionDomain.h"/>
    
  <!-- Expressions-->
  <class name="Expression" base="Object" abstract="yes">
    <variable type="Type" name="type"/>
    <!-- <variable type="NewPositiveInteger" name="allocationIndex"/> -->
  </class>
  <class name="VariableExpression" base="Expression">
    <variable type="NewString" name="name"/>
    <variable type="NewPositiveInteger" name="inputIndex"/>
  </class>
  <class name="ConstantExpression" base="Expression">
    <variable type="Object" name="value"/>
  </class>
  <class name="FunctionExpression" base="Expression">
    <variable type="Function" name="function"/>
    <variable type="ObjectVector[Expression]" name="arguments"/>
  </class>
  <class name="SequenceExpression" base="Expression" abstract="yes">
    <variable type="ObjectVector[Expression]" name="nodes"/>
  </class>
  <class name="ScalarSumExpression" base="SequenceExpression">
    <variable type="NewBoolean" name="convertToProbabilities"/>
    <variable type="NewBoolean" name="computeAverage"/>
  </class>
  <class name="VectorSumExpression" base="SequenceExpression">
    <variable type="NewBoolean" name="convertToProbabilities"/>
  </class>
  <class name="CreateSparseVectorExpression" base="SequenceExpression"/>
  <class name="TestExpression" base="Expression">
    <variable type="Expression" name="conditionNode"/>
    <variable type="Expression" name="failureNode"/>
    <variable type="Expression" name="successNode"/>
    <variable type="Expression" name="missingNode"/>
  </class>

  <!-- Domain -->
  <class name="ExpressionDomain" base="Domain"/>

  <!-- Expression Samplers -->
  <class name="ExpressionSampler" base="Sampler" abstract="yes"/>
  <class name="DepthControlledExpressionSampler" base="ExpressionSampler" abstract="yes">
    <variable type="NewPositiveInteger" name="minDepth"/>
    <variable type="NewPositiveInteger" name="maxDepth"/>
  </class>

  <class name="FullExpressionSampler" base="DepthControlledExpressionSampler">
    <constructor arguments="size_t minDepth, size_t maxDepth"/>
  </class>
  
  <class name="GrowExpressionSampler" base="DepthControlledExpressionSampler">
    <constructor arguments="size_t minDepth, size_t maxDepth"/>
  </class>

  <!-- Expression Perturbators -->
  <class name="ExpressionPerturbator" base="Perturbator" abstract="yes"/>
  <class name="ShrinkExpressionPerturbator" base="ExpressionPerturbator">
    <constructor/>
  </class>
  <class name="SwapExpressionPerturbator" base="ExpressionPerturbator">
    <constructor arguments="double functionSelectionProbability"/>
    <variable type="Probability" name="functionSelectionProbability"/>
  </class>
  <class name="InsertExpressionPerturbator" base="ExpressionPerturbator">
    <constructor arguments="size_t maxDepth"/>
    <variable type="NewPositiveInteger" name="maxDepth"/>
  </class>
  <class name="KozaExpressionPerturbator" base="ExpressionPerturbator">
    <constructor arguments="DepthControlledExpressionSamplerPtr sampler, size_t maxRegenerationDepth, size_t maxDepth"/>
    <variable type="DepthControlledExpressionSampler" name="sampler"/>
    <variable type="NewPositiveInteger" name="maxRegenerationDepth"/>
    <variable type="NewPositiveInteger" name="maxDepth"/>
  </class>
  <class name="SubTreeCrossOverExpressionPerturbator" base="BinaryPerturbator">
    <constructor arguments="double functionSelectionProbability, size_t maxDepth"/>
    <variable type="Probability" name="functionSelectionProbability"/>
    <variable type="NewPositiveInteger" name="maxDepth"/>
  </class>

  <!-- Expression RPN -->
  <class name="PostfixExpressionSequence" base="Object">
    <variable type="ObjectVector[Object]" name="sequence"/>
  </class>
  
  <class name="PostfixExpressionTypeState">
    <variable type="NewPositiveInteger" name="depth"/>
    <variable type="ObjectVector[Type]" name="stack"/>
  </class>
  <class name="PostfixExpressionTypeSpace"/>

  <!-- Expression Search States -->
  <class name="ExpressionState" base="SearchState" abstract="yes">
    <variable type="ExpressionDomain" name="domain"/>
    <variable type="NewPositiveInteger" name="maxSize"/>
    <variable type="ObjectVector[Object]" name="trajectory"/>
  </class>

  <class name="PrefixExpressionState" base="ExpressionState">
    <constructor arguments="ExpressionDomainPtr domain, size_t maxSize"/>

    <variable type="NewPositiveInteger" name="numLeafs"/>
    <variable type="ObjectVector[DiscreteDomain]" name="actionsByMaxArity"/>
  </class>

  <class name="PostfixExpressionState" base="ExpressionState">
    <constructor arguments="ExpressionDomainPtr domain, size_t maxSize"/>
    <variable type="NewPositiveInteger" name="maxFunctionArity"/>
    <variable type="ObjectVector[DiscreteDomain]" name="actionsCacheByCase"/>
    <variable type="ObjectVector[Expression]" name="stack"/>
    <variable type="NewBoolean" name="isYielded"/>
  </class>

  <class name="TypedPostfixExpressionState" base="ExpressionState">
    <constructor arguments="ExpressionDomainPtr domain, size_t maxSize"/>

    <variable type="PostfixExpressionTypeSpace" name="typeSearchSpace"/>
    <variable type="PostfixExpressionTypeState" name="typeState"/>
    <variable type="DiscreteDomain" name="availableActions"/>
  </class>

  <!-- Objectives -->
  <class name="AccuracyObjective" base="SupervisedLearningObjective" abstract="yes"/>
  <class name="BinaryAccuracyObjective" base="AccuracyObjective">
    <constructor arguments="TablePtr data, VariableExpressionPtr supervision" returnType="SupervisedLearningObjective"/>
  </class>
  <class name="MultiClassAccuracyObjective" base="AccuracyObjective">
    <constructor arguments="TablePtr data, VariableExpressionPtr supervision" returnType="SupervisedLearningObjective"/>
  </class>
  
  <class name="MSERegressionObjective" base="SupervisedLearningObjective">
    <constructor arguments="TablePtr data, VariableExpressionPtr supervision"/>
  </class>
  
  <class name="RMSERegressionObjective" base="MSERegressionObjective">
    <constructor arguments="TablePtr data, VariableExpressionPtr supervision" returnType="SupervisedLearningObjective"/>
  </class>
  
  <class name="NormalizedRMSERegressionObjective" base="RMSERegressionObjective">
    <constructor arguments="TablePtr data, VariableExpressionPtr supervision" returnType="SupervisedLearningObjective"/>
  </class>

</library>
