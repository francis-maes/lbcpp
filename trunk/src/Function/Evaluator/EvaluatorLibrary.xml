<?xml version="1.0" encoding="UTF-8"?>

<library name="Evaluator" directory="Function/Evaluator">
  <include file="lbcpp/Function/Evaluator.h"/>

  <!-- ScoreObject Base Classes -->
  <class name="ScoreObject" base="NameableObject" abstract="yes">
    <code>
      virtual bool isConvertibleToDouble() const
        {return true;}
      virtual double toDouble(const VariableValue&amp; value) const
      {
        ScoreObjectPtr object = value.getObjectAndCast&lt;ScoreObject&gt;();
        return object ? object->getScoreToMinimize() : 0.0;
      }        
    </code>
  </class>
  <class name="DummyScoreObject" base="ScoreObject"/>
  <class name="CompositeScoreObject" base="ScoreObject">
    <variable type="ObjectVector[ScoreObject]" name="scores"/>
    <variable type="PositiveInteger" name="scoreToMinimizeIndex"/>
  </class>

  <!-- Evaluator Base Classes -->
  <class name="Evaluator" base="Function" abstract="yes"/>
  <class name="SupervisedEvaluator" base="Evaluator" abstract="yes"/>
  <class name="CompositeEvaluator" base="Evaluator"/>
  <class name="ProxyEvaluator" base="Evaluator" abstract="yes"/>
  <class name="CallbackBasedEvaluator" base="Evaluator" abstract="yes">
    <variable type="Evaluator" name="evaluator"/>
  </class>
  
  <!-- Score Enumerations -->
  <enumeration name="BinaryClassificationScore">
    <value name="accuracyScore" oneLetterCode="a"/>
    <value name="f1Score" oneLetterCode="f"/>
    <value name="mccScore" oneLetterCode="m"/>
    <value name="sensitivityAndSpecificityScore" oneLetterCode="s"/>
  </enumeration>

  <!-- Utility Classes -->
  <class name="BinaryClassificationConfusionMatrix" base="ScoreObject">
    <!-- <variable type="BinaryClassificationScore" name="scoreToOptimize" enumeration="yes"/> -->
    <variable type="PositiveInteger" name="truePositive"/>
    <variable type="PositiveInteger" name="falsePositive"/>
    <variable type="PositiveInteger" name="falseNegative"/>
    <variable type="PositiveInteger" name="trueNegative"/>
  </class>

  <class name="ROCScoreObjectElement" base="Object">
    <variable type="Probability" name="falsePositiveRate"/>
    <variable type="Probability" name="recallOrSensitivity"/>
    <variable type="Probability" name="accuracy"/>
    <variable type="Double" name="f1Score"/>
    <variable type="Probability" name="precision"/>
    <variable type="Probability" name="specificity"/>
    <variable type="Double" name="matthewsCorrelation"/>
  </class>

  <class name="ROCScoreObject" base="ScoreObject">
    <variable type="BinaryClassificationScore" name="scoreToOptimize" enumeration="yes"/>
    <variable type="Double" name="bestThreshold"/>
    <variable type="Double" name="bestThresholdScore"/>
    <variable type="BinaryClassificationConfusionMatrix" name="bestConfusionMatrix"/>
    <variable type="GenericVector[BinaryClassificationConfusionMatrix]" name="confusionMatrices"/>
<!--
    <variable type="ObjectVector[Pair[Double, Probability]]" name="precision"/>
    <variable type="ObjectVector[Pair[Double, Probability]]" name="recall"/>
-->
  </class>

  <!-- Regression -->
  <class name="RegressionScoreObject" base="ScoreObject">
    <variable type="Double" name="leastSquares"/>
    <variable type="Double" name="meanSquareError"/>
    <variable type="Double" name="rootMeanSquareError"/>
    <variable type="Double" name="absolute"/>
  </class>
  
  <class name="RegressionEvaluator" base="SupervisedEvaluator">
    <constructor/>
  </class>

  <!-- Binary Classification -->
  <class name="BinaryClassificationEvaluator" base="SupervisedEvaluator">
    <constructor arguments="BinaryClassificationScore scoreToOptimize"/>
    <variable type="BinaryClassificationScore" name="scoreToOptimize" enumeration="yes"/>
  </class>
  
  <class name="ROCAnalysisEvaluator" base="SupervisedEvaluator">
    <constructor arguments="BinaryClassificationScore scoreToOptimize, bool saveConfusionMatrices"/>
    <variable type="BinaryClassificationScore" name="scoreToOptimize" enumeration="yes"/>
  </class>

  <!-- MultiClass Classification -->
  <class name="ClassificationScoreObject" base="ScoreObject">
    <variable type="Probability" name="accuracy"/>
  </class>

  <class name="ClassificationEvaluator" base="SupervisedEvaluator">
    <constructor/>
  </class>
  
  <!-- MultiLabel Classification -->
  <class name="MultiLabelClassificationScoreObject" base="ScoreObject">
    <variable type="Double" name="hammingLoss"/>
    <variable type="Probability" name="accuracy"/>
    <variable type="Probability" name="precision"/>
    <variable type="Probability" name="recall"/>
  </class>
  
  <class name="MultiLabelClassificationEvaluator" base="SupervisedEvaluator">
    <constructor/>
  </class>

  <!-- Ranking -->
  <class name="RankingScoreObject" base="ScoreObject">
    <variable type="ScalarVariableStatistics" name="topRankCost"/>
    <variable type="ScalarVariableStatistics" name="misOrderingCost"/>
  </class>

  <class name="RankingEvaluator" base="SupervisedEvaluator">
    <constructor/>
  </class>
  
  <!-- Default Evaluator -->
  <class name="DefaultSupervisedEvaluator" base="ProxyEvaluator">
    <constructor returnType="Evaluator"/>
  </class>
 
  <!-- Function -->
  <class name="ConcatenateScoreObjectFunction" base="Function">
    <constructor/>
  </class>

  <!-- Misc -->
  <class name="SaveToDirectoryEvaluator" base="Evaluator">
    <constructor arguments="const File&amp; directory, const String&amp; extension"/>
    <variable type="File" name="directory"/>
    <variable type="String" name="extension"/>
  </class>
  
  <class name="ContainerSupervisedEvaluator" base="SupervisedEvaluator">
    <constructor arguments="SupervisedEvaluatorPtr elementEvaluator"/>
    <variable type="SupervisedEvaluator" name="elementEvaluator"/>
  </class>

  <class name="SymmetricMatrixSupervisedEvaluator" base="SupervisedEvaluator">
    <constructor arguments="SupervisedEvaluatorPtr elementEvaluator, size_t minimumDistanceFromDiagonal"/>
    <variable type="SupervisedEvaluator" name="elementEvaluator"/>
    <variable type="PositiveInteger" name="minimumDistanceFromDiagonal"/>
  </class>

</library>
