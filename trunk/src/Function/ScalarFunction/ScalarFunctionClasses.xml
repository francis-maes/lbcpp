<?xml version="1.0" encoding="UTF-8"?>

<file name="ScalarFunction" directory="Function/ScalarFunction">
  <include file="lbcpp/Function/ScalarFunction.h"/>

  <namespace name="lbcpp">

    <class name="ScalarFunction" base="Function" abstract="yes"/>

    <class name="ComposeScalarFunction" base="ScalarFunction">
      <constructor arguments="ScalarFunctionPtr f1, ScalarFunctionPtr f2"/>
      <variable type="ScalarFunction" name="f1"/>
      <variable type="ScalarFunction" name="f2"/>
    </class>

    <class name="MultiplyByScalarFunction" base="ScalarFunction">
      <constructor arguments="ScalarFunctionPtr function, double scalar"/>
      <variable type="ScalarFunction" name="function"/>
      <variable type="Double" name="scalar"/>
    </class>

    <class name="AngleDifferenceScalarFunction" base="ScalarFunction">
      <constructor arguments="double referenceAngle"/>
      <variable type="Double" name="referenceAngle"/>
    </class>

    <class name="AbsFunction" base="ScalarFunction">
      <constructor/>
    </class>

    <class name="SquareFunction" base="ScalarFunction">
      <constructor/>
    </class>

    <class name="AddConstantScalarFunction" base="ScalarFunction">
      <constructor arguments="double constant"/>
      <variable type="Double" name="constant"/>
    </class>
    
    <class name="ScalarFunctionPlusConstant" base="ScalarFunction">
      <constructor arguments="ScalarFunctionPtr function, double constant"/>
      <variable type="ScalarFunction" name="function"/>
      <variable type="Double" name="constant"/>
    </class>

    <class name="BinaryClassificationLossFunction" base="ScalarFunction" abstract="yes"/>
    <class name="HingeLossFunction" base="BinaryClassificationLossFunction">
      <constructor arguments="bool isPositive, double margin"/>
    </class>
    <class name="LogBinomialLossFunction" base="BinaryClassificationLossFunction">
      <constructor arguments="bool isPositive"/>
    </class>

  </namespace>
  
</file>
