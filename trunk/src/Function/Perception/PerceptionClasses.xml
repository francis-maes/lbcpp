<?xml version="1.0" encoding="UTF-8"?>

<file name="Perception" directory="Function/Perception">
  <include file="lbcpp/Function/Perception.h"/>
  <import name="PerceptionFeatures"/>

  <namespace name="lbcpp">

    <!-- Base Classes -->
    <class name="Perception" base="Function" abstract="yes">
      <variable type="DynamicClass" name="outputType"/>
    </class>

    <class name="VariableVectorPerception" base="Perception" abstract="yes"/>

    <class name="DecoratorPerception" base="Perception" abstract="yes">
      <variable type="Perception" name="decorated"/>
    </class>

    <class name="CompositePerception" base="Perception" abstract="yes">
      <variable type="Type" name="inputType"/>
      <variable type="String" name="preferedOutputClassName"/>
      <variable type="GenericVector[Pair[String, Perception]]" name="subPerceptions"/>
    </class>


    <!-- Simple Perceptions -->
    <class name="NullPerception" base="Perception">
      <constructor/>
    </class>

    <class name="IdentityPerception" base="Perception">
      <constructor arguments="TypePtr type"/>
      <variable type="Type" name="type"/>
    </class>

    <class name="FunctionBasedPerception" base="Perception">
      <constructor arguments="FunctionPtr function"/>
      <variable type="Function" name="function"/>
    </class>

    <!-- Container Perceptions -->
    <class name="WindowPerception" base="Perception">
      <constructor arguments="TypePtr elementsType, size_t windowSize, PerceptionPtr subPerception"/>
      <variable type="Type" name="elementsType"/>
      <variable type="Integer" name="windowSize"/>
      <variable type="Perception" name="subPerception"/>
    </class>

    <class name="AccumulatedScores" abstract="yes"/>
    <class name="HistogramPerception" base="Perception">
      <constructor arguments="TypePtr elementsType, bool useCache"/>
      <variable type="Type" name="elementsType"/>
    </class>

    <class name="BoundsProximityPerception" base="Perception">
      <constructor/>
    </class>
    
    <!-- Probability Distribution Perception -->
    <class name="DiscreteProbabilityDistributionPerception" base="Perception">
      <constructor arguments="EnumerationPtr enumeration"/>
      <variable type="Enumeration" name="enumeration"/>
    </class>

    <!-- BiContainer / BiVariable -->
    <class name="BiContainerPerception" base="DecoratorPerception">
      <constructor arguments="size_t windowSize, PerceptionPtr subPerception"/>
      <variable type="Integer" name="windowSize"/>
    </class>

    <class name="BiVariablePerception" base="Perception">
      <constructor arguments="TypePtr firstElementType, TypePtr secondElementType"/>
      <variable type="Type" name="firstElementType"/>
      <variable type="Type" name="secondElementType"/>
    </class>

    <!-- Perception Decorators -->
    <class name="PreprocessPerception" base="DecoratorPerception">
      <constructor arguments="FunctionPtr preProcessingFunction, PerceptionPtr perception"/>
      <variable type="Function" name="preProcessingFunction"/>
    </class>

    <class name="FlattenPerception" base="DecoratorPerception">
      <constructor arguments="PerceptionPtr perception"/>
    </class>

    <!-- Product Perception -->
    <class name="MultiplyDoubleFunction" base="Function">
      <constructor/>
    </class>
    <class name="ProductPerception" base="VariableVectorPerception">
      <constructor arguments="FunctionPtr multiplyFunction, bool symmetricFunction, PerceptionPtr perception1, PerceptionPtr perception2" returnType="Perception"/>
      <variable type="Function" name="multiplyFunction"/>
      <variable type="Boolean" name="symmetricFunction"/>
      <variable type="Boolean" name="swapVariables"/>
      <variable type="Perception" name="perception1"/>
      <variable type="Perception" name="perception2"/>
    </class>

    <class name="ProductWithVariablePerception" base="VariableVectorPerception">
      <constructor arguments="FunctionPtr multiplyFunction, PerceptionPtr perception, TypePtr variableType, bool swapVariables" returnType="Perception"/>
      <variable type="Function" name="multiplyFunction"/>
      <variable type="Perception" name="perception"/>
      <variable type="Type" name="variableType"/>
      <variable type="Boolean" name="swapVariables"/>
    </class>
    
    <!-- Perception Rewriter -->
    <class name="PerceptionRewriteRule" abstract="yes"/>

    <class name="TypeBasedPerceptionRewriteRule" base="PerceptionRewriteRule">
      <constructor arguments="TypePtr type, PerceptionPtr target"/>
      <variable type="Type" name="type"/>
      <variable type="Perception" name="target"/>
    </class>

    <class name="TypeAndStackBasedPerceptionRewriteRule" base="PerceptionRewriteRule">
      <constructor arguments="TypePtr type, const String&amp; stack, PerceptionPtr target"/>
      <variable type="Type" name="type"/>
      <variable type="Vector[String]" name="stack"/>
      <variable type="Perception" name="target"/>
    </class>

    <class name="EnumValueFeaturesPerceptionRewriteRule" base="PerceptionRewriteRule">
      <constructor/>
    </class>

    <class name="BiVariableFeaturesPerceptionRewriteRule" base="PerceptionRewriteRule">
      <constructor arguments="PerceptionPtr perception"/>
      <variable type="Perception" name="perception"/>
    </class>

    <class name="PerceptionRewriter" base="NameableObject">
      <variable type="ObjectVector[PerceptionRewriteRule]" name="rules"/>
    </class>

    <class name="RewritedPerception" base="VariableVectorPerception"/>

  </namespace>

</file>
