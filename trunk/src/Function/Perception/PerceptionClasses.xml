<?xml version="1.0" encoding="UTF-8"?>

<file name="Perception" directory="Function/Perception">
  <include file="lbcpp/Function/Perception.h"/>
  <import name="PerceptionFeatures"/>

  <namespace name="lbcpp">

    <!-- Base Classes -->
    <class name="Perception" base="Function" abstract="yes">
      <variable type="DynamicClass" name="outputType"/>
    </class>

    <class name="DecoratorPerception" base="Perception" abstract="yes">
      <variable type="Perception" name="decorated"/>
    </class>

    <class name="CompositePerception" base="Perception" abstract="yes">
      <variable type="GenericVector[Pair[String, Perception]]" name="subPerceptions"/>
    </class>


    <!-- Simple Perceptions -->
    <class name="NullPerception" base="Perception">
      <constructor/>
    </class>

    <class name="IdentityPerception" base="Perception">
      <constructor arguments="TypePtr type"/>
      <variable type="Type" name="type"/>
    </class>

    <class name="FunctionBasedPerception" base="Perception">
      <constructor arguments="FunctionPtr function"/>
      <variable type="Function" name="function"/>
    </class>
    
    <class name="PreprocessPerception" base="DecoratorPerception">
      <constructor arguments="FunctionPtr preProcessingFunction, PerceptionPtr perception"/>
      <variable type="Function" name="preProcessingFunction"/>
    </class>

    <!-- Structured Perceptions -->
    <class name="WindowPerception" base="Perception">
      <constructor arguments="TypePtr elementsType, size_t windowSize, PerceptionPtr subPerception"/>
      <variable type="Type" name="elementsType"/>
      <variable type="Integer" name="windowSize"/>
      <variable type="Perception" name="subPerception"/>
    </class>
    
    <class name="HistogramPerception" base="Perception">
      <constructor arguments="TypePtr elementsType, bool useCache"/>
      <variable type="Type" name="elementsType"/>
      <variable type="Boolean" name="useCache"/>
    </class>
    
    <class name="BiContainerPerception" base="DecoratorPerception">
      <constructor arguments="size_t windowSize, PerceptionPtr subPerception"/>
      <variable type="Integer" name="windowSize"/>
    </class>
    
    <class name="BiVariablePerception" base="Perception">
      <constructor arguments="TypePtr firstElementType, TypePtr secondElementType"/>
      <variable type="Type" name="firstElementType"/>
      <variable type="Type" name="secondElementType"/>
    </class>

    <!-- Flatten Perception -->
    <class name="FlattenPerception" base="DecoratorPerception">
      <constructor arguments="PerceptionPtr perception"/>
    </class>

    <!-- Rewrite Perception -->
    <class name="PerceptionRewriteRule" abstract="yes"/>
    
    <class name="TypeBasedPerceptionRewriteRule" base="PerceptionRewriteRule">
      <constructor arguments="TypePtr type, PerceptionPtr target"/>
      <variable type="Type" name="type"/>
      <variable type="Perception" name="target"/>
    </class>
    
    <class name="TypeAndStackBasedPerceptionRewriteRule" base="PerceptionRewriteRule">
      <constructor arguments="TypePtr type, const String&amp; stack, PerceptionPtr target"/>
      <variable type="Type" name="type"/>
      <variable type="Vector[String]" name="stack"/>
      <variable type="Perception" name="target"/>
    </class>

    <class name="EnumValueFeaturesPerceptionRewriteRule" base="PerceptionRewriteRule">
      <constructor/>
    </class>

    <class name="BiVariableFeaturesPerceptionRewriteRule" base="PerceptionRewriteRule">
      <constructor arguments="PerceptionPtr perception"/>
      <variable type="Perception" name="perception"/>
    </class>
    
    <class name="PerceptionRewriter" base="NameableObject">
      <variable type="ObjectVector[PerceptionRewriteRule]" name="rules"/>
    </class>   
    
    <class name="RewritedPerception" base="DecoratorPerception">
      <variable type="PerceptionRewriter" name="rewriter"/>
    </class>

  </namespace>
  
</file>
