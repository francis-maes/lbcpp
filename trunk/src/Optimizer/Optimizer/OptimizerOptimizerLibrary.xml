<?xml version="1.0" encoding="UTF-8"?>

<library name="OptimizerOptimizer" directory="Optimizer/Optimizer">

  <include file="lbcpp/Optimizer/Optimizer.h"/>

  <!-- PopulationBasedOptimizer -->
  <class name="SamplerBasedOptimizerState" base="OptimizerState">
    <variable type="Sampler" name="sampler"/>
    <variable type="PositiveInteger" name="numIterations"/>
  </class>

  <class name="PopulationBasedOptimizer" base="Optimizer" abstract="yes">
    <variable type="PositiveInteger" name="numIterations"/>
    <variable type="PositiveInteger" name="populationSize"/>
    <variable type="PositiveInteger" name="numBests"/>
    <variable type="StoppingCriterion" name="stoppingCriterion"/>
    <variable type="Double" name="slowingFactor"/>
    <variable type="Boolean" name="reinjectBest"/>
    <variable type="Boolean" name="verbose"/>
  </class>

  <class name="EDAOptimizer" base="PopulationBasedOptimizer" shortName="eda">
    <constructor arguments="size_t numIterations, size_t populationSize, size_t numBests, StoppingCriterionPtr stoppingCriterion, double slowingFactor, bool reinjectBest, bool verbose" returnType="Optimizer"/>
  </class>

  <class name="AsyncEDAOptimizer" base="PopulationBasedOptimizer">
    <constructor arguments="size_t numIterations, size_t populationSize, size_t numBests, StoppingCriterionPtr stoppingCriterion, double slowingFactor, bool reinjectBest, bool verbose" returnType="Optimizer"/>
  </class>

  <!-- BestFirstSearch -->
  <class name="BestFirstSearchParameter" base="Object">
    <variable type="PositiveInteger" name="index"/>
    <variable type="GenericVector[Double]" name="scores"/>
  </class>

  <class name="BestFirstSearchIteration" base="Object">
    <variable type="GenericVector[BestFirstSearchParameter]" name="parameters"/>
  </class>

  <class name="StreamBasedOptimizerState" base="OptimizerState">
    <variable type="GenericVector[Stream]" name="streams"/>
    <variable type="GenericVector[BestFirstSearchIteration]" name="iterations"/>
  </class>

  <class name="BestFirstSearchOptimizer" base="Optimizer">
    <constructor arguments="const std::vector&lt;StreamPtr&gt;&amp; streams, const File&amp; optimizerStateFile"/>
  </class>

  <!-- CMA/ES -->
  <class name="CMAOptimizerState" base="OptimizerState"/>
  <class name="CMAESOptimizer" base="Optimizer">
    <constructor arguments="size_t numIterations"/>
    <variable type="PositiveInteger" name="numIterations"/>
  </class>


</library>
