<?xml version="1.0" encoding="UTF-8"?>

<file name="NumericalLearningLossFunction" directory="NumericalLearning/LossFunction">
  <include file="lbcpp/NumericalLearning/LossFunctions.h"/>

  

    <!-- Binary Loss Functions -->
    <class name="BinaryClassificationLossFunction" base="ScalarFunction" abstract="yes">
      <variable type="Boolean" name="isPositive"/>
    </class>

    <class name="HingeLossFunction" base="BinaryClassificationLossFunction">
      <constructor arguments="bool isPositive, double margin"/>
    </class>
    <class name="LogBinomialLossFunction" base="BinaryClassificationLossFunction">
      <constructor arguments="bool isPositive"/>
    </class>

    <!-- Multi Class Loss Functions -->
    <class name="MultiClassLossFunction" base="ScalarObjectFunction" abstract="yes">
      <variable type="Enumeration" name="classes"/>
      <variable type="PositiveInteger" name="correctClass"/>
    </class>

    <class name="OneAgainstAllMultiClassLossFunction" base="MultiClassLossFunction">
      <constructor arguments="BinaryClassificationLossFunctionPtr binaryLossFunction, EnumerationPtr classes, size_t correctClass"/>
      <variable type="BinaryClassificationLossFunction" name="binaryLoss"/>
    </class>
    
    <class name="MostViolatedMultiClassLossFunction" base="MultiClassLossFunction">
      <constructor arguments="BinaryClassificationLossFunctionPtr binaryLossFunction, EnumerationPtr classes, size_t correctClass"/>
      <variable type="BinaryClassificationLossFunction" name="binaryLoss"/>
    </class>
    
    <class name="LogBinomialMultiClassLossFunction" base="MultiClassLossFunction">
      <constructor arguments="EnumerationPtr classes, size_t correctClass"/>
    </class>
    
    <!-- Ranking Loss Functions -->
    <class name="RankingLossFunction" base="ScalarObjectFunction" abstract="yes">
      <variable type="GenericVector[Double]" name="costs"/>
    </class>
    
    <class name="AdditiveRankingLossFunction" base="RankingLossFunction" abstract="yes">
      <variable type="BinaryClassificationLossFunction" name="baseLoss"/>
    </class>

    <class name="AllPairsRankingLossFunction" base="AdditiveRankingLossFunction">
      <constructor arguments="BinaryClassificationLossFunctionPtr baseLoss, const std::vector&lt;double&gt;&amp; costs" returnType="RankingLossFunction"/>
    </class>
    
    <class name="MostViolatedPairRankingLossFunction" base="AdditiveRankingLossFunction">
      <constructor arguments="BinaryClassificationLossFunctionPtr baseLoss, const std::vector&lt;double&gt;&amp; costs" returnType="RankingLossFunction"/>
    </class>
    
    <class name="BestAgainstAllRankingLossFunction" base="AdditiveRankingLossFunction">
      <constructor arguments="BinaryClassificationLossFunctionPtr baseLoss, const std::vector&lt;double&gt;&amp; costs" returnType="RankingLossFunction"/>
    </class>

    <class name="BinaryClassificationRankingLossFunction" base="AdditiveRankingLossFunction" abstract="yes"/>
    <class name="F1ScoreRankingLossFunction" base="BinaryClassificationRankingLossFunction">
      <constructor arguments="BinaryClassificationLossFunctionPtr baseLoss, const std::vector&lt;double&gt;&amp; costs" returnType="RankingLossFunction"/>
    </class>
    <class name="MCCRankingLossFunction" base="BinaryClassificationRankingLossFunction">
      <constructor arguments="BinaryClassificationLossFunctionPtr baseLoss, const std::vector&lt;double&gt;&amp; costs" returnType="RankingLossFunction"/>
    </class>

    <!-- Regularizers -->
    <class name="L2RegularizerFunction" base="ScalarObjectFunction">
      <constructor arguments="double weight"/>
      <variable type="Double" name="weight"/>
    </class>

   
</file>
