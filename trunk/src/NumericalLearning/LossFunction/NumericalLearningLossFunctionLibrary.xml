<?xml version="1.0" encoding="UTF-8"?>

<library name="NumericalLearningLossFunction" directory="NumericalLearning/LossFunction">
  <include file="lbcpp/NumericalLearning/LossFunctions.h"/>

  <!-- Regression Loss Functions -->
  <class name="RegressionLossFunction" base="ScalarFunction" abstract="yes">
    <variable type="Double" name="target"/>
  </class>

  <class name="SquareLossFunction" base="RegressionLossFunction">
    <constructor/>
  </class>
  
  <!-- Binary Loss Functions -->
  <class name="BinaryClassificationLossFunction" base="ScalarFunction" abstract="yes">
    <variable type="Boolean" name="isPositive"/>
  </class>

  <class name="HingeLossFunction" base="BinaryClassificationLossFunction">
    <constructor arguments="bool isPositive, double margin"/>
  </class>
  <class name="LogBinomialLossFunction" base="BinaryClassificationLossFunction">
    <constructor arguments="bool isPositive"/>
  </class>
  
  <!-- Ranking Loss Functions -->
  <class name="RankingLossFunction" base="ScalarVectorFunction" abstract="yes">
    <variable type="GenericVector[Double]" name="costs"/>
  </class>
  
  <class name="AdditiveRankingLossFunction" base="RankingLossFunction" abstract="yes">
    <variable type="BinaryClassificationLossFunction" name="baseLoss"/>
  </class>

  <class name="AllPairsRankingLossFunction" base="AdditiveRankingLossFunction">
    <constructor arguments="BinaryClassificationLossFunctionPtr baseLoss, const std::vector&lt;double&gt;&amp; costs" returnType="RankingLossFunction"/>
  </class>
  
  <class name="MostViolatedPairRankingLossFunction" base="AdditiveRankingLossFunction">
    <constructor arguments="BinaryClassificationLossFunctionPtr baseLoss, const std::vector&lt;double&gt;&amp; costs" returnType="RankingLossFunction"/>
  </class>
  
  <class name="BestAgainstAllRankingLossFunction" base="AdditiveRankingLossFunction">
    <constructor arguments="BinaryClassificationLossFunctionPtr baseLoss, const std::vector&lt;double&gt;&amp; costs" returnType="RankingLossFunction"/>
  </class>

  <class name="BinaryClassificationRankingLossFunction" base="AdditiveRankingLossFunction" abstract="yes"/>
  <class name="F1ScoreRankingLossFunction" base="BinaryClassificationRankingLossFunction">
    <constructor arguments="BinaryClassificationLossFunctionPtr baseLoss, const std::vector&lt;double&gt;&amp; costs" returnType="RankingLossFunction"/>
  </class>
  <class name="MCCRankingLossFunction" base="BinaryClassificationRankingLossFunction">
    <constructor arguments="BinaryClassificationLossFunctionPtr baseLoss, const std::vector&lt;double&gt;&amp; costs" returnType="RankingLossFunction"/>
  </class>

  <!-- Regularizers -->
  <class name="L2RegularizerFunction" base="ScalarVectorFunction">
    <constructor arguments="double weight"/>
    <variable type="Double" name="weight"/>
  </class>
   
</library>
