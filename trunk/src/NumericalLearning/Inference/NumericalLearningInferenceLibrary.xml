<?xml version="1.0" encoding="UTF-8"?>

<library name="NumericalLearningInference" directory="NumericalLearning/Inference">

  

    <!--
      -  Atomic Inference
      -->
    <template name="NumericalInferenceParameters">
      <parameter name="weightsType" type="Object"/>

      <variable type="Perception" name="perception"/>
      <variable type="weightsType" name="weights"/>
    </template>
    <class name="NumericalInference" base="Inference" abstract="yes"/>

    <class name="LinearInference" base="NumericalInference">
      <constructor arguments="const String&amp; name, PerceptionPtr perception"/>
    </class>
    <class name="MultiLinearInference" base="NumericalInference">
      <constructor arguments="const String&amp; name, PerceptionPtr perception, ClassPtr outputClass"/>
      <variable type="Class" name="outputClass"/>
    </class>

    <!--
      -  Numerical Supervised Inference
      -->
    <class name="NumericalSupervisedInference" base="StaticDecoratorInference" abstract="yes"/>
    
    <!-- Regression -->
    <class name="RegressionInference" base="NumericalSupervisedInference" abstract="yes"/>

    <class name="SquareRegressionInference" base="RegressionInference">
      <constructor arguments="const String&amp; name, PerceptionPtr perception" returnType="NumericalSupervisedInference"/>
    </class>
    
    <class name="AbsoluteRegressionInference" base="RegressionInference">
      <constructor arguments="const String&amp; name, PerceptionPtr perception" returnType="NumericalSupervisedInference"/>
    </class>
    
    <class name="DihedralAngleRegressionInference" base="RegressionInference">
      <constructor arguments="const String&amp; name, PerceptionPtr perception" returnType="NumericalSupervisedInference"/>
    </class>

    <!-- Binary Classification -->
    <class name="BinaryClassificationInference" base="NumericalSupervisedInference" abstract="yes"/>

    <class name="BinaryLinearSVMInference" base="BinaryClassificationInference">
      <constructor arguments="const String&amp; name, PerceptionPtr perception" returnType="NumericalSupervisedInference"/>
      <constructor arguments="InferencePtr scoreInference" returnType="NumericalSupervisedInference"/>
    </class>

    <class name="BinaryLogisticRegressionInference" base="BinaryClassificationInference">
      <constructor arguments="const String&amp; name, PerceptionPtr perception" returnType="NumericalSupervisedInference"/>
    </class>

    <!-- MultiClass Classification -->
    <class name="MultiClassInference" base="NumericalSupervisedInference" abstract="yes">
      <variable type="Enumeration" name="classes"/>
    </class>

    <class name="MultiClassLinearSVMInference" base="MultiClassInference">
      <constructor arguments="const String&amp; name, PerceptionPtr perception, EnumerationPtr classes, bool updateOnlyMostViolatedClasses" returnType="NumericalSupervisedInference"/>
      <variable type="Boolean" name="updateOnlyMostViolatedClasses"/>
    </class>

    <class name="MultiClassMaxentInference" base="MultiClassInference">
      <constructor arguments="const String&amp; name, PerceptionPtr perception, EnumerationPtr classes" returnType="NumericalSupervisedInference"/>
    </class>

    <!-- Ranking -->
    <class name="LossBasedRankingInference" base="SharedParallelInference">
      <constructor arguments="const String&amp; name, InferencePtr scoreInference"/>
    </class>

    <class name="RankingInference" base="NumericalSupervisedInference" abstract="yes"/>
    
    <class name="AdditiveRankingInference" base="RankingInference" abstract="yes">
      <variable type="DiscriminativeLossFunction" name="baseLoss"/>
    </class>
    
    <class name="MostViolatedPairRankingInference" base="RankingInference">
      <constructor arguments="const String&amp; name, InferencePtr scoreInference, DiscriminativeLossFunctionPtr baseLoss" returnType="NumericalSupervisedInference"/>
    </class>
      
    <class name="BestAgainstAllRankingInference" base="RankingInference">
      <constructor arguments="const String&amp; name, InferencePtr scoreInference, DiscriminativeLossFunctionPtr baseLoss" returnType="NumericalSupervisedInference"/>
    </class>

    <class name="AllPairsRankingInference" base="RankingInference">
      <constructor arguments="const String&amp; name, InferencePtr scoreInference, DiscriminativeLossFunctionPtr baseLoss" returnType="NumericalSupervisedInference"/>
    </class>

    <class name="AllPairsRankingLinearSVMInference" base="AllPairsRankingInference">
      <constructor arguments="const String&amp; name, PerceptionPtr perception" returnType="NumericalSupervisedInference"/>
    </class>
      
    <class name="BinaryClassificationRankingLinearSVMInference" base="AdditiveRankingInference">
      <constructor arguments="const String&amp; name, PerceptionPtr perception, bool optimizeMcc" returnType="NumericalSupervisedInference"/>
      <variable type="Boolean" name="optimizeMcc"/>
    </class>

    <!--
      -  Misc
      -->
    <class name="AddBiasInference" base="Inference">
      <constructor arguments="const String&amp; name, double initialBias"/>
    </class>

    <class name="TransferFunctionDecoratorInference" base="StaticDecoratorInference">
      <constructor arguments="const String&amp; name, InferencePtr decoratedInference, ScalarFunctionPtr transferFunction" returnType="Inference"/>
      <variable type="ScalarFunction" name="transferFunction"/>
    </class>

  
</library>
