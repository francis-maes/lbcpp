<?xml version="1.0" encoding="UTF-8"?>

<file name="Perception" directory="Perception">
  <include file="lbcpp/Perception/Perception.h"/>
  <include file="lbcpp/Perception/PerceptionRewriter.h"/>
           
  <import name="SimplePerception"/>
  <import name="ModifierPerception"/>
  <import name="ContainerPerception"/>
  <import name="FeaturesPerception"/>
  
  <namespace name="lbcpp">
    
    <!-- Perception Base Classes -->
    <class name="Perception" base="Function" abstract="yes">
      <variable type="DynamicClass" name="outputType"/>
    </class>

    <class name="CompositePerception" base="Perception" abstract="yes">
      <variable type="Type" name="inputType"/>
      <variable type="String" name="stringDescription"/>
    </class>

    <!-- Perception Rewriter -->
    <class name="PerceptionRewriteRule" abstract="yes"/>

    <class name="TypeBasedPerceptionRewriteRule" base="PerceptionRewriteRule">
      <constructor arguments="TypePtr type, PerceptionPtr target"/>
      <variable type="Type" name="type"/>
      <variable type="Perception" name="target"/>
    </class>

    <class name="TypeAndStackBasedPerceptionRewriteRule" base="PerceptionRewriteRule">
      <constructor arguments="TypePtr type, const String&amp; stack, PerceptionPtr target"/>
      <variable type="Type" name="type"/>
      <variable type="Vector[String]" name="stack"/>
      <variable type="Perception" name="target"/>
    </class>

    <class name="EnumValueFeaturesPerceptionRewriteRule" base="PerceptionRewriteRule">
      <constructor/>
    </class>

    <class name="PerceptionRewriter" base="NameableObject">
      <variable type="ObjectVector[PerceptionRewriteRule]" name="rules"/>
    </class>

  </namespace>
</file>
