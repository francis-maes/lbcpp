<?xml version="1.0" encoding="UTF-8"?>

<library name="CompositeSampler" directory="Sampler/Composite">

  <class name="ObjectCompositeSampler" base="CompositeSampler">
    <constructor arguments="ClassPtr objectClass, const std::vector&lt;SamplerPtr&gt;&amp; variableSamplers"/>
    <variable type="Class" name="objectClass"/>
  </class>

  <class name="IndependentDoubleVectorSampler" base="CompositeSampler">
    <constructor arguments="EnumerationPtr elementsEnumeration, SamplerPtr elementSamplerModel"/>
    <constructor arguments="size_t numElements, SamplerPtr elementSamplerModel"/>
    <variable type="Enumeration" name="elementsEnumeration"/>
  </class>
  
  <class name="IndependentDoubleMatrixSampler" base="CompositeSampler">
    <constructor arguments="size_t numRows, size_t numColumns, SamplerPtr elementSamplerModel"/>
    <variable type="PositiveInteger" name="numRows"/>
    <variable type="PositiveInteger" name="numColumns"/>
  </class>

  <class name="MixtureSampler" base="CompositeSampler">
    <constructor arguments="const DenseDoubleVectorPtr&amp; probabilities, const std::vector&lt;SamplerPtr&gt;&amp; samplers"/>
    <variable type="DenseDoubleVector[PositiveIntegerEnumeration,Double]" name="probabilities"/>
  </class>
  
  <class name="ZeroOrScalarContinuousSampler" base="CompositeSampler">
    <constructor arguments="DiscreteSamplerPtr equalZeroSampler, ScalarContinuousSamplerPtr scalarSampler"/>
  </class>

  <class name="RejectionSampler" base="DecoratorSampler">
    <constructor arguments="SamplerPtr sampler, FunctionPtr predicate"/>
    <variable type="Function" name="predicate"/>
  </class>

</library>
