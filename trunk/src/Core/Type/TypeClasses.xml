<?xml version="1.0" encoding="UTF-8"?>

<file name="Type" directory="Core/Type">
  <include file="lbcpp/Core/Pair.h"/>
  <include file="lbcpp/Core/Vector.h"/>
  <namespace name="lbcpp">

    <type name="Variable" base="" implementation="TopLevelType"/>

    <!-- Builtin Types -->
    <type name="Nil" base="Variable" implementation="NilType"/>
    <type name="Boolean" base="Variable" implementation="BooleanType"/>
    <type name="Integer" base="Variable" implementation="IntegerType"/>
      <type name="PositiveInteger" base="Integer"/>
        <type name="VariableIndex" base="PositiveInteger"/>

    <type name="EnumValue" base="Integer" implementation="IntegerType"/>

    <type name="Double" base="Variable" implementation="DoubleType"/>
      <type name="PositiveDouble" base="Double"/>
        <type name="NegativeLogProbability" base="PositiveDouble"/>
      <type name="Probability" base="Double" implementation="ProbabilityType"/>

    <type name="String" base="Variable" implementation="StringType"/>
      <type name="File" base="String" implementation="FileType"/>
    
    <!-- Object -->
    <class name="Object" base="Variable" abstract="yes">
      <!-- <variable type="Class" name="thisClass"/> : bad idea: induces moult complexity on DenseDoubleObjects -->
    </class>
    
    <class name="NameableObject" base="Object" abstract="yes">
      <variable type="String" name="name"/>
    </class>

    <!-- Type -->
    <class name="Type" base="NameableObject" abstract="yes">
      <variable type="Type" name="baseType"/>
      <variable type="TemplateType" name="templateType"/>
      <variable type="ObjectVector[Type]" name="templateArguments"/>
      <code>
        virtual VariableValue createFromString(ExecutionContext&amp; context, const String&amp; value) const
          {return VariableValue(context.getType(value));}

        virtual VariableValue createFromXml(XmlImporter&amp; importer) const
        {
          String text = importer.getAllSubText().trim();
          if (text.isNotEmpty())
            return createFromString(importer.getContext(), importer.getAllSubText());
          else
            return VariableValue(Type::loadUnnamedTypeFromXml(importer));
        }

        virtual void destroy(VariableValue&amp; value) const
          {value.clearObject();}

        virtual void copy(VariableValue&amp; dest, const VariableValue&amp; source) const
          {dest.setObject(source.getObjectPointer());}
      </code>
    </class>

    <class name="Enumeration" base="Type" abstract="yes">
      <variable type="String" name="oneLetterCodes"/>
      <code>
        virtual VariableValue createFromString(ExecutionContext&amp; context, const String&amp; value) const
          {return Type::createFromString(context, value);}

        virtual VariableValue createFromXml(XmlImporter&amp; importer) const
          {return Type::createFromXml(importer);}
      
        virtual void destroy(VariableValue&amp; value) const
          {Type::destroy(value);}

        virtual void copy(VariableValue&amp; dest, const VariableValue&amp; source) const
          {Type::copy(dest, source);}
      </code>
    </class>

    <class name="Class" base="Type" abstract="yes">
      <code>
      virtual VariableValue createFromString(ExecutionContext&amp; context, const String&amp; value) const
        {return Type::createFromString(context, value);}

      virtual VariableValue createFromXml(XmlImporter&amp; importer) const
        {return Type::createFromXml(importer);}
      
      virtual void destroy(VariableValue&amp; value) const
        {Type::destroy(value);}

      virtual void copy(VariableValue&amp; dest, const VariableValue&amp; source) const
        {Type::copy(dest, source);}
      </code>
    </class>
    <class name="DefaultClass" base="Class">
      <code>
      virtual void destroy(VariableValue&amp; value) const
        {Type::destroy(value);}

      virtual void copy(VariableValue&amp; dest, const VariableValue&amp; source) const
        {Type::copy(dest, source);}
      </code>
    </class>


    <!-- Template Type -->
    <class name="TemplateType" base="NameableObject" abstract="yes"/>
    
  </namespace>
</file>
