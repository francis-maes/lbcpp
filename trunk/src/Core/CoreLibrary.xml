<?xml version="1.0" encoding="UTF-8"?>

<library name="Core" directory="Core">
  <import name="Type" pre="yes"/>

  <include file="lbcpp/Core/Pair.h"/>
  <include file="lbcpp/Core/Vector.h"/>
  <include file="lbcpp/Core/DynamicObject.h"/>

  <!-- Pair -->
  <template name="Pair" base="Object">
    <parameter name="firstType" type="Variable"/>
    <parameter name="secondType" type="Variable"/>

    <variable type="firstType" name="first"/>
    <variable type="secondType" name="second"/>
  </template>
  
  <!-- Container -->
  <template name="Container" base="Object" abstract="yes">
    <parameter name="elementsType"/>
  </template>
  
  <!-- Vector -->
  <template name="Vector" base="Container[elementsType]" abstract="yes">
    <parameter name="elementsType"/>
  </template>

  <template name="GenericVector" base="Vector[elementsType]">
    <parameter name="elementsType"/>
    <constructor arguments="TypePtr elementsType, size_t initialSize" parameters="elementsType"/>
  </template>

  <template name="ObjectVector" base="Vector[elementsType]">
    <parameter name="elementsType"/>
    <constructor arguments="TypePtr elementsType, size_t initialSize" parameters="elementsType"/>
  </template>

  <class name="BooleanVector" base="Vector[Boolean]">
    <constructor arguments="size_t initialSize"/>
  </class>

  <class name="VariableVector" base="Vector[Variable]">
    <constructor arguments="size_t initialSize"/>
  </class>
  
  <!-- Dynamic Object -->
  <class name="DynamicClass" base="DefaultClass" abstract="yes"/>
  
  <class name="UnnamedDynamicClass" base="DynamicClass"/>

  <template name="EnumBasedDoubleVector" base="Object" autoimpl="yes">
    <parameter name="enumeration" type="EnumValue"/>
    <parameter name="variablesType" type="Double"/>
    <code>
      virtual size_t getNumMemberVariables() const
        {return getEnumeration()->getNumElements();}
        
      virtual TypePtr getMemberVariableType(size_t index) const
        {return getVariablesType();}
        
      virtual String getMemberVariableName(size_t index) const
        {return getEnumeration()->getElementName(index);}
        
      virtual void createObjectVariables()
      {
        EnumerationPtr enumeration = getEnumeration();
        size_t n = enumeration->getNumElements();
        TypePtr variablesType = getVariablesType();
        for (size_t i = 0; i &lt; n; ++i)
          addMemberVariable(defaultExecutionContext(), variablesType, enumeration->getElementName(i));
      }
       
      EnumerationPtr getEnumeration() const
      {
        jassert(getNumTemplateArguments() == 2);
        EnumerationPtr enumeration = getTemplateArgument(0).dynamicCast&lt;Enumeration&gt;();
        jassert(enumeration);
        return enumeration;
      }
         
      TypePtr getVariablesType() const
        {jassert(getNumTemplateArguments() == 2); return getTemplateArgument(1);}
    </code>
  </template>
  
  <template name="OneSubObjectPerInputVariable" base="Object" autoimpl="yes">
    <parameter name="inputClass" type="Object"/>
    <parameter name="outputVariablesType" type="Variable"/>
    <code>
      virtual void createObjectVariables()
      {
        jassert(getNumTemplateArguments() == 2);
        ClassPtr inputClass = getTemplateArgument(0).dynamicCast&lt;Class&gt;();
        TypePtr outputVariablesType = getTemplateArgument(1);
        jassert(inputClass);
        size_t n = inputClass->getNumMemberVariables();
        for (size_t i = 0; i &lt; n; ++i)
          addMemberVariable(defaultExecutionContext(), outputVariablesType, inputClass->getMemberVariableName(i));
      }
    </code>
  </template>
</library>
