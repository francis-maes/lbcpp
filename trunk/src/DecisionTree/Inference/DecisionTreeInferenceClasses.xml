<?xml version="1.0" encoding="UTF-8"?>

<file name="DecisionTreeInference" directory="DecisionTree/Inference">

  <include file="lbcpp/ProbabilityDistribution/ProbabilityDistributionBuilder.h"/>
    
  <namespace name="lbcpp">

    <class name="BinaryDecisionTree"/>

    <class name="BinaryDecisionTreeInference" base="Inference">
      <variable type="Perception" name="perception"/>
      <variable type="BinaryDecisionTree" name="tree"/>
    </class>

    <class name="RegressionBinaryDecisionTreeInference" base="BinaryDecisionTreeInference"/>
    <class name="BinaryClassificationBinaryDecisionTreeInference" base="BinaryDecisionTreeInference"/>
    <class name="ClassificationBinaryDecisionTreeInference" base="BinaryDecisionTreeInference">
      <variable type="Enumeration" name="classes"/>
    </class>

    <class name="SingleExtraTreeInferenceLearner" base="Inference">
      <variable type="Integer" name="numAttributeSamplesPerSplit"/>
      <variable type="Integer" name="minimumSizeForSplitting"/>
    </class>
    
    <code>
      static inline InferencePtr extraTreeInferenceLearner(size_t numAttributeSamplesPerSplit, size_t minimumSizeForSplitting, ProbabilityDistributionBuilderPtr builder)
        {return new SingleExtraTreeInferenceLearner(numAttributeSamplesPerSplit, minimumSizeForSplitting, builder);}

      InferencePtr regressionExtraTreeInference(ExecutionContext&amp; context, const String&amp; name, PerceptionPtr perception, size_t numTrees, size_t numAttributeSamplesPerSplit, size_t minimumSizeForSplitting)
      {
        InferencePtr decisionTreeModel = new RegressionBinaryDecisionTreeInference(name, perception);
        return new MeanScalarParallelVoteInference(context, name, numTrees, decisionTreeModel,
            extraTreeInferenceLearner(numAttributeSamplesPerSplit, minimumSizeForSplitting, gaussianProbabilityDistributionBuilder()));
      }
      
      InferencePtr binaryClassificationExtraTreeInference(ExecutionContext&amp; context, const String&amp; name, PerceptionPtr perception, size_t numTrees, size_t numAttributeSamplesPerSplit, size_t minimumSizeForSplitting)
      {
        //InferencePtr decisionTreeModel = new BinaryClassificationBinaryDecisionTreeInference(name, perception);
        //return new MeanScalarParallelVoteInference(context, name, numTrees, decisionTreeModel,
        //  extraTreeInferenceLearner(numAttributeSamplesPerSplit, minimumSizeForSplitting));
        jassert(false); return InferencePtr();
      }
      
      InferencePtr classificationExtraTreeInference(ExecutionContext&amp; context, const String&amp; name, PerceptionPtr perception, EnumerationPtr classes, size_t numTrees, size_t numAttributeSamplesPerSplit, size_t minimumSizeForSplitting)
      {
        InferencePtr decisionTreeModel = new ClassificationBinaryDecisionTreeInference(name, perception, classes);
        return new MajorityClassParallelVoteInference(context, name, numTrees, decisionTreeModel,
          extraTreeInferenceLearner(numAttributeSamplesPerSplit, minimumSizeForSplitting, enumerationProbabilityDistributionBuilder(classes)));
      }
    </code>
    
  </namespace>
  
</file>
