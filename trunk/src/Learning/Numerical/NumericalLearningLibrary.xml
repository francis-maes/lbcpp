<?xml version="1.0" encoding="UTF-8"?>

<library name="NumericalLearning" directory="Learning/Numerical">

  <!-- Learning Parameters -->
  <class name="StochasticGDParameters" base="LearnerParameters" shortName="sgd">
    <variable type="Function" name="lossFunction"/>
    <variable type="IterationFunction" name="learningRate"/>
    <variable type="StoppingCriterion" name="stoppingCriterion"/>
    <variable type="PositiveInteger" name="maxIterations"/>
    <variable type="Boolean" name="doPerEpisodeUpdates"/>
    <variable type="Boolean" name="normalizeLearningRate"/>
    <variable type="Boolean" name="restoreBestParameters"/>
    <variable type="Boolean" name="randomizeExamples"/>
    <variable type="Boolean" name="evaluateAtEachIteration"/>
  </class>
  
  <!-- Online Learner -->
  <class name="GradientDescentOnlineLearner" base="OnlineLearner" abstract="yes">
    <variable type="Function" name="lossFunction"/>
    <variable type="IterationFunction" name="learningRate"/>
    <variable type="Boolean" name="normalizeLearningRate"/>
    <variable type="PositiveInteger" name="epoch"/>
  </class>
  
  <class name="StochasticGDOnlineLearner" base="GradientDescentOnlineLearner">
    <constructor arguments="FunctionPtr lossFunction, IterationFunctionPtr learningRate, bool normalizeLearningRate" returnType="OnlineLearner"/>
  </class>

  <class name="PerEpisodeGDOnlineLearner" base="GradientDescentOnlineLearner">
    <constructor arguments="FunctionPtr lossFunction, IterationFunctionPtr learningRate, bool normalizeLearningRate" returnType="OnlineLearner"/>
  </class>

  <!-- Low-level Learnable Functions -->
  <class name="AddBiasLearnableFunction" base="Function">
    <constructor arguments="BinaryClassificationScore scoreToOptimize, double initialBias"/>
    <variable type="BinaryClassificationScore" name="scoreToOptimize" enumeration="yes"/>
    <variable type="Double" name="bias"/>
  </class>
  <class name="AddBiasBatchLearner" base="BatchLearner">
    <constructor arguments="BinaryClassificationScore scoreToOptimize"/>
    <variable type="BinaryClassificationScore" name="scoreToOptimize" enumeration="yes"/>
  </class>

  <class name="NumericalLearnableFunction" base="Function" abstract="yes">
    <variable type="Enumeration" name="parametersEnumeration"/>
  </class>
  
  <class name="LinearLearnableFunction" base="NumericalLearnableFunction">
    <constructor/>
    <variable type="DenseDoubleVector[EnumValue,Double]" name="parameters"/>
  </class>

  <class name="MultiLinearLearnableFunction" base="NumericalLearnableFunction">
    <constructor/>
    <variable type="CompositeDoubleVector[EnumValue,Double]" name="parameters"/>
  </class>

  <class name="RankingLearnableFunction" base="NumericalLearnableFunction">
    <constructor arguments="NumericalLearnableFunctionPtr scoringFunction"/>
    <variable type="NumericalLearnableFunction" name="scoringFunction"/>
  </class>

  <!-- High-level Learnable Functions -->
  <class name="SupervisedNumericalFunction" base="CompositeFunction" abstract="yes">
    <variable type="LearnerParameters" name="learnerParameters"/>
    <variable type="NumericalLearnableFunction" name="learnableFunction"/>
  </class>

  <class name="LinearRegressor" base="SupervisedNumericalFunction" shortName="linearRegressor">
    <constructor arguments="LearnerParametersPtr learnerParameters" returnType="Function"/>
  </class>
  
  <class name="LinearBinaryClassifier" base="SupervisedNumericalFunction" shortName="linearBinaryClassifier">
    <constructor arguments="LearnerParametersPtr learnerParameters, bool incorporateBias, BinaryClassificationScore scoreToOptimize" returnType="Function"/>
    <variable type="Boolean" name="incorporateBias"/>
    <variable type="BinaryClassificationScore" name="scoreToOptimize" enumeration="yes"/>
  </class>

  <class name="MultiClassScoresToDistributionFunction" base="SimpleUnaryFunction"/>
  <class name="LinearMultiClassClassifier" base="SupervisedNumericalFunction" shortName="linearBinaryClassifier">
    <constructor arguments="LearnerParametersPtr learnerParameters" returnType="Function"/>
  </class>

  <class name="LinearRankingMachine" base="SupervisedNumericalFunction" shortName="linearRanker">
    <constructor arguments="LearnerParametersPtr learnerParameters" returnType="Function"/>
  </class>

  <class name="LinearLearningMachine" base="ProxyFunction" shortName="linearLearningMachine">
    <constructor arguments="LearnerParametersPtr learnerParameters" returnType="Function"/>
    <variable type="LearnerParameters" name="learnerParameters"/>
  </class>
  
</library>
