<?xml version="1.0" encoding="UTF-8"?>

<library name="NumericalLearning" directory="Learning/Numerical">

  <!-- Learning Parameters -->
  <class name="StochasticGDParameters" base="LearnerParameters">
    <variable type="Function" name="lossFunction"/>
    <variable type="IterationFunction" name="learningRate"/>
    <variable type="StoppingCriterion" name="stoppingCriterion"/>
    <variable type="PositiveInteger" name="maxIterations"/>
    <variable type="Evaluator" name="evaluator"/>
    <variable type="Boolean" name="doPerEpisodeUpdates"/>
    <variable type="Boolean" name="normalizeLearningRate"/>
    <variable type="Boolean" name="restoreBestParameters"/>
    <variable type="Boolean" name="randomizeExamples"/>
  </class>
  
  <!-- Online Learner -->
  <class name="GradientDescentOnlineLearner" base="OnlineLearner" abstract="yes">
    <variable type="Function" name="lossFunction"/>
    <variable type="IterationFunction" name="learningRate"/>
    <variable type="Boolean" name="normalizeLearningRate"/>
    <variable type="PositiveInteger" name="epoch"/>
  </class>
  
  <class name="StochasticGDOnlineLearner" base="GradientDescentOnlineLearner">
    <constructor arguments="FunctionPtr lossFunction, IterationFunctionPtr learningRate, bool normalizeLearningRate" returnType="OnlineLearner"/>
  </class>

  <class name="PerEpisodeGDOnlineLearner" base="GradientDescentOnlineLearner">
    <constructor arguments="FunctionPtr lossFunction, IterationFunctionPtr learningRate, bool normalizeLearningRate" returnType="OnlineLearner"/>
  </class>

  <!-- Low-level Learnable Functions -->
  <class name="NumericalLearnableFunction" base="LearnableFunction" abstract="yes"/>
  
  <class name="LinearLearnableFunction" base="NumericalLearnableFunction">
    <constructor/>
  </class>

  <class name="MultiLinearLearnableFunction" base="NumericalLearnableFunction">
    <constructor/>
  </class>

  <!-- High-level Learnable Functions -->
  <class name="SupervisedNumericalFunction" base="FrameBasedFunction" abstract="yes">
    <variable type="LearnerParameters" name="learnerParameters"/>
  </class>

  <class name="LinearRegressor" base="SupervisedNumericalFunction" shortName="linearRegressor">
    <constructor arguments="LearnerParametersPtr learnerParameters"/>
  </class>
  
  <class name="LinearBinaryClassifier" base="SupervisedNumericalFunction" shortName="linearBinaryClassifier">
    <constructor arguments="LearnerParametersPtr learnerParameters"/>
  </class>
  
  <class name="LinearMultiClassClassifier" base="SupervisedNumericalFunction" shortName="linearBinaryClassifier">
    <constructor arguments="LearnerParametersPtr learnerParameters"/>
  </class>

  <class name="LinearLearningMachine" base="ProxyFunction" shortName="linearLearningMachine">
    <constructor arguments="LearnerParametersPtr learnerParameters" returnType="Function"/>
    <variable type="LearnerParameters" name="learnerParameters"/>
  </class>
  
</library>
