<?xml version="1.0" encoding="UTF-8"?>

<library name="ProbabilityDistribution" directory="ProbabilityDistribution">

  <include file="lbcpp/ProbabilityDistribution/ProbabilityDistribution.h"/>
  <include file="lbcpp/ProbabilityDistribution/DiscreteProbabilityDistribution.h"/>
  <include file="lbcpp/ProbabilityDistribution/ContinuousProbabilityDistribution.h"/>
  <include file="lbcpp/ProbabilityDistribution/MultiVariateProbabilityDistribution.h"/>

  <!-- Probability Distribution -->
  <class name="ProbabilityDistribution" base="Object" abstract="yes"/>

  <!-- Discrete Probability Distribution -->
  <class name="DiscreteProbabilityDistribution" base="ProbabilityDistribution" abstract="yes"/>

  <class name="BernoulliDistribution" base="DiscreteProbabilityDistribution">
    <variable type="Double" name="pTrue"/>
    <variable type="Double" name="pFalse"/>
  </class>
  
  <template name="EnumerationProbabilityDistribution" base="DiscreteProbabilityDistribution">
    <parameter name="enumeration" type="EnumValue"/>

    <code>
    EnumerationPtr getEnumeration() const
      {return getTemplateArgument(0).staticCast&lt;Enumeration&gt;();}

    virtual size_t getObjectNumVariables() const
      {return getEnumeration()->getNumElements() + 1;}

    virtual Variable getObjectVariable(const Object* pthis, size_t index) const
    {
      const EnumerationProbabilityDistribution* distribution = dynamic_cast&lt;const EnumerationProbabilityDistribution* &gt;(pthis);
      return distribution ? Variable(distribution->values[index], probabilityType) : Variable::missingValue(probabilityType);
    }

    virtual void setObjectVariable(ExecutionContext&amp; context, Object* pthis, size_t index, const Variable&amp; subValue) const
    {
      EnumerationProbabilityDistribution* distribution = dynamic_cast&lt;EnumerationProbabilityDistribution* &gt;(pthis);
      if (distribution)
      {
        if (!distribution->values.size())
          distribution->values.resize(distribution->getEnumeration()->getNumElements() + 1, 0.0);

        jassert(subValue.isDouble());
        jassert(index &lt; distribution->values.size());
        distribution->values[index] = subValue.getDouble();
      }
    }

    virtual TypePtr getObjectVariableType(size_t index) const
      {return probabilityType;}

    virtual String getObjectVariableName(size_t index) const
      {return T("p[") + Variable(index, getEnumeration()).toString() + T("]");}
    </code>
  </template>
  
  <!-- Continuous Probability Distribution -->
  <class name="ContinuousProbabilityDistribution" base="ProbabilityDistribution" abstract="yes"/>

  <class name="UniformProbabilityDistribution" base="ContinuousProbabilityDistribution">
    <variable type="Double" name="minimum"/>
    <variable type="Double" name="maximum"/>
  </class>

  <class name="GaussianProbabilityDistribution" base="ContinuousProbabilityDistribution">
    <variable type="Double" name="mean"/>
    <variable type="Double" name="variance"/>
  </class>
  
  <!-- MultiVariate Probability Distribution -->
  <class name="MultiVariateProbabilityDistribution" base="ProbabilityDistribution" abstract="yes"/>
  
  <template name="IndependentMultiVariateProbabilityDistribution" base="MultiVariateProbabilityDistribution">
    <parameter name="variableClass" type="Object"/>
    
    <variable type="ObjectVector[ProbabilityDistribution]" name="distributions"/>
  </template>
    
  <import name="ProbabilityDistributionBuilder"/>
  
</library>
