<?xml version="1.0" encoding="UTF-8"?>

<library name="LuapeFunction" directory="Luape/Function">

  <!-- Luape Functions - Booleans -->
  <class name="BinaryBooleanLuapeFunction" base="HomogeneousBinaryLuapeFunction" abstract="yes"/>
  <class name="AndBooleanLuapeFunction" base="BinaryBooleanLuapeFunction">
    <constructor returnType="LuapeFunction"/>
  </class>
  <class name="EqualBooleanLuapeFunction" base="BinaryBooleanLuapeFunction">
    <constructor returnType="LuapeFunction"/>
  </class>

  <!-- Luape Functions - Integers -->
  <class name="BinaryIntegerLuapeFunction" base="HomogeneousBinaryLuapeFunction" abstract="yes"/>
  <class name="AddIntegerLuapeFunction" base="BinaryIntegerLuapeFunction">
    <constructor returnType="LuapeFunction"/>
  </class>
  <class name="SubIntegerLuapeFunction" base="BinaryIntegerLuapeFunction">
    <constructor returnType="LuapeFunction"/>
  </class>
  <class name="MulIntegerLuapeFunction" base="BinaryIntegerLuapeFunction">
    <constructor returnType="LuapeFunction"/>
  </class>
  <class name="DivIntegerLuapeFunction" base="BinaryIntegerLuapeFunction">
    <constructor returnType="LuapeFunction"/>
  </class>
  
  <!-- Luape Functions - Doubles -->
  <class name="UnaryDoubleLuapeFunction" base="HomogeneousBinaryLuapeFunction" abstract="yes"/>
  
  <class name="LogDoubleLuapeFunction" base="UnaryDoubleLuapeFunction">
    <constructor returnType="LuapeFunction"/>
  </class>

  <class name="NormalizerLuapeFunction" base="HomogeneousUnaryLuapeFunction">
    <constructor returnType="LuapeFunction"/>
  </class>

  <class name="BinaryDoubleLuapeFunction" base="HomogeneousBinaryLuapeFunction" abstract="yes"/>
  <class name="AddDoubleLuapeFunction" base="BinaryDoubleLuapeFunction">
    <constructor returnType="LuapeFunction"/>
  </class>
  <class name="SubDoubleLuapeFunction" base="BinaryDoubleLuapeFunction">
    <constructor returnType="LuapeFunction"/>
  </class>
  <class name="MulDoubleLuapeFunction" base="BinaryDoubleLuapeFunction">
    <constructor returnType="LuapeFunction"/>
  </class>
  <class name="DivDoubleLuapeFunction" base="BinaryDoubleLuapeFunction">
    <constructor returnType="LuapeFunction"/>
  </class>
  <class name="GreaterThanDoubleLuapeFunction" base="LuapeFunction">
    <constructor returnType="LuapeFunction"/>
  </class>

  <!-- Luape Functions - Enumerations -->
  <class name="EqualsConstantEnumLuapeFunction" base="LuapeFunction">
    <constructor arguments="EnumerationPtr enumeration, size_t value"/>
    <variable type="Enumeration" name="enumeration"/>
    <variable type="PositiveInteger" name="value"/>
  </class>

  <!-- Luape Functions - Objects -->
  <class name="UnaryObjectLuapeFuntion" base="LuapeFunction" abstract="yes"/>
  <class name="GetVariableLuapeFunction" base="UnaryObjectLuapeFuntion">
    <constructor arguments="ClassPtr inputClass, size_t variableIndex" returnType="LuapeFunction"/>
    <constructor arguments="ClassPtr inputClass, const String&amp; variableName" returnType="LuapeFunction"/>
    <variable type="Class" name="inputClass"/>
    <variable type="PositiveInteger" name="variableIndex"/>
  </class>
  <class name="GetContainerLengthLuapeFunction" base="LuapeFunction">
    <constructor/>
  </class>
  <class name="GetDoubleVectorElementLuapeFunction" base="LuapeFunction">
    <constructor arguments="EnumerationPtr enumeration, size_t index"/>
    <variable type="Enumeration" name="enumeration"/>
    <variable type="PositiveInteger" name="index"/>
  </class>

  <!-- Luape Functions - Special -->
  <class name="StumpLuapeFunction" base="LuapeFunction">
    <constructor arguments="double threshold"/>
    <variable type="Double" name="threshold"/>
  </class>
  
</library>
