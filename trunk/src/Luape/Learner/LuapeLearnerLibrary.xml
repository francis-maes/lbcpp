<?xml version="1.0" encoding="UTF-8"?>

<library name="LuapeLearner" directory="Luape/Learner">
  <include file="lbcpp/Luape/LuapeLearner.h"/>
  
  <!-- Meta Learners -->
  <class name="EnsembleLearner" base="LuapeLearner">
    <constructor arguments="const LuapeLearnerPtr&amp; baseLearner, size_t ensembleSize"/>
    <variable type="LuapeLearner" name="baseLearner"/>
    <variable type="PositiveInteger" name="ensembleSize"/>
  </class>
  <class name="CompositeLearner" base="LuapeLearner">
    <constructor arguments="const LuapeLearnerPtr&amp; learner1, const LuapeLearnerPtr&amp; learner2"/>
    <constructor arguments="const std::vector&lt;LuapeLearnerPtr&gt;&amp; learners"/>
    <variable type="ObjectVector[LuapeLearner]" name="learners"/>
  </class>

  <!-- Boosting -->
  <class name="BoostingLearner" base="IterativeLearner" abstract="yes">
    <variable type="WeakLearner" name="weakLearner"/>
  </class>
  
  <!-- Boosting with weights -->
  <class name="WeightBoostingLearner" base="BoostingLearner" abstract="yes"/>
  <class name="AdaBoostLearner" base="WeightBoostingLearner">
    <constructor arguments="WeakLearnerPtr weakLearner, size_t maxIterations" returnType="IterativeLearner"/>
  </class>
  <class name="AdaBoostMHLearner" base="WeightBoostingLearner" abstract="yes"/>
  <class name="DiscreteAdaBoostMHLearner" base="AdaBoostMHLearner">
    <constructor arguments="WeakLearnerPtr weakLearner, size_t maxIterations" returnType="IterativeLearner"/>
  </class>
  <class name="RealAdaBoostMHLearner" base="AdaBoostMHLearner">
    <constructor arguments="WeakLearnerPtr weakLearner, size_t maxIterations" returnType="IterativeLearner"/>
  </class>

  <!-- Gradient Boosting -->
  <class name="GradientBoostingLearner" base="BoostingLearner" abstract="yes"/>
  <class name="L2BoostingLearner" base="GradientBoostingLearner">
    <constructor arguments="WeakLearnerPtr weakLearner, size_t maxIterations, double learningRate" returnType="IterativeLearner"/>
  </class>
  
  <class name="RankingGradientBoostingLearner" base="GradientBoostingLearner">
    <constructor arguments="WeakLearnerPtr weakLearner, size_t maxIterations, double learningRate, RankingLossFunctionPtr rankingLoss" returnType="IterativeLearner"/>
    <variable type="RankingLossFunction" name="rankingLoss"/>
  </class>
  
  <!-- Gradient Descent -->
  <class name="GradientDescentLearner" base="IterativeLearner" abstract="yes">
    <variable type="IterationFunction" name="learningRate"/>
  </class>
  <class name="ClassifierSGDLearner" base="GradientDescentLearner">
    <constructor arguments="MultiClassLossFunctionPtr lossFunction, IterationFunctionPtr learningRate, size_t maxIterations" returnType="IterativeLearner"/>
    <variable type="MultiClassLossFunction" name="lossFunction"/>
  </class>

  <!-- Structure Generation -->
  <class name="GenerateTestNodesLearner" base="LuapeLearner">
    <constructor arguments="LuapeNodeBuilderPtr nodeBuilder"/>
    <variable type="LuapeNodeBuilder" name="nodeBuilder"/>
  </class>

  <!-- Weak Learners -->
  <class name="ExactWeakLearner" base="WeakLearner">
    <constructor arguments="LuapeNodeBuilderPtr nodeBuilder"/>
    <variable type="LuapeNodeBuilder" name="nodeBuilder"/>
  </class>

  <class name="LaminatingWeakLearner" base="WeakLearner">
    <constructor arguments="LuapeNodeBuilderPtr nodeBuilder, double relativeBudget, size_t minExamplesForLaminating"/>
    <variable type="LuapeNodeBuilder" name="nodeBuilder"/>
    <variable type="Double" name="relativeBudget"/>
    <variable type="PositiveInteger" name="minExamplesForLaminating"/>
  </class>

  <class name="BanditBasedWeakLearner" base="WeakLearner">
    <constructor arguments="LuapeNodeBuilderPtr nodeBuilder, double relativeBudget, double miniBatchRelativeSize"/>
    <variable type="LuapeNodeBuilder" name="nodeBuilder"/>
    <variable type="Double" name="relativeBudget"/>
    <variable type="Double" name="miniBatchRelativeSize"/>
  </class>

  <class name="BinaryTreeWeakLearner" base="WeakLearner">
    <constructor arguments="WeakLearnerPtr conditionLearner, WeakLearnerPtr subLearner"/>
    <variable type="WeakLearner" name="conditionLearner"/>
    <variable type="WeakLearner" name="subLearner"/>
  </class>

  <class name="OptimizerBasedSequentialWeakLearner" base="WeakLearner">
    <constructor arguments="OptimizerPtr optimizer, size_t complexity"/>
    <variable type="Optimizer" name="optimizer"/>
    <variable type="PositiveInteger" name="complexity"/>
  </class>
  
</library>
