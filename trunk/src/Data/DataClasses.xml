<?xml version="1.0" encoding="UTF-8"?>

<file name="Data" directory="Data">
  <import name="Type" pre="yes"/>
  <import name="Stream"/>
  <import name="Container"/>

  <include file="lbcpp/Data/Pair.h"/>
  <include file="lbcpp/Data/DynamicObject.h"/>
  <include file="lbcpp/Data/RandomGenerator.h"/>
  <include file="lbcpp/Data/ProbabilityDistribution.h"/>
  <include file="lbcpp/Data/RandomVariable.h"/>
  <include file="lbcpp/Data/Cache.h"/>

  <namespace name="lbcpp">
    
    <!-- Pair -->
    <template name="Pair" base="Object">
      <parameter name="firstType" type="Variable"/>
      <parameter name="secondType" type="Variable"/>

      <variable type="firstType" name="first"/>
      <variable type="secondType" name="second"/>

      <code>
        virtual size_t getNumElements(const VariableValue&amp; value) const
          {return 2;}
        virtual Variable getElement(const VariableValue&amp; value, size_t index) const
        {
          PairPtr pair = value.getObjectAndCast&lt;Pair&gt;();
          return pair ? (index == 0 ? pair->getFirst() : pair->getSecond()) : Variable();
        }
        virtual String getElementName(const VariableValue&amp; value, size_t index) const
          {return index ? T("second") : T("first");}
      </code>
  
    </template>
    
    <!-- Dynamic Object -->
    <class name="DynamicClass" base="DefaultClass"/>
           
    
    <!-- Probability Distribution -->
    <class name="ProbabilityDistribution" abstract="yes"/>
    <class name="BernoulliDistribution" base="ProbabilityDistribution">
      <variable type="Double" name="pTrue"/>
      <variable type="Double" name="pFalse"/>
    </class>
    <template name="DiscreteProbabilityDistribution" base="ProbabilityDistribution">
      <parameter name="enumeration" type="EnumValue"/>

      <code>
      EnumerationPtr getEnumeration() const
        {return getTemplateArgument(0).staticCast&lt;Enumeration&gt;();}

      virtual size_t getObjectNumVariables() const
        {return getEnumeration()->getNumElements() + 1;}

      virtual Variable getObjectVariable(const VariableValue&amp; value, size_t index) const
      {
        DiscreteProbabilityDistributionPtr distribution = value.getObjectAndCast&lt;DiscreteProbabilityDistribution&gt;();
        return distribution ? Variable(distribution->values[index], probabilityType) : Variable::missingValue(probabilityType);
      }

      virtual void setObjectVariable(const VariableValue&amp; value, size_t index, const Variable&amp; subValue) const
      {
        DiscreteProbabilityDistributionPtr distribution = value.getObjectAndCast&lt;DiscreteProbabilityDistribution&gt;();
        if (distribution)
        {
          if (!distribution->values.size())
            distribution->values.resize(distribution->getEnumeration()->getNumElements() + 1, 0.0);

          jassert(subValue.isDouble());
          jassert(index &lt; distribution->values.size());
          distribution->values[index] = subValue.getDouble();
        }
      }

      virtual TypePtr getObjectVariableType(size_t index) const
        {return probabilityType;}

      virtual String getObjectVariableName(size_t index) const
        {return T("p[") + Variable(index, getEnumeration()).toString() + T("]");}
      </code>
    </template>

    <!-- Random Generator -->
    <class name="RandomGenerator">
      <variable type="Integer" name="seed"/>
    </class>
    
    <!-- Random Variable -->
    <class name="ScalarVariableMean" base="NameableObject"/>
    <class name="ScalarVariableMeanAndVariance" base="ScalarVariableMean"/>
    <class name="ScalarVariableStatistics" base="ScalarVariableMeanAndVariance"/>

    <!-- Consumer -->
    <class name="Consumer" base="Object" abstract="yes"/>
    <class name="TextPrinter" base="Consumer" abstract="yes"/>
    
    <!-- Cache -->
    <class name="Cache" base="Object" abstract="yes"/>
    <class name="AverageValuesCache" base="Cache"/>
    
  </namespace>
  
</file>
