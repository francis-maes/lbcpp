<?xml version="1.0" encoding="UTF-8"?>

<library name="Data" directory="Data">
  <import name="Stream"/>
  <import name="Container"/>

  <include file="lbcpp/Data/RandomGenerator.h"/>
  <include file="lbcpp/Data/RandomVariable.h"/>
  <include file="lbcpp/Data/Cache.h"/>
  <include file="lbcpp/Data/DoubleVector.h"/>
  <include file="lbcpp/Data/Matrix.h"/>
  <include file="lbcpp/Data/SymmetricMatrix.h"/>
  
  <!-- Random Generator -->
  <class name="RandomGenerator">
    <variable type="Integer" name="seed"/>
  </class>
  
  <!-- Random Variable -->
  <class name="ScalarVariableMean" base="NameableObject">
    <variable type="Double" name="samplesSum"/>
    <variable type="Double" name="samplesCount"/>
  </class>
  
  <class name="ScalarVariableMeanAndVariance" base="ScalarVariableMean">
    <variable type="Double" name="samplesSumOfSquares"/>
  </class>
  
  <class name="ScalarVariableStatistics" base="ScalarVariableMeanAndVariance">
    <variable type="Double" name="minimumValue"/>
    <variable type="Double" name="maximumValue"/>
  </class>

  <class name="ScalarVariableRecentMean" base="NameableObject"/>
  <class name="ScalarVariableRecentMeanAndVariance" base="ScalarVariableRecentMean"/>

  <!-- Consumer -->
  <class name="Consumer" base="Object" abstract="yes"/>
  <class name="TextPrinter" base="Consumer" abstract="yes"/>
  
  <!-- Cache -->
  <class name="Cache" base="Object" abstract="yes"/>
  <class name="AverageValuesCache" base="Cache"/>

  <!-- DoubleVector -->
  <template name="DoubleVector" base="Vector[elementsType]" abstract="yes">
    <parameter name="elementsEnumeration" type="EnumValue"/>
    <parameter name="elementsType" type="Double"/>
  </template>

  <template name="SparseDoubleVector" base="DoubleVector[elementsEnumeration, elementsType]">
    <parameter name="elementsEnumeration" type="EnumValue"/>
    <parameter name="elementsType" type="Double"/>
  </template>

  <template name="DenseDoubleVector" base="DoubleVector[elementsEnumeration, elementsType]">
    <parameter name="elementsEnumeration" type="EnumValue"/>
    <parameter name="elementsType" type="Double"/>
  </template>

  <template name="LazyDoubleVector" base="DoubleVector[elementsEnumeration, elementsType]">
    <parameter name="elementsEnumeration" type="EnumValue"/>
    <parameter name="elementsType" type="Double"/>
  </template>

  <template name="CompositeDoubleVector" base="DoubleVector[elementsEnumeration, elementsType]">
    <parameter name="elementsEnumeration" type="EnumValue"/>
    <parameter name="elementsType" type="Double"/>
  </template>

  <!-- Matrix -->
  <template name="Matrix" base="Container[elementsType]" abstract="yes">
    <parameter name="elementsType" type="Variable"/>
  </template>

  <template name="ShortEnumerationMatrix" base="Matrix[elementsType]">
    <parameter name="elementsType" type="EnumValue"/>
  </template>
  
  <!-- SymmetricMatrix -->
  <template name="SymmetricMatrix" base="Matrix[elementsType]" abstract="yes">
    <parameter name="elementsType" type="Variable"/>
  </template>
  
  <template name="DoubleSymmetricMatrix" base="SymmetricMatrix[elementsType]">
    <parameter name="elementsType" type="Double"/>
  </template>

  <template name="ObjectSymmetricMatrix" base="SymmetricMatrix[elementsType]">
    <parameter name="elementsType" type="Object"/>
  </template>

</library>
