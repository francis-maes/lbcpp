<?xml version="1.0" encoding="UTF-8"?>

<file name="Type" directory="Data/Type">
  <namespace name="lbcpp">

    <type name="Variable" base="" implementation="TopLevelType"/>

    <!-- Builtin Types -->
    <type name="Nil" base="Variable"/>
    <type name="Boolean" base="Variable"/>
    <type name="Integer" base="Variable"/>
    <type name="EnumValue" base="Integer" implementation="IntegerType"/>

    <type name="Double" base="Variable"/>
    <type name="Probability" base="Double"/>
    <type name="AngstromDistance" base="Double"/>

    <type name="String" base="Variable"/>
    <type name="File" base="String"/>
    <templateType name="Pair"/>

    
    <!-- Object -->
    <class name="Object" base="Variable" abstract="yes">
      <!-- <variable type="Class" name="thisClass"/> -->
    </class>
    
    <class name="NameableObject" base="Object" abstract="yes">
      <variable type="String" name="name"/>
    </class>

    <!-- Type -->
    <class name="Type" base="NameableObject" abstract="yes">
      <variable type="Type" name="baseType"/>
      <variable type="TemplateType" name="templateType"/>
      <!-- <variable type="Vector[Type]" name="templateArguments"/> -->
      <code>
        virtual VariableValue createFromString(const String&amp; value, ErrorHandler&amp; callback) const
        {return Type::get(value, callback);}

        virtual VariableValue createFromXml(XmlElement* xml, ErrorHandler&amp; callback) const
        {return createFromString(xml->getAllSubText(), callback);}
      </code>
    </class>

    <class name="Enumeration" base="Type" abstract="yes">
      <variable type="String" name="oneLetterCodes"/>
      <code>
        virtual VariableValue createFromString(const String&amp; value, ErrorHandler&amp; callback) const
        {return Type::get(value, callback);}

        virtual VariableValue createFromXml(XmlElement* xml, ErrorHandler&amp; callback) const
        {return createFromString(xml->getAllSubText(), callback);}
      </code>
    </class>

    <class name="Class" base="Type" abstract="yes"/>
    
    <!-- Template Type -->
    <class name="TemplateType" base="NameableObject" abstract="yes"/>
    
  </namespace>
</file>
