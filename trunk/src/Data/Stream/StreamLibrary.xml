<?xml version="1.0" encoding="UTF-8"?>

<library name="Stream" directory="Data/Stream">

  <!-- Abstract classes -->
  <class name="Stream" abstract="yes"/>
  <class name="TextParser" base="Stream" abstract="yes"/>
  
  <!-- LibSVM Data Parsers -->
  <class name="LibSVMDataParser" base="TextParser" abstract="yes"/>
  
  <class name="RegressionLibSVMDataParser" base="TextParser">
    <constructor arguments="ExecutionContext&amp; context, const File&amp; file, DefaultEnumerationPtr features"/>
  </class>

  <class name="BinaryClassificationLibSVMDataParser" base="TextParser">
    <constructor arguments="ExecutionContext&amp; context, const File&amp; file, DefaultEnumerationPtr features"/>
  </class>

  <class name="ClassificationLibSVMDataParser" base="TextParser">
    <constructor arguments="ExecutionContext&amp; context, const File&amp; file, DefaultEnumerationPtr features, DefaultEnumerationPtr labels"/>
  </class>

  <class name="MultiLabelClassificationLibSVMDataParser" base="TextParser">
    <constructor arguments="ExecutionContext&amp; context, const File&amp; file, DefaultEnumerationPtr features, DefaultEnumerationPtr labels"/>
  </class>

  <class name="BinaryClassificationLibSVMFastParser" base="TextParser">
    <constructor arguments="ExecutionContext&amp; context, const File&amp; file, DefaultEnumerationPtr features" returnType="Stream"/>
  </class>


  <!-- ARFF Data Parsers -->
  <class name="ARFFDataParser" base="TextParser" abstract="yes"/>
  
  <class name="RegressionARFFDataParser" base="TextParser">
    <constructor arguments="ExecutionContext&amp; context, const File&amp; file, DynamicClassPtr features"/>
  </class>
  
  <class name="BinaryClassificationARFFDataParser" base="TextParser">
    <constructor arguments="ExecutionContext&amp; context, const File&amp; file, DynamicClassPtr features"/>
  </class>
  
  <class name="ClassificationARFFDataParser" base="TextParser">
    <constructor arguments="ExecutionContext&amp; context, const File&amp; file, DynamicClassPtr features, DefaultEnumerationPtr labels"/>
  </class>
  
  <class name="MultiLabelClassificationARFFDataParser" base="TextParser">
    <constructor arguments="ExecutionContext&amp; context, const File&amp; file, DynamicClassPtr features, DefaultEnumerationPtr labels"/>
  </class>

  <!-- Directory iterators -->
  <class name="DirectoryFileStream" base="Stream">
    <constructor arguments="ExecutionContext&amp; context, const File&amp; directory, const String&amp; wildCardPattern, bool searchFilesRecursively"/>
  </class>

  <class name="DirectoryPairFileStream" base="Stream">
    <constructor arguments="ExecutionContext&amp; context, const File&amp; mainDirectory, const File&amp; secondDirectory, const String&amp; wildCardPattern, bool searchFilesRecursively"/>
  </class>

  <!-- Apply Function Modifier -->
  <class name="ApplyFunctionStream" base="Stream">
    <constructor arguments="ExecutionContext&amp; context, StreamPtr stream, FunctionPtr function"/>

    <variable type="Stream" name="stream"/>
    <variable type="Function" name="function"/>
  </template>

  <!-- BuiltinTypeStream --> 
<!--  <template name="BuiltinTypeStream" base="Stream" abstract="yes">
    <parameter name="elementsType"/>
    <variable type="GenericVector[elementsType]" name="values"/>
    <variable type="PositiveInteger" name="currentPosition"/>
  </template>
-->  
  <template name="DoubleStream" base="Stream">
    <parameter name="elementsType" type="Double"/>
    <constructor arguments="TypePtr elementsType, const std::vector&lt;double&gt;&amp; values" parameters="elementsType" returnType="Stream"/>
    <variable type="Type" name="elementsType"/>
    <variable type="GenericVector[elementsType]" name="values"/>
  </template>
  
  <template name="IntegerStream" base="Stream">
    <parameter name="elementsType" type="Integer"/>
    <constructor arguments="TypePtr elementsType, const std::vector&lt;int&gt;&amp; values" parameters="elementsType" returnType="Stream"/>
    <variable type="Type" name="elementsType"/>
    <variable type="GenericVector[elementsType]" name="values"/>
  </template>
  
  <template name="BooleanStream" base="Stream">
    <parameter name="elementsType" type="Boolean"/>
    <constructor arguments="const std::vector&lt;bool&gt;&amp; values" parameters="booleanType" returnType="Stream"/>
    <constructor arguments="bool values" parameters="booleanType" returnType="Stream"/>
    <variable type="Type" name="elementsType"/>
    <variable type="GenericVector[elementsType]" name="values"/>
  </template>

  <template name="ObjectStream" base="Stream">
    <parameter name="elementsType" type="Object"/>
    <constructor arguments="TypePtr elementsType, const std::vector&lt;ObjectPtr&gt;&amp; values" parameters="elementsType" returnType="Stream"/>
    <variable type="Type" name="elementsType"/>
    <variable type="GenericVector[elementsType]" name="values"/>
  </class>

 <!-- Consumer -->
  <class name="SaveToFileConsumer" base="Consumer">
    <constructor arguments="const File&amp; outputDirectory"/>
  </class>

</library>
