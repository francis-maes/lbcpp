<?xml version="1.0" encoding="UTF-8"?>

<file name="Container" directory="Data/Container">
  <include file="lbcpp/Data/Vector.h"/>
  <include file="lbcpp/Data/SymmetricMatrix.h"/>
  <namespace name="lbcpp">
    
    <!-- Container -->
    <template name="Container" base="Object" abstract="yes">
      <parameter name="elementsType"/>
      <code>
        virtual size_t getNumElements(const VariableValue&amp; value) const
        {
          const ContainerPtr&amp; container = value.getObjectAndCast&lt;Container&gt;();
          return container ? container->getNumElements() : 0;
        }

        virtual Variable getElement(const VariableValue&amp; value, size_t index) const
        {
          const ContainerPtr&amp; container = value.getObjectAndCast&lt;Container&gt;();
          jassert(container);
          return container->getElement(index);
        }

        virtual String getElementName(const VariableValue&amp; value, size_t index) const
          {return T("[") + String((int)index) + T("]");}
      </code>
    </template>

    <!-- DecoratorContainer -->
    <template name="DecoratorContainer" base="Container[elementsType]" abstract="yes">
      <variable type="Container[Variable]" name="target"/>
      <parameter name="elementsType"/>
    </template>

    <template name="ApplyFunctionContainer" base="DecoratorContainer[elementsType]">
      <parameter name="elementsType"/>
      <constructor arguments="ContainerPtr container, FunctionPtr function" parameters="function->getOutputType(container->getElementsType())"/>
      <variable type="Function" name="function"/>
    </template>

    <template name="RangeContainer" base="DecoratorContainer[elementsType]">
      <parameter name="elementsType"/>
      <constructor arguments="ContainerPtr target, size_t begin, size_t end" parameters="target->getElementsType()"/>
    </template>
    
    <template name="ExcludeRangeContainer" base="DecoratorContainer[elementsType]">
      <parameter name="elementsType"/>
      <constructor arguments="ContainerPtr target, size_t begin, size_t end" parameters="target->getElementsType()"/>
    </template>
    
    <template name="DuplicatedContainer" base="DecoratorContainer[elementsType]">
      <parameter name="elementsType"/>
      <constructor arguments="ContainerPtr target, size_t count" parameters="target->getElementsType()"/>
    </template>
    
    <template name="SubsetContainer" base="DecoratorContainer[elementsType]">
      <parameter name="elementsType"/>
      <constructor arguments="ContainerPtr target, const std::vector&lt;size_t&gt;&amp; indices" parameters="target->getElementsType()"/>
    </template>

    <!-- SegmentedContainer -->
    <template name="ContainerSegment" base="Object">
      <parameter name="elementsType"/>
      <variable type="PositiveInteger" name="beginIndex"/>
      <variable type="PositiveInteger" name="length"/>
      <variable type="elementsType" name="value"/>
    </template>

    <template name="SegmentedContainer" base="Container[elementsType]">
      <parameter name="elementsType"/>
      <constructor arguments="ContainerPtr container" parameters="container->getElementsType()"/>

      <variable type="Container[elementsType]" name="sourceContainer"/>
      <variable type="ObjectVector[ContainerSegment[elementsType]]" name="segments"/>
    </template>
    
    <!-- Vector -->
    <template name="Vector" base="Container[elementsType]" abstract="yes">
      <parameter name="elementsType"/>
    </template>

    <template name="GenericVector" base="Vector[elementsType]">
      <parameter name="elementsType"/>
      <constructor arguments="TypePtr elementsType, size_t initialSize" parameters="elementsType"/>
    </template>

    <template name="ObjectVector" base="Vector[elementsType]">
      <parameter name="elementsType"/>
      <constructor arguments="TypePtr elementsType, size_t initialSize" parameters="elementsType"/>
    </template>

    <class name="BooleanVector" base="Vector[Boolean]">
      <constructor arguments="size_t initialSize"/>
    </class>

    <class name="VariableVector" base="Vector[Variable]">
      <constructor arguments="size_t initialSize"/>
    </class>

    <!-- SymmetricMatrix -->
    <template name="SymmetricMatrix" base="Container[elementsType]">
      <parameter name="elementsType"/>
    </template>

    <template name="SymmetricMatrixRow" base="Container[elementsType]">
      <parameter name="elementsType"/>
    </template>

  </namespace>

  <!--<declarationCode>
    lbcpp::Type::declare(new BooleanVector(), T("Vector[Boolean]"));
  </declarationCode>-->
</file>
