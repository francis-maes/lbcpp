<?xml version="1.0" encoding="UTF-8"?>

<file name="Inference" directory="lbcpp/Inference">
  <include file="lbcpp/Inference/Inference.h"/>
  <include file="lbcpp/Inference/DecoratorInference.h"/>
  <include file="lbcpp/Inference/SequentialInference.h"/>
  <include file="lbcpp/Inference/ParallelInference.h"/>
  <include file="lbcpp/Inference/InferenceOnlineLearner.h"/>

  <import name="ReductionInference"/>
  <import name="DecisionTreeInference"/>
  <import name="NumericalInference"/>
  <import name="MetaInference"/>

  <namespace name="lbcpp">

    <class name="Inference" base="NameableObject" abstract="yes">
      <variable type="InferenceOnlineLearner" name="onlineLearner"/>
      <variable type="Inference" name="batchLearner"/>
    </class>

    <!-- Decorator Inference -->
    <class name="DecoratorInference" base="Inference" abstract="yes"/>
    <class name="StaticDecoratorInference" base="DecoratorInference" abstract="yes">
      <variable type="Inference" name="decorated"/>
    </class>

    <!-- Parallel Inference -->
    <class name="ParallelInference" base="Inference" abstract="yes"/>
    <class name="StaticParallelInference" base="ParallelInference" abstract="yes"/>

    <class name="SharedParallelInference" base="StaticParallelInference" abstract="yes">
      <variable type="Inference" name="subInference"/>
    </class>

    <class name="VectorParallelInference" base="StaticParallelInference" abstract="yes">
      <variable type="Vector[Inference]" name="subInferences"/>
    </class>
    
    <!-- Sequential Inference -->
    <class name="SequentialInference" base="Inference" abstract="yes"/>
    <class name="StaticSequentialInference" base="SequentialInference" abstract="yes"/>
    
    <class name="VectorSequentialInference" base="StaticSequentialInference">
      <variable type="Vector[Inference]" name="subInferences"/>
    </class>

    <code> <!-- FIXME: ranger -->
      class PostProcessInference : public StaticDecoratorInference
      {
      public:
      // postProcessingFunction: from (object,any) pair to object
      PostProcessInference(InferencePtr decorated, FunctionPtr postProcessingFunction)
        : StaticDecoratorInference(postProcessingFunction->toString() + T("(") + decorated->getName() + T(")"), decorated),
      postProcessingFunction(postProcessingFunction)
        {setBatchLearner(postProcessInferenceLearner());}

      PostProcessInference() {}

      virtual TypePtr getOutputType(TypePtr inputType) const
        {return postProcessingFunction->getOutputType(pairType(inputType, decorated->getOutputType(inputType)));}

      virtual Variable finalizeInference(InferenceContextPtr context, DecoratorInferenceStatePtr finalState, ReturnCode&amp; returnCode)
        {return postProcessingFunction->compute(Variable::pair(finalState->getInput(), finalState->getSubOutput()));}

      protected:
        FunctionPtr postProcessingFunction;
      };
    </code>

    <class name="PostProcessInference" base="DecoratorInference">
      <constructor arguments="InferencePtr inference, FunctionPtr postProcessingFunction"/>
    </class>
    
  </namespace>

</file>
