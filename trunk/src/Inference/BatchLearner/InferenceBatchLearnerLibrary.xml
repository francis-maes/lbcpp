<?xml version="1.0" encoding="UTF-8"?>

<library name="InferenceBatchLearner" directory="Inference/BatchLearner">

  <!-- Dummy Inference Learner -->
  <class name="DummyInferenceLearner" base="Inference">
    <constructor/>
  </class>

  <!-- Sequential Inference Learner -->
  <class name="RunSequentialInferenceStepOnExamples" base="ParallelInference" abstract="yes"/>
  <class name="StaticSequentialInferenceLearner" base="Inference">
    <constructor/>
  </class>

  <!-- Parallel Inference Learner -->
  <class name="StaticParallelInferenceLearner" base="ParallelInference">
    <constructor/>
  </class>
  
  <class name="ParallelVoteInferenceLearner" base="StaticParallelInferenceLearner">
    <constructor returnType="ParallelInference"/>
  </class>
  
  <class name="SharedParallelInferenceLearner" base="DecoratorInference">
    <constructor arguments="bool filterUnsupervisedExamples"/>
  </class>

  <!-- Decorator Inference Learner -->
  <class name="DecoratorInferenceLearner" base="DecoratorInference">
    <constructor/>
  </class>
  
  <class name="PostProcessInferenceLearner" base="DecoratorInferenceLearner">
    <constructor returnType="DecoratorInference"/>
  </class>

  <!-- Stochastic Inference Learner -->
  <class name="StochasticPassInferenceLearner" base="Inference">
    <constructor arguments="const std::vector&lt;InferencePtr&gt;&amp; learnedInferences, bool randomizeExamples"/>
    <variable type="ObjectVector[Inference]" name="learnedInferences"/>
    <variable type="Boolean" name="randomizeExamples"/>
  </class>

  <class name="StochasticInferenceLearner" base="SequentialInference">
    <constructor arguments="bool randomizeExamples"/>
    <variable type="Boolean" name="randomizeExamples"/>
  </class>

  <!-- Auto Tune -->
  <class name="EvaluateStochasticLearnerObjectiveFunction" base="EvaluateBatchLearnerObjectiveFunction">
    <constructor/>
  </class>
  
  <class name="AutoTuneInferenceLearner" base="Inference">
    <constructor arguments="const OptimizerPtr&amp; optimizer, const OptimizerInputPtr&amp; optimizerInput"/>
    <variable type="Optimizer" name="optimizer"/>
    <variable type="OptimizerInput" name="optimizerInput"/>
  </class>
  
  <!-- Misc-->
  <class name="PrecomputePerceptionsInferenceLearner" base="StaticDecoratorInference" abstract="yes"/>

  <class name="MultiPassInferenceLearner" base="VectorSequentialInference">
    <constructor/>
  </class>

  <code>
    VectorSequentialInferencePtr multiPassInferenceLearner(InferencePtr firstLearner, InferencePtr secondLearner)
    {
      VectorSequentialInferencePtr res = multiPassInferenceLearner();
      res->appendInference(firstLearner);
      res->appendInference(secondLearner);
      return res;
    }
  </code>

  <class name="InitializeByCloningInferenceLearner" base="Inference">
    <constructor arguments="InferencePtr inferenceToClone"/>
    <variable type="Inference" name="inferenceToClone"/>
  </class>

</library>
