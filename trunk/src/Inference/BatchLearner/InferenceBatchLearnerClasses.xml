<?xml version="1.0" encoding="UTF-8"?>

<file name="InferenceBatchLearner" directory="Inference/BatchLearner">

  <namespace name="lbcpp">

    <class name="DummyInferenceLearner" base="AtomicInferenceLearner">
      <constructor/>
    </class>

    <class name="MultiPassInferenceLearner" base="VectorSequentialInference">
      <constructor/>
    </class>

    <code>
      VectorSequentialInferencePtr multiPassInferenceLearner(InferencePtr firstLearner, InferencePtr secondLearner)
      {
        VectorSequentialInferencePtr res = multiPassInferenceLearner();
        res->appendInference(firstLearner);
        res->appendInference(secondLearner);
        return res;
      }
    </code>

    <class name="InitializeByCloningInferenceLearner" base="AtomicInferenceLearner">
      <constructor arguments="InferencePtr inferenceToClone"/>
      <variable type="Inference" name="inferenceToClone"/>
    </class>

    <class name="RunSequentialInferenceStepOnExamples" base="ParallelInference" abstract="yes"/>
    <class name="StaticSequentialInferenceLearner" base="Inference">
      <constructor/>
    </class>

    <class name="StaticParallelInferenceLearner" base="ParallelInference">
      <constructor/>
    </class>
    
    <class name="ParallelVoteInferenceLearner" base="StaticParallelInferenceLearner">
      <constructor returnType="ParallelInference"/>
    </class>
    
    <class name="SharedParallelInferenceLearner" base="DecoratorInference">
      <constructor arguments="bool filterUnsupervisedExamples"/>
    </class>
    
    <class name="DecoratorInferenceLearner" base="DecoratorInference">
      <constructor/>
    </class>
    
    <class name="PostProcessInferenceLearner" base="DecoratorInferenceLearner">
      <constructor returnType="DecoratorInference"/>
    </class>

    <class name="StochasticPassInferenceLearner" base="AtomicInferenceLearner">
      <constructor arguments="const std::vector&lt;InferencePtr&gt;&amp; learnedInferences, bool randomizeExamples"/>
      <variable type="ObjectVector[Inference]" name="learnedInferences"/>
      <variable type="Boolean" name="randomizeExamples"/>
    </class>

    <class name="StochasticInferenceLearner" base="SequentialInference">
      <constructor arguments="bool randomizeExamples"/>
      <variable type="Boolean" name="randomizeExamples"/>
    </class>

  </namespace>
  
</file>
