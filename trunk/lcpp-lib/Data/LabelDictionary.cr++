/*-----------------------------------------.---------------------------------.
| Filename: LabelDictionary.cr++           | A set of indexed labels         |
| Author  : Francis Maes                   |                                 |
| Started : 10/02/2009 22:31               |                                 |
`------------------------------------------/                                 |
                               |                                             |
                               `--------------------------------------------*/

namespace lcpp
{

class LabelDictionary
{
public:
  std::string getLabel(size_t index) const
    {assert(index < labels.size()); return labels[index];}
    
  const std::vector< std::string >& getLabelsVector() const
    {return labels;}

  size_t getNumLabels() const
    {return labels.size();}
    
  void add(const std::string& label)
    {labels.push_back(label);}
    
  size_t size() const
    {return labels.size();}

private:
  friend struct Traits<LabelDictionary>;
  
  std::vector<std::string> labels;
};

template<>
struct Traits<LabelDictionary>
  : public DefaultContainerTraits< Traits<LabelDictionary>, LabelDictionary, size_t, size_t >
{    
  static size_t size(const LabelDictionary& labels)
    {return labels.getNumLabels();}

  static size_t begin(const LabelDictionary& labels)
    {return 0;}

  static size_t end(const LabelDictionary& labels)
    {return labels.getNumLabels();}
  
  static const ValueType& value(const ConstIterator& iterator)
    {return iterator;}

  static std::string toString(const LabelDictionary& labels)
    {return lcpp::toString(labels.labels);}
    
  static void write(std::ostream& ostr, const LabelDictionary& labels)
    {lcpp::write(ostr, labels.labels);}
    
  static bool read(std::istream& istr, const LabelDictionary& labels)
    {return lcpp::read(istr, labels.labels);}
};

}; /* namespace lcpp */
