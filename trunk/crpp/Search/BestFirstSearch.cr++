#include "TreeSearchSpace.cr++"
#include "SortedTreeSearchNodeMap.cr++"

namespace lcpp
{

crAlgorithm int bestFirstSearch(TreeSearchSpace& searchSpace, size_t maxSteps)
{
  SortedTreeSearchNodeMap closedNodes;
  closedNodes.insert(0);
  
  for (size_t t = 0; t < maxSteps && closedNodes.size(); ++t)
  {
    chooseFunction double nodeValues(size_t searchNodeIndex)
    {
      TreeSearchNode& searchNode = searchSpace.getNode(searchNodeIndex);
      if (searchNode.hasParent())
      {
        ChoosePtr choose = searchNode.getParentChoose();
        if (choose->getNumActionValues() > 0)
          return choose->computeActionValue(searchNode.getChoice());        
        searchNode.open();
        return choose->computeStateValue();
      }
      else
      {
        // initial node
        assert(searchNode.opened());
        return searchNode.getChoose()->computeStateValue();
      }
    }
    
    chooseFunction featureGenerator nodeFeatures(size_t searchNodeIndex)
    {
      TreeSearchNode& searchNode = searchSpace.getNode(searchNodeIndex);
      if (searchNode.hasParent())
      {
        CRAlgorithmPtr state = searchNode.getParentState();
        ChoosePtr choose = searchNode.getParentChoose();
        VariablePtr choice = searchNode.getChoice();
        
        if (choose->getNumActionFeatures() > 0)
        {
          FeatureGeneratorPtr actionFeatures = choose->computeActionFeatures(choice);
          featureCall actionFeatures;
        }
        else if (choose->getNumStateFeatures() > 0)
        {
          searchNode.open();
          FeatureGeneratorPtr stateFeatures = choose->computeStateFeatures();
          featureCall stateFeatures;
        }
      }
      else
      {
        // initial node
        assert(searchNode.opened());
        FeatureGeneratorPtr stateFeatures = searchNode.getChoose()->computeStateFeatures();
        featureCall stateFeatures;
      }
    }
    
    chooseFunction std::string nodeToString(size_t searchNodeIndex)
    {
      TreeSearchNode& searchNode = searchSpace.getNode(searchNodeIndex);
      TreeSearchNode* parent = searchNode.getParent();
      if (parent)
        return searchNode.getParentChoose()->computeActionDescription(searchNode.getChoice());
      else
        return "<initial>";
    }
    
    chooseFunction double postSupervision(size_t searchNodeIndex, const crAlgorithm<bestFirstSearch>& finalState)
    {
      assert(finalState.hasReturn());
      int solution = *finalState.getReturn();
      if (solution < 0)
        return 0.0;
      else
        return searchSpace.isAncestorOf(searchNodeIndex, (size_t)solution) ? 1.0 : 0.0;
    }
    
    // todo: node features
    TreeSearchNode* node = NULL;
    size_t nodeIndex = choose<size_t>(closedNodes, nodeValues, nodeFeatures, nodeToString, postSupervision);
    
    // test if node is a solution
    node = &searchSpace.getNode(nodeIndex);
    node->open();
    if (node->isSolution())
      return (int)nodeIndex; // found a solution !
      
    // remove selected node
    closedNodes.remove(nodeIndex);

    // insert sucessors
    { // TODO: virer ce scope, des que la dependence entre initialiseurs est resolu
      VariableIteratorPtr it = node->newIterator();
      if (it)
        for (; it->exists(); it->next())
          closedNodes.insert(searchSpace.getChildrenNode(nodeIndex, it->get()));
    }
    
    // cost of one step
    reward (-1.0);
  }
  return -1; // no solutions
}


}; /* namespace lcpp */
/*
class BestFirstSearchInstanceSet : public CRAlgorithmInstanceSet
{
public:
  CRAlgorithmInstanceSetPtr getTarget() const
    {return getFrameAttributeCast<CRAlgorithmInstanceSet>(T("problems"));}
    
  size_t getMaxSteps() const
    {return (size_t)getIntAttribute(T("maxSteps"));}
    
  virtual unsigned getNumInstances()
    {CRAlgorithmInstanceSetPtr target = getTarget(); return target ? target->getNumInstances() : 0;}

  virtual std::string getInstanceName(size_t i)
    {CRAlgorithmInstanceSetPtr target = getTarget(); return target ? target->getInstanceName(i) : "<null>";}

  virtual lcpp::CRAlgorithmPtr createInstance(size_t i)
  {
    CRAlgorithmInstanceSetPtr target = getTarget();
    if (!target)
      return lcpp::CRAlgorithmPtr();
    lcpp::CRAlgorithmPtr c = target->createInstance(i);
    if (!c)
      return lcpp::CRAlgorithmPtr();
    searchSpace.reset(c);
    return lcpp::bestFirstSearch(searchSpace, getMaxSteps());
  }
  
private:
  lcpp::TreeSearchSpace searchSpace;
};

*/
