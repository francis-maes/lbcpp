Objectif Bandit with sampler:

1) descendre les classes de base de samplers dans lbcpp-core
2) avoir une implementation d'EDA qui utilise les samplers
3) utiliser les samplers dans Bandits

Objectif Unification

1) faire deriver Sampler de Function
2) unifier les BatchLearner de Sampler et de Function

Objectif Alejandro

1) Il faut un sampler maxent
2) Il faut un sampler gaussian parametree


Proteins:
 * Ajouter des features de segments

Core:
 * Renommer MultiLinearLearnableFunction en ParallelLearnableFunction<T>
 * MapContainerFunction: la transformer en ProxyFunction, faire la version parallele, absorber le Apply des container

Explorer:
 * LogScale dans les curves
 * Systeme d'export/import de fichiers general
 * Export as GnuPlot Data File
 * Export as CSV
 * ExecutionTrace: refermer les noeuds au fur et à mesure
 * ExecutionTrace: Améliorer le système de colonnes
 * Explorer: Faire un mecanisme general pour la gestion des FileFormat, utiliser sur les sgf par exemple
 * Explorer: Faire une vrai classe de base ObjectComponent qui absorbe ComponentWithPreferedSize / VariableSelector et qui gere les differents cas:
     topLevel | insideTree | oneLineComponent
 * Explorer: interfaces 
     - Importer: String -> UIImporter: (getName(), doesRecognizeFile(), perform())
     - Exporter: Type -> UIExporter: (getName(), getDefaultExtension(), perform())
     - Command: Type -> UICommand: (getIcon(), getName(), perform())
     - TreeItems: Type -> UITreeItemBuilder: (getIcon(), getToolTip(), getAttributes(), perform())
     - Component: Type -> UIComponent: (preferedSize, variableSelector, parameters, ...)

Go:
 * learn a big model
 * integrate's olivier last modifs
 * Nouvelles features
 * Courbes dans l'evaluateur
 * GoPatterns
 * Utilisation du manager

