

Objectif: finir refactoring

 - Uniformiser les noms
 - Factoriser entre Boosting et Gradient Boosting
 - Remettre les scores train/test à chaque itération
 
 => objectif: expe large-scale sur la classif


 * GradientBoosting: allows two votes per yielded boolean 
 * Support of Stumps
 * Run on classification data (mnist & pendigit)
 * More relations in Go
 * Use type-states to define features for the adaptative weak learning policy

Luape-Appli:
 * Apprentissage d'une gaussienne conditionelle => boosting joint de la moyenne et de l'ecart-type
    ==> application dans les continuous bandits
    ==> application dans le formula discovery
 * Proteines: mega-boosting joint + re-entrant + filtre

Lua-Misc:
 * Move namespace lbcpp::lua into lua (-> introspection generator must be adapted)
 * Metamethods for ipairs() and pairs()
 * Serialisation of subspecified expressions
 * derivable: Gerer les gradient et les DoubleVector 
 * derivable: Generate function that computes both the output and all derivatives
 * derivable: Advanced formula simplification
 * New 'goal' extension to integrate inference and learning

Proteins:
 * Ajouter des features de segments

Core:
 * Renommer MultiLinearLearnableFunction en ParallelLearnableFunction<T>
 * MapContainerFunction: la transformer en ProxyFunction, faire la version parallele, absorber le Apply des container

Explorer:
 * LogScale dans les curves
 * Systeme d'export/import de fichiers general
 * Export as GnuPlot Data File
 * Export as CSV
 * ExecutionTrace: refermer les noeuds au fur et à mesure
 * ExecutionTrace: Améliorer le système de colonnes
 * Explorer: Faire un mecanisme general pour la gestion des FileFormat, utiliser sur les sgf par exemple
 * Explorer: Faire une vrai classe de base ObjectComponent qui absorbe ComponentWithPreferedSize / VariableSelector et qui gere les differents cas:
     topLevel | insideTree | oneLineComponent
 * Explorer: interfaces 
     - Importer: String -> UIImporter: (getName(), doesRecognizeFile(), perform())
     - Exporter: Type -> UIExporter: (getName(), getDefaultExtension(), perform())
     - Command: Type -> UICommand: (getIcon(), getName(), perform())
     - TreeItems: Type -> UITreeItemBuilder: (getIcon(), getToolTip(), getAttributes(), perform())
     - Component: Type -> UIComponent: (preferedSize, variableSelector, parameters, ...)

Go:
 * integrate's olivier last modifs
 * Nouvelles features
 * Courbes dans l'evaluateur
 * GoPatterns
 * Utilisation du manager
