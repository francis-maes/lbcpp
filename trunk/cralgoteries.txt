'''Game of go: optimize'''

 * FeatureGenerator: make statistics on the number of entries in sparse vector to optimize allocation
 * ScalarVariableRecentMean: bugfix: sum was recomputed at (nearly) each iteration
 * Split RandomVariable.h into .h and .cpp
 * CartesianProductFeatureGenerator: optimized l0norm() and sumOfSquares() functions
 * Optimize MapContainerFunction::createOutputContainer
 * CartesianProductFeatureGenerator: optimized dotProduct() function
 * CartesianProductFeatureGenerator: optimized addWeightedTo() function
 * IntrospectionGenerator: improve efficiency of generated getMemberVariableValue() functions
 * DoubleVector::appendTo() and FeatureGenerator::appendTo(): add a "weight" argument
 * CartesianProductFeatureGenerator: optimized appendTo() function
 
Proteins:
 ** ProteinLearner: Serialisation des models
   -> Shared dynamic object
    * Rajouter un attribute "generated" dans les Library.xml
    * Dans function, le outputtype est generated
    * Dans les featuregenerator, le FeaturesEnumeration est generated

 * Ajouter des features de segments

Core:
 ** Renommer MultiLinearLearnableFunction en ParallelLearnableFunction<T>
 * RunWorkUnit: save des traces depuis un timer
 * MapContainerFunction: la transformer en ProxyFunction, faire la version parallele, absorber le Apply des container

Explorer:
 * ExecutionTrace: refermer les noeuds au fur et à mesure
 * ExecutionTrace: Améliorer le système de colonnes
 * Explorer: Faire un mecanisme general pour la gestion des FileFormat, utiliser sur les sgf par exemple
 * Explorer: Faire une vrai classe de base ObjectComponent qui absorbe ComponentWithPreferedSize / VariableSelector et qui gere les differents cas:
     topLevel | insideTree | oneLineComponent
 * ...
