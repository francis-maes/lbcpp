
* New Tree weak learner
* Move DPOptimizerBasedWeakLearner into lbcpp-core

La suite:
1) Finish learners refactoring:
 * Step3: Remove Learner::setFunction() and improve support of Learner::setExamples()
2) Relaunch experiments of classification, with random sampling with tree depth={1..4}, complexity={2,4,6,8} budget={1,10}, minExamplesToLaminate={5,10,100}
      check: no active variables -- pure random -- no verbose
3) Implement ExtraTrees, and eventually standard decision trees

Experiences - Proteins:
 * Nouvelles features: prev et next amino acid de chaque type; delta de ObjectVector[DenseDoubleVector]; local/global histogram
 * Essayer du Totally corrective boosting
 
Lire:
http://www-connex.lip6.fr/~amini/RelatedWorks/Has99.pdf

Luape-Other:
 * Go: rankboost + large-scale boosting
 * Go: support for polymorphism, neighborhood, regions
 * Proteins-DSB: re-entrant
 * Proteins-MT: multi-task
 * Proteins-CM: cascade
 * Apprentissage d'une gaussienne conditionelle => boosting joint de la moyenne et de l'ecart-type
    ==> application dans les continuous bandits
    ==> application dans le formula discovery

Lua-Misc:
 * Move namespace lbcpp::lua into lua (-> introspection generator must be adapted)
 * Metamethods for ipairs() and pairs()
 * Serialisation of subspecified expressions
 * derivable: Gerer les gradient et les DoubleVector 
 * derivable: Generate function that computes both the output and all derivatives
 * derivable: Advanced formula simplification
 * New 'goal' extension to integrate inference and learning

Proteins:
 * Ajouter des features de segments

Core:
 * Renommer MultiLinearLearnableFunction en ParallelLearnableFunction<T>
 * MapContainerFunction: la transformer en ProxyFunction, faire la version parallele, absorber le Apply des container

Explorer:
 * LogScale dans les curves
 * Systeme d'export/import de fichiers general
 * Export as CSV
 * ExecutionTrace: refermer les noeuds au fur et à mesure
 * ExecutionTrace: Améliorer le système de colonnes
 * Explorer: Faire un mecanisme general pour la gestion des FileFormat, utiliser sur les sgf par exemple
 * Explorer: Faire une vrai classe de base ObjectComponent qui absorbe ComponentWithPreferedSize / VariableSelector et qui gere les differents cas:
     topLevel | insideTree | oneLineComponent
 * Explorer: interfaces 
     - Importer: String -> UIImporter: (getName(), doesRecognizeFile(), perform())
     - Exporter: Type -> UIExporter: (getName(), getDefaultExtension(), perform())
     - Command: Type -> UICommand: (getIcon(), getName(), perform())
     - TreeItems: Type -> UITreeItemBuilder: (getIcon(), getToolTip(), getAttributes(), perform())
     - Component: Type -> UIComponent: (preferedSize, variableSelector, parameters, ...)

Go:
 * integrate's olivier last modifs
 * Nouvelles features
 * Courbes dans l'evaluateur
 * GoPatterns
 * Utilisation du manager
