/*-----------------------------------------.---------------------------------.
| Filename: FeatureAcceptVisitor.lcpp      | This example illustrates a      |
| Author  : Francis Maes                   |  simple feature generator       |
| Started : 21/07/2009 16:26               |  combined with a simple feature |
`------------------------------------------/   visitor.                      |
                               |                                             |
                               `--------------------------------------------*/
using namespace lbcpp;

featureGenerator nRandomFeatures(size_t n)
{
  for (size_t i = 0; i < n; ++i)
    featureSense(i, Random::getInstance().sampleDouble());
}

featureGenerator myFeatureGenerator()
{
  featureSense("unitFeature", 1.0);
  featureScope("random1") {
    featureCall nRandomFeatures(5);
  }
  featureCall("random2") nRandomFeatures(5); // syntaxic sugar for 'featureScope("random2") featureCall ...'
}

class MyFeatureVisitor : public FeatureVisitor
{
public:
  virtual bool featureEnter(FeatureDictionaryPtr dictionary, size_t index)
  {
    std::cout << "featureEnter, scope = " << dictionary->getScopes()->getString(index) << std::endl;
    return true;
  }

  virtual void featureSense(FeatureDictionaryPtr dictionary, size_t index, double value)
  {
    std::cout << "featureSense, name = " << dictionary->getFeatures()->getString(index) << ", value = " << value << std::endl;
  }

  virtual void featureLeave()
  {
    std::cout << "featureLeave" << std::endl;
  }
};

int main(int argc, char* argv[])
{
  FeatureVisitorPtr featureVisitor = new MyFeatureVisitor();
  FeatureGeneratorPtr featureGenerator = myFeatureGenerator();
  
  std::cout << "Feature Generator Accept:" << std::endl;
  featureGenerator->accept(featureVisitor);
  std::cout << std::endl << "Feature Dictionary:" << std::endl;
  std::cout << featureGenerator->getDictionary()->toString() << std::endl;
  return 0;
}
