/*-----------------------------------------.---------------------------------.
 | Filename: LatinHypercubeVectorSampler.h  | Latin Hypercube Sampler         |
 | Author  : Denny Verbeeck                 |                                 |
 | Started : 25/02/2013 12:49               |                                 |
 `------------------------------------------/                                 |
                                |                                             |
                                `--------------------------------------------*/

#ifndef ML_SAMPLER_LATIN_HYPERCUBE_H_
# define ML_SAMPLER_LATIN_HYPERCUBE_H_

# include <ml/Sampler.h>

namespace lbcpp
{

/** Class for creating a Latin Hypercube Sample of a domain.
 *  Each dimension of the input domain (with dimensionality \f$d\f$) is 
 *  divided in to \f$N\f$ equally probable intervals. This partitions the
 *  input space into \f$N^d\f$ equally probable subspaces. Samples are
 *  chosen by uniformly sampling such a subspace. Additionally no two
 *  samples share the same interval for the same dimension. As a result,
 *  a total of \f$N\f$ samples are generated by the sample() function.
 **/
  
class LatinHypercubeVectorSampler : public Sampler
{
public:
  /** Constructor **/
  LatinHypercubeVectorSampler(size_t numIntervals = 10 /**< Number of intervals \f$N\f$ */) 
    : numIntervals(numIntervals) {}
  
  virtual void initialize(ExecutionContext& context, const DomainPtr& domain)
  {
    this->domain = domain.staticCast<VectorDomain>()->getElementsDomain().staticCast<ScalarVectorDomain>();
    intervals.resize(this->domain->getNumDimensions());
    for (size_t d = 0; d < this->domain->getNumDimensions(); ++d)
    {
      intervals[d].resize(numIntervals);
      double step = (this->domain->getUpperLimit(d) - this->domain->getLowerLimit(d)) / numIntervals;
      double val = this->domain->getLowerLimit(d);
      for (size_t i = 0; i < numIntervals; ++i, val += step)
        intervals[d][i] = Interval(val, val + step);
    }
  }
  
  /** Create a Latin Hypercube Sample of size \f$N\f$.
   *  \return An OVector containing DenseDoubleVector. Each DenseDoubleVector is one sample.
   **/
  virtual ObjectPtr sample(ExecutionContext& context) const
  {
    jassert(numIntervals);
    std::vector<std::vector<Interval> > remainingIntervals(intervals);  // remaining intervals from which to choose
    
    RandomGeneratorPtr random = context.getRandomGenerator();
    OVectorPtr res = vector(denseDoubleVectorClass(), numIntervals);
    
    for (size_t i = 0; i < numIntervals; ++i)
    {
      DenseDoubleVectorPtr sample = new DenseDoubleVector(domain->getNumDimensions(), 0.0);
      for (size_t d = 0; d < domain->getNumDimensions(); ++d)
      {
        int interval = random->sampleInt(numIntervals);
        sample->setValue(d, random->sampleDouble(remainingIntervals[d][interval].first, remainingIntervals[d][interval].second));
        // O(1) alternative to erase, since order of the elements does not matter
        remainingIntervals[d][interval] = remainingIntervals[d].back();
        remainingIntervals[d].pop_back();
      }
      res->set(i, sample);
    }
    return res;
  }
  
protected:
  friend class LatinHypercubeVectorSamplerClass;
  
  typedef std::pair<double, double> Interval;           /**< Pair of doubles, representing a domain               */
  
  ScalarVectorDomainPtr domain;                         /**< Pointer to the domain in which we sample             */
  size_t numIntervals;                                  /**< Number of intervals \f$N\f$                          */
  std::vector<std::vector<Interval> > intervals;        /**< Collection of available intervals for each dimension */
};

}; /* namespace lbcpp */

#endif // !ML_SAMPLER_LATIN_HYPERCUBE_H_
