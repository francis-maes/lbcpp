<?xml version="1.0" encoding="UTF-8"?>

<library name="Sampler" directory="Sampler">

  <!-- Base classes -->
  <class name="Sampler" abstract="yes"/>
  <class name="DecoratorSampler" base="Sampler" abstract="yes">
    <variable type="Sampler" name="sampler"/>
  </class>

  <!-- Generic Samplers -->
  <class name="BinaryMixtureSampler" base="Sampler">
    <constructor arguments="SamplerPtr sampler1, SamplerPtr sampler2, double probability"/>
    <variable type="Sampler" name="sampler1"/>
    <variable type="Sampler" name="sampler2"/>
    <variable type="Probability" name="probability"/>
  </class>

  <!-- Scalar Samplers -->
  <class name="GaussianSampler" base="Sampler">
    <constructor arguments="double mean, double standardDeviation"/>
    
    <variable type="Double" name="mean"/>
    <variable type="Double" name="standardDeviation"/>
  </class>
  
  <!-- ScalarVector Samplers -->
  <class name="UniformScalarVectorSampler" base="Sampler">
    <constructor/>
  </class>
  
  <class name="DiagonalGaussianSampler" base="Sampler">
    <constructor/>
    <variable type="Double" name="learningRate"/>
    <variable type="DenseDoubleVector[PositiveIntegerEnumeration,Double]" name="mean"/>
    <variable type="DenseDoubleVector[PositiveIntegerEnumeration,Double]" name="stddev"/>
  </class>
  <class name="DiagonalGaussianDistributionSampler" base="DiagonalGaussianSampler">
    <constructor returnType="Sampler"/>
  </class>

  <!-- Search Samplers -->
  <class name="SearchSampler" base="Sampler" abstract="yes"/>
  
  <class name="RandomSearchSampler" base="SearchSampler">
    <constructor/>
  </class>
  
  <class name="LogLinearActionCodeSearchSampler" base="SearchSampler">
    <constructor arguments="SearchActionCodeGeneratorPtr codeGenerator, double regularizer, double learningRate"/>
    <variable type="SearchActionCodeGenerator" name="codeGenerator"/>
    <variable type="Double" name="regularizer"/>
    <variable type="Double" name="learningRate"/>
    <variable type="DenseDoubleVector[PositiveIntegerEnumeration,Double]" name="parameters"/>
  </class>
  
  <!-- Vector Samplers -->
  <class name="SamplerToVectorSampler" base="Sampler">
    <constructor arguments="SamplerPtr sampler, size_t numSamples"/>
    <variable type="Sampler" name="sampler"/>
    <variable type="PositiveInteger" name="numSamples"/>
  </class>
  
  <class name="LatinHypercubeVectorSampler" base="Sampler">
    <constructor arguments="size_t numIntervals, bool enforceEdges"/>
    <variable type="PositiveInteger" name="numIntervals"/>
  </class>
  
  <class name="EdgeVectorSampler" base="Sampler">
    <constructor/>
  </class>
  
  <class name="SubsetVectorSampler" base="Sampler">
    <constructor arguments="SamplerPtr vectorSampler, size_t subsetSize"/>
    <variable type="Sampler" name="vectorSampler"/>
    <variable type="PositiveInteger" name="subsetSize"/>
  </class>
  
</library>
