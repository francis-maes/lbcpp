<?xml version="1.0" encoding="UTF-8"?>

<library name="Solver" directory="Solver">

  <!-- Solver Base Classes -->
  <class name="Solver" abstract="yes"/>
  <class name="IterativeSolver" base="Solver" abstract="yes">
    <variable type="PositiveInteger" name="numIterations"/>
  </class>
  
  <!-- Solver Evaluators -->
  <class name="SolverEvaluator" abstract="yes"/>
  <class name="SingleObjectiveSolverEvaluator" base="SolverEvaluator">
    <constructor arguments="FitnessPtr&amp; bestFitness"/>
  </class>
  <class name="HyperVolumeSolverEvaluator" base="SolverEvaluator">
    <constructor arguments="ParetoFrontPtr front"/>
    <variable type="ParetoFront" name="front"/>
  </class>

  <!-- Solver Callbacks -->
  <class name="SolverCallback" abstract="yes"/>
  <class name="CompositeSolverCallback" base="SolverCallback">
    <constructor arguments="SolverCallbackPtr callback1, SolverCallbackPtr callback2, SolverCallbackPtr callback3"/>
    <constructor arguments="SolverCallbackPtr callback1, SolverCallbackPtr callback2"/>
    <variable type="Vector[SolverCallback]" name="callbacks"/>
  </class>
  <class name="StoreBestFitnessSolverCallback" base="SolverCallback">
    <constructor arguments="FitnessPtr&amp; bestFitness"/>
  </class>
  <class name="StoreBestSolutionSolverCallback" base="SolverCallback">
    <constructor arguments="ObjectPtr&amp; bestSolution"/>
  </class>
  <class name="StoreBestSolverCallback" base="SolverCallback">
    <constructor arguments="ObjectPtr&amp; bestSolution, FitnessPtr&amp; bestFitness"/>
  </class>
  
  <class name="FillParetoFrontSolverCallback" base="SolverCallback">
    <constructor arguments="ParetoFrontPtr front"/>
    <variable type="ParetoFront" name="front"/>
  </class>
  <class name="MaxEvaluationsSolverCallback" base="SolverCallback">
    <constructor arguments="size_t maxEvaluations"/>
    <variable type="PositiveInteger" name="maxEvaluations"/>
  </class>
  <class name="EvaluatorSolverCallback" base="SolverCallback" abstract="yes">
    <variable type="SolverEvaluator" name="solverEvaluator"/>
    <variable type="Vector[Integer]" name="evaluations"/>
    <variable type="Vector[Double]" name="cpuTimes"/>
    <variable type="Vector[Double]" name="scores"/>
  </class>
  <class name="EvaluationPeriodEvaluatorSolverCallback" base="EvaluatorSolverCallback">
    <constructor arguments="SolverEvaluatorPtr solverEvaluator, IVectorPtr evaluations, DVectorPtr cpuTimes, DVectorPtr scores,  size_t evaluationPeriod" returnType="SolverCallback"/>
    <variable type="PositiveInteger" name="evaluationPeriod"/>
  </class>
  <class name="TimePeriodEvaluatorSolverCallback" base="EvaluatorSolverCallback">
    <constructor arguments="SolverEvaluatorPtr solverEvaluator, IVectorPtr evaluations, DVectorPtr cpuTimes, DVectorPtr scores,  double evaluationPeriod" returnType="SolverCallback"/>
    <variable type="Double" name="evaluationPeriod"/>
  </class>
  <class name="LogTimePeriodEvaluatorSolverCallback" base="TimePeriodEvaluatorSolverCallback">
    <constructor arguments="SolverEvaluatorPtr solverEvaluator, IVectorPtr evaluations, DVectorPtr cpuTimes, DVectorPtr scores,  double evaluationPeriod, double factor" returnType="SolverCallback"/>
    <variable type="Double" name="factor"/>
  </class>
  <class name="AggregatorEvaluatorSolverCallback" base="SolverCallback">
    <constructor arguments="SolverEvaluatorPtr evaluator, std::vector&lt;ScalarVariableMeanAndVariancePtr&gt;* data"/>
    <variable type="SolverEvaluator" name="evaluator"/>
  </class>

  <!-- Solvers -->
  <class name="RandomSolver" base="IterativeSolver">
    <constructor arguments="SamplerPtr sampler, size_t numIterations"/>
    <variable type="Sampler" name="sampler"/>
  </class>

  <class name="NRPASolver" base="Solver">
    <constructor arguments="SamplerPtr sampler, size_t level, size_t numIterationsPerLevel"/>
    <variable type="Sampler" name="sampler"/>
    <variable type="PositiveInteger" name="level"/>
    <variable type="PositiveInteger" name="numIterationsPerLevel"/>
  </class>
  
  <class name="BeamNRPASolver" base="NRPASolver">
    <constructor arguments="SamplerPtr sampler, size_t level, size_t numIterationsPerLevel, size_t beamSizeAtFirstLevel, size_t beamSizeAtHigherLevels" returnType="Solver"/>
    <variable type="PositiveInteger" name="beamSizeAtFirstLevel"/>
    <variable type="PositiveInteger" name="beamSizeAtHigherLevels"/>
  </class>


  <!-- Population Based Optimizers -->
  <class name="PopulationBasedSolver" base="IterativeSolver" abstract="yes">
    <variable type="PositiveInteger" name="populationSize"/>
  </class>

  <class name="CrossEntropySolver" base="PopulationBasedSolver">
    <constructor arguments="SamplerPtr sampler, size_t populationSize, size_t numTrainingSamples, size_t numGenerations, bool elitist, SolutionComparatorPtr comparator"/>
    <variable type="Sampler" name="sampler"/>
    <variable type="PositiveInteger" name="numTrainingSamples"/>
    <variable type="Boolean" name="elitist"/>
    <variable type="SolutionComparator" name="comparator"/>
  </class>

  <!-- Meta Solvers -->
  <class name="RepeatSolver" base="IterativeSolver">
    <constructor arguments="SolverPtr solver, size_t numIterations"/>
    <variable type="Solver" name="solver"/>
  </class>

  <class name="MABMetaSolver" base="IterativeSolver">
    <variable type="IterativeSolver" name="baseOptimizer"/>
    <variable type="PositiveInteger" name="numInstances"/>
    <variable type="Double" name="explorationCoefficient"/>
  </class>
  
  <!-- Surrogate based solvers -->

  <class name="SurrogateBasedSolverInformation">
    <variable type="Problem" name="problem"/>
    <variable type="SolutionVector" name="solutions"/>
    <variable type="Expression" name="surrogateModel"/>
    <variable type="PositiveInteger" name="stepNumber"/>
  </class>
  <uicomponent name="SurrogateBasedSolverInformationComponent" type="SurrogateBasedSolverInformation"/>

  <class name="SurrogateBasedSolver" base="IterativeSolver" abstract="yes">
    <variable type="Sampler" name="initialVectorSampler"/>
    <variable type="Solver" name="surrogateSolver"/>
    <variable type="VariableEncoder" name="variableEncoder"/>
    <variable type="SelectionCriterion" name="selectionCriterion"/>
  </class>

  <class name="BatchSurrogateBasedSolver" base="SurrogateBasedSolver">
    <constructor arguments="SamplerPtr initialVectorSampler, SolverPtr surrogateLearner, SolverPtr surrogateSolver, VariableEncoderPtr variableEncoder, SelectionCriterionPtr selectionCriterion, size_t numIterations" returnType="IterativeSolver"/>
    <variable type="Solver" name="surrogateLearner"/>
  </class>

  <class name="IncrementalSurrogateBasedSolver" base="SurrogateBasedSolver">
    <constructor arguments="SamplerPtr initialVectorSampler, IncrementalLearnerPtr surrogateLearner, SolverPtr surrogateSolver, VariableEncoderPtr variableEncoder, SelectionCriterionPtr selectionCriterion, size_t numIterations" returnType="IterativeSolver"/>
    <variable type="IncrementalLearner" name="surrogateLearner"/>
  </class>
  
</library>
