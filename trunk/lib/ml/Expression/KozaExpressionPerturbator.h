/*-----------------------------------------.---------------------------------.
| Filename: KozaExpressionPerturbator.h    | Koza Expression Perturbator     |
| Author  : Francis Maes                   |                                 |
| Started : 20/10/2012 22:21               |                                 |
`------------------------------------------/                                 |
                               |                                             |
                               `--------------------------------------------*/

#ifndef LBCPP_ML_EXPRESSION_PERTURBATOR_KOZA_H_
# define LBCPP_ML_EXPRESSION_PERTURBATOR_KOZA_H_

# include <ml/ExpressionSampler.h>

namespace lbcpp
{

// replaces a randomly chosen node by a subtree generated by a given sampler
class KozaExpressionPerturbator : public ExpressionPerturbator
{
public:
  KozaExpressionPerturbator(DepthControlledExpressionSamplerPtr sampler, size_t maxRegenerationDepth, size_t maxDepth)
    : sampler(sampler), maxRegenerationDepth(maxRegenerationDepth), maxDepth(maxDepth) {}
  KozaExpressionPerturbator() : maxRegenerationDepth(0), maxDepth(0) {}
    
  virtual ExpressionPtr sampleExpression(ExecutionContext& context, const ExpressionPtr& expression) const
  {
    RandomGeneratorPtr random = context.getRandomGenerator();
    ExpressionPtr selectedNode = expression->sampleNode(random);
    size_t selectedNodeDepth = expression->getNodeDepth(selectedNode);
    if (selectedNodeDepth > maxDepth)
      return ExpressionPtr();
    size_t maxMutationDepth = maxDepth - selectedNodeDepth + 1;
    if (maxMutationDepth > maxRegenerationDepth)
      maxMutationDepth = maxRegenerationDepth;
    jassert(maxMutationDepth >= 1);
    ExpressionPtr newNode = sampler->sampleTree(random, 1, maxMutationDepth);
    return expression->cloneAndSubstitute(selectedNode, newNode);
  }

protected:
  friend class KozaExpressionPerturbatorClass;

  DepthControlledExpressionSamplerPtr sampler;
  size_t maxRegenerationDepth;
  size_t maxDepth;
};

}; /* namespace lbcpp */

#endif // !LBCPP_ML_EXPRESSION_PERTURBATOR_KOZA_H_
