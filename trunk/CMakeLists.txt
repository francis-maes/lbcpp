PROJECT(LBCpp)
cmake_minimum_required(VERSION 2.6)

IF (CMAKE_SYSTEM_NAME STREQUAL "Linux" AND CMAKE_COMPILER_IS_GNUCC)
SET (CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -fPIC -std=c++0x")
SET (CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -fPIC -D_DEBUG -std=c++0x")
SET (CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} -fPIC")
SET (CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -fPIC -D_DEBUG")
ENDIF (CMAKE_SYSTEM_NAME STREQUAL "Linux" AND CMAKE_COMPILER_IS_GNUCC)

OPTION(COMPILE_FOR_BOINC "Compile for BOINC" OFF)

IF(COMPILE_FOR_BOINC)
  FIND_PACKAGE(Subversion)
  IF(Subversion_FOUND)
    Subversion_WC_INFO(${CMAKE_CURRENT_SOURCE_DIR} ER)
    SET(SUBVERSION_REVISION ${ER_WC_REVISION})
    STRING(REGEX REPLACE "([0-9][0-9]).*" "\\1" SUBVERSION_SUFFIX_A "${ER_WC_REVISION}")
    STRING(REGEX REPLACE ".*([0-9][0-9])" "\\1" SUBVERSION_SUFFIX_B "${ER_WC_REVISION}")
    SET(SUBVERSION_SUFFIX "${SUBVERSION_SUFFIX_A}.${SUBVERSION_SUFFIX_B}")
  ENDIF(Subversion_FOUND)
  
  IF(UNIX)
    IF(APPLE)
      IF(CMAKE_SIZEOF_VOID_P MATCHES 4)
        SET(PLATFORM_SUFFIX "i686-apple-darwin")
      ELSE(CMAKE_SIZEOF_VOID_P MATCHES 4)
        SET(PLATFORM_SUFFIX "x86_64-apple-darwin")
      ENDIF(CMAKE_SIZEOF_VOID_P MATCHES 4)
    ELSE(APPLE)
      IF(CMAKE_SIZEOF_VOID_P MATCHES 4)
        SET(PLATFORM_SUFFIX "i686-pc-linux-gnu")
      ELSE(CMAKE_SIZEOF_VOID_P MATCHES 4)
        SET(PLATFORM_SUFFIX "x86_64-pc-linux-gnu")
      ENDIF(CMAKE_SIZEOF_VOID_P MATCHES 4) 
    ENDIF(APPLE)
  ELSE(UNIX)
    # TODO
  ENDIF(UNIX)
  
  SET(NAME_FILE_SUFFIX "_${SUBVERSION_SUFFIX}_${PLATFORM_SUFFIX}")
ENDIF(COMPILE_FOR_BOINC)

IF   (WIN32)
  SET(LBCPP_BIN_DIRECTORY ${LBCpp_SOURCE_DIR}/bin)
ELSE (WIN32)
  IF   (UNIX)
    IF   (APPLE)
      SET(LBCPP_BIN_DIRECTORY ${LBCpp_SOURCE_DIR}/bin)
    ELSE (APPLE)
      SET(LBCPP_BIN_DIRECTORY ${LBCpp_SOURCE_DIR}/bin/${CMAKE_BUILD_TYPE})
    ENDIF(APPLE)
  ELSE  (UNIX)
    MESSAGE(FATAL_ERROR "Unsupported platform.")
  ENDIF (UNIX)
ENDIF(WIN32)

SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${LBCPP_BIN_DIRECTORY})
SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${LBCPP_BIN_DIRECTORY})

OPTION(LBCPP_NETWORKING "Enable Networking" ON)
OPTION(LBCPP_USER_INTERFACE "Enable UserInterface" ON)

IF(LBCPP_NETWORKING)
  ADD_DEFINITIONS(-DLBCPP_NETWORKING)
ENDIF(LBCPP_NETWORKING)
IF(LBCPP_USER_INTERFACE)
  ADD_DEFINITIONS(-DLBCPP_USER_INTERFACE)
ENDIF(LBCPP_USER_INTERFACE)

###
### C++ Introspection support
###
ADD_SUBDIRECTORY(introgen)

# generate a .cpp file from an XML introspection file
# ex: GENERATE_INTROSPECTION_CODE(in.xml out.cpp) 
MACRO (GENERATE_INTROSPECTION_CODE INPUT OUTPUT)
  GET_TARGET_PROPERTY(INTROSPECTION_GENERATOR_COMMAND IntrospectionGenerator LOCATION)
  ADD_CUSTOM_COMMAND(
    OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/${OUTPUT}
    COMMAND ${INTROSPECTION_GENERATOR_COMMAND} ${CMAKE_CURRENT_SOURCE_DIR}/${INPUT} ${CMAKE_CURRENT_BINARY_DIR}/${OUTPUT} ${CMAKE_CURRENT_SOURCE_DIR}
    MAIN_DEPENDENCY ${INPUT}
    DEPENDS ${INPUT} ${INTROSPECTION_GENERATOR_COMMAND}
    COMMENT "Generating C++ Introspection code ${OUTPUT}."
  )
ENDMACRO(GENERATE_INTROSPECTION_CODE)


MACRO(SOURCE_SUB_GROUP ROOT_NAME SUB_NAME) # other args
  IF (WIN32)
    SOURCE_GROUP(${ROOT_NAME}\\${SUB_NAME} ${ARGN})
  ELSE (WIN32)
    SOURCE_GROUP(${ROOT_NAME}/${SUB_NAME} ${ARGN})
  ENDIF (WIN32)
ENDMACRO(SOURCE_SUB_GROUP)


MACRO(SOURCE_SUB_GROUP2 ROOT_NAME SUB_NAME SUB_NAME2) # other args
  IF (WIN32)
    SOURCE_GROUP(${ROOT_NAME}\\${SUB_NAME}\\${SUB_NAME2} ${ARGN})
  ELSE (WIN32)
    SOURCE_GROUP(${ROOT_NAME}/${SUB_NAME}/${SUB_NAME2} ${ARGN})
  ENDIF (WIN32)
ENDMACRO(SOURCE_SUB_GROUP2)

ADD_SUBDIRECTORY(juce)
ADD_SUBDIRECTORY(src)
ADD_SUBDIRECTORY(runworkunit)

IF(LBCPP_NETWORKING)
  ADD_SUBDIRECTORY(sendworkunit)
ENDIF(LBCPP_NETWORKING)

ADD_SUBDIRECTORY(unzipper)
ADD_SUBDIRECTORY(projects)

IF (LBCPP_USER_INTERFACE)
  ADD_SUBDIRECTORY(explorer)
ENDIF(LBCPP_USER_INTERFACE)

OPTION(LBCPP_DOCUMENTATION "Include documentation into the project" OFF)
IF (LBCPP_DOCUMENTATION)
  ADD_SUBDIRECTORY(dox)
ENDIF (LBCPP_DOCUMENTATION)
