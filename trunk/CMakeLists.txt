PROJECT(LBCpp)
cmake_minimum_required(VERSION 2.6)

IF (CMAKE_SYSTEM_NAME STREQUAL "Linux" AND CMAKE_COMPILER_IS_GNUCC)
SET (CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -fPIC -std=c++0x")
SET (CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -fPIC -D_DEBUG -std=c++0x")
SET (CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} -fPIC")
SET (CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -fPIC -D_DEBUG")
ENDIF (CMAKE_SYSTEM_NAME STREQUAL "Linux" AND CMAKE_COMPILER_IS_GNUCC)

IF   (WIN32)
  SET(LBCPP_BIN_DIRECTORY ${LBCpp_SOURCE_DIR}/bin)
ELSE (WIN32)
  IF   (UNIX)
    IF   (APPLE)
      SET(LBCPP_BIN_DIRECTORY ${LBCpp_SOURCE_DIR}/bin)
    ELSE (APPLE)
      SET(LBCPP_BIN_DIRECTORY ${LBCpp_SOURCE_DIR}/bin/${CMAKE_BUILD_TYPE})
    ENDIF(APPLE)
  ELSE  (UNIX)
    MESSAGE(FATAL_ERROR "Unsupported platform.")
  ENDIF (UNIX)
ENDIF(WIN32)

SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${LBCPP_BIN_DIRECTORY})
SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${LBCPP_BIN_DIRECTORY})

# Search for shared library in current directory (instead of hard links)
IF   (UNIX)
  IF	(APPLE)
    # FIXME : not working yet
    #SET(INSTALL_NAME_DIR "@executable_path")
    #SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -Wl,-executable_path,@executable_path")
    #SET(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -Wl,-executable_path,@executable_path")
    #SET(CMAKE_SKIP_BUILD_RPATH  TRUE)
    #SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -Wl,-rpath,@executable_path")
    #SET(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -Wl,-rpath,@executable_path")
    #SET(BUILD_WITH_INSTALL_RPATH 1)
    #SET(INSTALL_NAME_DIR "@executable_path")
  ELSE	(APPLE)
    # $ORIGIN AND $$ORIGIN needed due to some "bug" in CMAKE, see: http://www.cmake.org/pipermail/cmake/2008-January/019290.html
    SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -Wl,-rpath,'$ORIGIN:$$ORIGIN'")
    SET(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -Wl,-rpath,'$ORIGIN:$$ORIGIN'") 
  ENDIF(APPLE)
ENDIF(UNIX)

OPTION(LBCPP_NETWORKING "Networking components" ON)
OPTION(LBCPP_UI "UserInterface components" ON)

IF(LBCPP_NETWORKING)
  ADD_DEFINITIONS(-DLBCPP_NETWORKING)
ENDIF(LBCPP_NETWORKING)
IF(LBCPP_UI)
  ADD_DEFINITIONS(-DLBCPP_UI)
ENDIF(LBCPP_UI)

###
### C++ Introspection support
###
ADD_SUBDIRECTORY(introgen)

# generate a .cpp file from an XML introspection file
# ex: GENERATE_INTROSPECTION_CODE(in.xml out.cpp) 
MACRO (GENERATE_INTROSPECTION_CODE INPUT OUTPUT)
  GET_TARGET_PROPERTY(INTROSPECTION_GENERATOR_COMMAND IntrospectionGenerator LOCATION)
  ADD_CUSTOM_COMMAND(
    OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/${OUTPUT}
    COMMAND ${INTROSPECTION_GENERATOR_COMMAND} ${CMAKE_CURRENT_SOURCE_DIR}/${INPUT} ${CMAKE_CURRENT_BINARY_DIR}/${OUTPUT} ${CMAKE_CURRENT_SOURCE_DIR}
    MAIN_DEPENDENCY ${INPUT}
    DEPENDS ${INPUT} ${INTROSPECTION_GENERATOR_COMMAND}
    COMMENT "Generating C++ Introspection code ${OUTPUT}."
  )
ENDMACRO(GENERATE_INTROSPECTION_CODE)


MACRO(SOURCE_SUB_GROUP ROOT_NAME SUB_NAME) # other args
  IF (WIN32)
    SOURCE_GROUP(${ROOT_NAME}\\${SUB_NAME} ${ARGN})
  ELSE (WIN32)
    SOURCE_GROUP(${ROOT_NAME}/${SUB_NAME} ${ARGN})
  ENDIF (WIN32)
ENDMACRO(SOURCE_SUB_GROUP)


MACRO(SOURCE_SUB_GROUP2 ROOT_NAME SUB_NAME SUB_NAME2) # other args
  IF (WIN32)
    SOURCE_GROUP(${ROOT_NAME}\\${SUB_NAME}\\${SUB_NAME2} ${ARGN})
  ELSE (WIN32)
    SOURCE_GROUP(${ROOT_NAME}/${SUB_NAME}/${SUB_NAME2} ${ARGN})
  ENDIF (WIN32)
ENDMACRO(SOURCE_SUB_GROUP2)

ADD_SUBDIRECTORY(juce)
ADD_SUBDIRECTORY(src)
ADD_SUBDIRECTORY(runworkunit)

IF(LBCPP_NETWORKING)
  ADD_SUBDIRECTORY(sendworkunit)
ENDIF(LBCPP_NETWORKING)

ADD_SUBDIRECTORY(unzipper)
ADD_SUBDIRECTORY(projects)

IF (LBCPP_UI)
  OPTION(LBCPP_EXPLORER "Include explorer into the project" ON)
  IF (LBCPP_EXPLORER)
    ADD_SUBDIRECTORY(explorer)
  ENDIF(LBCPP_EXPLORER)
ENDIF(LBCPP_UI)

OPTION(LBCPP_DOCUMENTATION "Include documentation into the project" OFF)
IF (LBCPP_DOCUMENTATION)
  ADD_SUBDIRECTORY(dox)
ENDIF (LBCPP_DOCUMENTATION)
