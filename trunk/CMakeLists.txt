PROJECT(LBCpp)
cmake_minimum_required(VERSION 2.6)

SET(CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/CMakeModules" ${CMAKE_MODULE_PATH})

##
## Compiler options
##
IF (CMAKE_SYSTEM_NAME STREQUAL "Linux" AND CMAKE_COMPILER_IS_GNUCC)

SET (CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -fPIC")
SET (CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -fPIC -D_DEBUG")
SET (CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} -fPIC")
SET (CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -fPIC -D_DEBUG")

OPTION(ENABLE_CPP0X_FEATUERS "Enable C++-0x Features" ON)
IF (ENABLE_CPP0X_FEATURES)
  SET (CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -std=c++0x")
  SET (CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -std=c++0x")
ENDIF (ENABLE_CPP0X_FEATURES)

ENDIF (CMAKE_SYSTEM_NAME STREQUAL "Linux" AND CMAKE_COMPILER_IS_GNUCC)

##
## Support for precompiled headers
##
MACRO(FILTER_CXX_SOURCES OUTPUT_VARIABLE) # INPUT_SOURCES
  FOREACH(SOURCE ${ARGN})
    STRING(REGEX MATCH "^.*\\.cpp$" MATCHED ${SOURCE})
    IF   (MATCHED AND NOT ("${SOURCE}" MATCHES "^.*precompiled\\.cpp$"))
      SET(${OUTPUT_VARIABLE} ${${OUTPUT_VARIABLE}} ${SOURCE})
    ENDIF(MATCHED AND NOT ("${SOURCE}" MATCHES "^.*precompiled\\.cpp$"))
  ENDFOREACH(SOURCE)
ENDMACRO(FILTER_CXX_SOURCES)

IF (WIN32)
  MACRO(ADD_PRECOMPILED_HEADER INPUT_SOURCE INPUT_HEADER OUTPUT_PCH)
    SET_SOURCE_FILES_PROPERTIES(${INPUT_SOURCE} PROPERTIES
      COMPILE_FLAGS "/Yc\"${INPUT_HEADER}\" /Fp\"${OUTPUT_PCH}\""
    )
    SOURCE_GROUP("Precompiled Headers" FILES ${INPUT_HEADER} ${INPUT_SOURCE})
  ENDMACRO(ADD_PRECOMPILED_HEADER)
  MACRO   (USE_PRECOMPILED_HEADER INPUT_HEADER INPUT_PCH SOURCE_FILES_VAR) # SOURCE_FILES
    FILTER_CXX_SOURCES(CXX_SOURCES ${${SOURCE_FILES_VAR}})
    FOREACH(CXX_FILE ${CXX_SOURCES})
      SET_SOURCE_FILES_PROPERTIES(${CXX_FILE} PROPERTIES
        COMPILE_FLAGS "/Yu\"${INPUT_HEADER}\" /Fp\"${INPUT_PCH}\""
      )
    ENDFOREACH(CXX_FILE)
  ENDMACRO(USE_PRECOMPILED_HEADER HEADER_PATH)
ELSE (WIN32)
  MACRO   (ADD_PRECOMPILED_HEADER INPUT_CPP OUTPUT_PCH)
  ENDMACRO(ADD_PRECOMPILED_HEADER)
  MACRO   (USE_PRECOMPILED_HEADER HEADER_PATH)
  ENDMACRO(USE_PRECOMPILED_HEADER HEADER_PATH)    
ENDIF (WIN32)

MACRO(GENERATE_LBCPP_PRECOMPILED PRECOMPILED_FILE SOURCES)
  IF   ("${CMAKE_GENERATOR}" MATCHES "Visual Studio")
    SET(PCH_FILE ${CMAKE_CURRENT_BINARY_DIR}/${PRECOMPILED_FILE}_$(ConfigurationName).pch)
  ELSE ("${CMAKE_GENERATOR}" MATCHES "Visual Studio")
      SET(PCH_FILE ${CMAKE_CURRENT_BINARY_DIR}/${PRECOMPILED_FILE}.pch)
  ENDIF("${CMAKE_GENERATOR}" MATCHES "Visual Studio")
  ADD_PRECOMPILED_HEADER(${PRECOMPILED_FILE}.cpp ${PRECOMPILED_FILE}.h ${PCH_FILE})
  USE_PRECOMPILED_HEADER(${PRECOMPILED_FILE}.h ${PCH_FILE} ${SOURCES})
ENDMACRO(GENERATE_LBCPP_PRECOMPILED)

##
## "Compile for BOINC" option
##
OPTION(COMPILE_FOR_BOINC "Compile for BOINC" OFF)

IF(COMPILE_FOR_BOINC)
  FIND_PACKAGE(Subversion)
  IF(Subversion_FOUND)
    Subversion_WC_INFO(${CMAKE_CURRENT_SOURCE_DIR} ER)
    SET(SUBVERSION_REVISION ${ER_WC_REVISION})
    STRING(REGEX REPLACE "([0-9][0-9]).*" "\\1" SUBVERSION_SUFFIX_A "${SUBVERSION_REVISION}")
    STRING(REGEX REPLACE ".*([0-9][0-9])" "\\1" SUBVERSION_SUFFIX_B "${SUBVERSION_REVISION}")
    SET(SUBVERSION_SUFFIX "${SUBVERSION_SUFFIX_A}.${SUBVERSION_SUFFIX_B}")
  ENDIF(Subversion_FOUND)

  IF(UNIX)
    IF(APPLE)
      SET(CMAKE_XCODE_ATTRIBUTE_GCC_VERSION "4.0")
      IF(CMAKE_SIZEOF_VOID_P MATCHES 4)
        SET(PLATFORM_SUFFIX "i686-apple-darwin")
        SET(CMAKE_OSX_ARCHITECTURES i386)
        SET(CMAKE_OSX_DEPLOYMENT_TARGET 10.4)
        SET(CMAKE_OSX_SYSROOT /Developer/SDKs/MacOSX10.4u.sdk)
        ADD_DEFINITIONS(-DMAC_OS_X_VERSION_MAX_ALLOWED=1040)
        ADD_DEFINITIONS(-DMAC_OS_X_VERSION_MIN_REQUIRED=1040)
      ELSE(CMAKE_SIZEOF_VOID_P MATCHES 4)
        SET(PLATFORM_SUFFIX "x86_64-apple-darwin")
        SET(CMAKE_OSX_ARCHITECTURES x86_64)
        SET(CMAKE_OSX_DEPLOYMENT_TARGET 10.5)
        SET(CMAKE_OSX_SYSROOT /Developer/SDKs/MacOSX10.5.sdk)
        ADD_DEFINITIONS(-DMAC_OS_X_VERSION_MAX_ALLOWED=1050)
        ADD_DEFINITIONS(-DMAC_OS_X_VERSION_MIN_REQUIRED=1050)
      ENDIF(CMAKE_SIZEOF_VOID_P MATCHES 4)
    ELSE(APPLE)
      IF(CMAKE_SIZEOF_VOID_P MATCHES 4)
        SET(PLATFORM_SUFFIX "i686-pc-linux-gnu")
      ELSE(CMAKE_SIZEOF_VOID_P MATCHES 4)
        SET(PLATFORM_SUFFIX "x86_64-pc-linux-gnu")
      ENDIF(CMAKE_SIZEOF_VOID_P MATCHES 4) 
    ENDIF(APPLE)
  ELSE(UNIX)
    IF(CMAKE_SIZEOF_VOID_P MATCHES 4)
      SET(PLATFORM_SUFFIX "windows_intelx86")
    ELSE(CMAKE_SIZEOF_VOID_P MATCHES 4)
      SET(PLATFORM_SUFFIX "windows_x86_64")
    ENDIF(CMAKE_SIZEOF_VOID_P MATCHES 4)
  ENDIF(UNIX)
  
  SET(NAME_FILE_SUFFIX "_${SUBVERSION_SUFFIX}_${PLATFORM_SUFFIX}")
ENDIF(COMPILE_FOR_BOINC)

##
## Set LBCPP_BIN_DIRECTORY
##
IF   (WIN32)
  IF (COMPILE_FOR_BOINC)
    SET(LBCPP_BIN_DIRECTORY ${LBCpp_SOURCE_DIR}/bin/BOINC)
  ELSE (COMPILE_FOR_BOINC)
    SET(LBCPP_BIN_DIRECTORY ${LBCpp_SOURCE_DIR}/bin)
  ENDIF(COMPILE_FOR_BOINC)
ELSE (WIN32)
  IF   (UNIX)
    IF   (APPLE)
      IF (COMPILE_FOR_BOINC)
        SET(LBCPP_BIN_DIRECTORY ${LBCpp_SOURCE_DIR}/bin/BOINC)
      ELSE (COMPILE_FOR_BOINC)
        SET(LBCPP_BIN_DIRECTORY ${LBCpp_SOURCE_DIR}/bin)
      ENDIF(COMPILE_FOR_BOINC)
    ELSE (APPLE)
      IF (COMPILE_FOR_BOINC)
        SET(LBCPP_BIN_DIRECTORY ${LBCpp_SOURCE_DIR}/bin/BOINC/${CMAKE_BUILD_TYPE})
      ELSE (COMPILE_FOR_BOINC)
        SET(LBCPP_BIN_DIRECTORY ${LBCpp_SOURCE_DIR}/bin/${CMAKE_BUILD_TYPE})
      ENDIF(COMPILE_FOR_BOINC)
    ENDIF(APPLE)
  ELSE  (UNIX)
    MESSAGE(FATAL_ERROR "Unsupported platform.")
  ENDIF (UNIX)
ENDIF(WIN32)

SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${LBCPP_BIN_DIRECTORY})
SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${LBCPP_BIN_DIRECTORY})

##
## "Enable Networking" and "Enable UserInterface" options
##
OPTION(LBCPP_NETWORKING "Enable Networking" ON)
OPTION(LBCPP_USER_INTERFACE "Enable UserInterface" ON)

IF(LBCPP_NETWORKING)
  ADD_DEFINITIONS(-DLBCPP_NETWORKING)
ENDIF(LBCPP_NETWORKING)
IF(LBCPP_USER_INTERFACE)
  ADD_DEFINITIONS(-DLBCPP_USER_INTERFACE)
ENDIF(LBCPP_USER_INTERFACE)

###
### C++ Introspection support
###
ADD_SUBDIRECTORY(introgen)

# generate a .cpp file from an XML introspection file
# ex: GENERATE_INTROSPECTION_CODE(in.xml out.cpp) 
MACRO (GENERATE_INTROSPECTION_CODE INPUT OUTPUT)
  GET_TARGET_PROPERTY(INTROSPECTION_GENERATOR_COMMAND IntrospectionGenerator LOCATION)
  ADD_CUSTOM_COMMAND(
    OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/${OUTPUT}
    COMMAND ${INTROSPECTION_GENERATOR_COMMAND} ${CMAKE_CURRENT_SOURCE_DIR}/${INPUT} ${CMAKE_CURRENT_BINARY_DIR}/${OUTPUT} ${CMAKE_CURRENT_SOURCE_DIR}
    MAIN_DEPENDENCY ${INPUT}
    DEPENDS ${INPUT} ${INTROSPECTION_GENERATOR_COMMAND}
    COMMENT "Generating C++ Introspection code ${OUTPUT}."
  )
ENDMACRO(GENERATE_INTROSPECTION_CODE)

##
## SOURCE_SUB_GROUP macros
##
MACRO(SOURCE_SUB_GROUP ROOT_NAME SUB_NAME) # other args
  IF (WIN32)
    SOURCE_GROUP(${ROOT_NAME}\\${SUB_NAME} ${ARGN})
  ELSE (WIN32)
    SOURCE_GROUP(${ROOT_NAME}/${SUB_NAME} ${ARGN})
  ENDIF (WIN32)
ENDMACRO(SOURCE_SUB_GROUP)

MACRO(SOURCE_SUB_GROUP2 ROOT_NAME SUB_NAME SUB_NAME2) # other args
  IF (WIN32)
    SOURCE_GROUP(${ROOT_NAME}\\${SUB_NAME}\\${SUB_NAME2} ${ARGN})
  ELSE (WIN32)
    SOURCE_GROUP(${ROOT_NAME}/${SUB_NAME}/${SUB_NAME2} ${ARGN})
  ENDIF (WIN32)
ENDMACRO(SOURCE_SUB_GROUP2)

##
## Lua
##
OPTION(USE_LUAJIT "Use LuaJit" ON)
if(${USE_LUAJIT} EQUAL "1")
  ADD_DEFINITIONS(-DUSE_LUAJIT)
else(${USE_LUAJIT} EQUAL "1")
  ADD_DEFINITIONS(-DUSE_LUACPP)
endif(${USE_LUAJIT} EQUAL "1")
ADD_SUBDIRECTORY(lua)


##
## Sub directories
##
ADD_SUBDIRECTORY(juce)
ADD_SUBDIRECTORY(src)
ADD_SUBDIRECTORY(projects)
ADD_SUBDIRECTORY(programs)

IF (LBCPP_USER_INTERFACE)
  ADD_SUBDIRECTORY(explorer)
ENDIF(LBCPP_USER_INTERFACE)

OPTION(LBCPP_DOCUMENTATION "Include documentation into the project" OFF)
IF (LBCPP_DOCUMENTATION)
  ADD_SUBDIRECTORY(dox)
ENDIF (LBCPP_DOCUMENTATION)
