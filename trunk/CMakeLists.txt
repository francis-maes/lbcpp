PROJECT(LBCpp)
cmake_minimum_required(VERSION 2.6)

IF(UNIX)
  IF(APPLE)
  ELSE(APPLE)
    ADD_DEFINITIONS(-DLINUX)
  ENDIF(APPLE)
ENDIF(UNIX)


###
### C++ Introspection support
###
ADD_SUBDIRECTORY(introgen)

# generate a .cpp file from an XML introspection file
# ex: GENERATE_INTROSPECTION_CODE(in.xml out.cpp) 
MACRO (GENERATE_INTROSPECTION_CODE INPUT OUTPUT)
  GET_TARGET_PROPERTY(INTROSPECTION_GENERATOR_COMMAND IntrospectionGenerator LOCATION)
  ADD_CUSTOM_COMMAND(
    OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/${OUTPUT}
    COMMAND ${INTROSPECTION_GENERATOR_COMMAND} ${CMAKE_CURRENT_SOURCE_DIR}/${INPUT} ${CMAKE_CURRENT_BINARY_DIR}/${OUTPUT} ${CMAKE_CURRENT_SOURCE_DIR}
    MAIN_DEPENDENCY ${INPUT}
    DEPENDS ${INPUT} ${INTROSPECTION_GENERATOR_COMMAND}
    COMMENT "Generating C++ Introspection code ${OUTPUT}."
  )
ENDMACRO(GENERATE_INTROSPECTION_CODE)

###
### CR-compilator CMake support
###
ADD_SUBDIRECTORY(translator)

# Where is CR-algo compiler?
GET_TARGET_PROPERTY(LBCPP_TRANSLATOR_COMMAND lbcpp-translator LOCATION)

# add_cralgorithm macro
MACRO(ADD_CRALGORITHM OUTPUTFILE INPUTFILE)
 # MESSAGE("${LBCPP_TRANSLATOR_COMMAND} ${INPUTFILE} ${OUTPUTFILE}")
  ADD_CUSTOM_COMMAND(OUTPUT ${OUTPUTFILE}
                  COMMAND ${LBCPP_TRANSLATOR_COMMAND} ${INPUTFILE} ${OUTPUTFILE}
                  MAIN_DEPENDENCY ${INPUTFILE}
                  WORKING_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}"
                  DEPENDS ${LBCPP_TRANSLATOR_COMMAND} ${INPUTFILE}
 		  COMMENT "CR-algorithm ${INPUTFILE}"
  )
ENDMACRO(ADD_CRALGORITHM)

# add_cralgorithm_sources
MACRO(ADD_CRALGORITHM_SOURCES) #SOURCES
  SET(CRALGORITHMS_OUTPUT_FILES "")
  set_source_files_properties(${ARGN} PROPERTIES HEADER_FILE_ONLY TRUE)
  foreach(SOURCE ${ARGN})
     SET(inputfile ${CMAKE_CURRENT_SOURCE_DIR}/${SOURCE})
     SET(outputfile ${CMAKE_CURRENT_BINARY_DIR}/GeneratedCode/${SOURCE})
     STRING(REPLACE ".cr++" ".cpp" outputfile ${outputfile})
     STRING(REPLACE ".lcpp" ".cpp" outputfile ${outputfile})
   #  MESSAGE("output: " ${outputfile})
     ADD_CRALGORITHM(${outputfile} ${inputfile})
     SET(CRALGORITHMS_OUTPUT_FILES ${CRALGORITHMS_OUTPUT_FILES} "${outputfile}")
  endforeach(SOURCE)
ENDMACRO(ADD_CRALGORITHM_SOURCES)

# add_cralgorithm_headers
MACRO(ADD_CRALGORITHM_HEADERS) #SOURCES
  SET(CRALGORITHMS_OUTPUT_FILES "")
  foreach(SOURCE ${ARGN})
     SET(inputfile ${CMAKE_CURRENT_SOURCE_DIR}/${SOURCE})
     SET(outputfile ${CMAKE_CURRENT_BINARY_DIR}/GeneratedCode/${SOURCE})
     STRING(REPLACE ".cr++" ".h" outputfile ${outputfile})
   #  MESSAGE("output: " ${outputfile})
     ADD_CRALGORITHM(${outputfile} ${inputfile})
     SET(CRALGORITHMS_OUTPUT_FILES ${CRALGORITHMS_OUTPUT_FILES} "${outputfile}")
  endforeach(SOURCE)
ENDMACRO(ADD_CRALGORITHM_HEADERS)

# add_crexecutable macro
MACRO(ADD_CREXECUTABLE NAME) #SOURCES
  ADD_CRALGORITHM_SOURCES(${ARGN})
  SOURCE_GROUP(GeneratedCode FILES ${CRALGORITHMS_OUTPUT_FILES})
  ADD_EXECUTABLE(${NAME} ${CRALGORITHMS_OUTPUT_FILES} ${ARGN})
  TARGET_LINK_LIBRARIES(${NAME} lbcpp-core)
ENDMACRO(ADD_CREXECUTABLE)


MACRO(SOURCE_SUB_GROUP ROOT_NAME SUB_NAME) # other args
  IF (WIN32)
    SOURCE_GROUP(${ROOT_NAME}\\${SUB_NAME} ${ARGN})
  ELSE (WIN32)
    SOURCE_GROUP(${ROOT_NAME}/${SUB_NAME} ${ARGN})
  ENDIF (WIN32)
ENDMACRO(SOURCE_SUB_GROUP)


MACRO(SOURCE_SUB_GROUP2 ROOT_NAME SUB_NAME SUB_NAME2) # other args
  IF (WIN32)
    SOURCE_GROUP(${ROOT_NAME}\\${SUB_NAME}\\${SUB_NAME2} ${ARGN})
  ELSE (WIN32)
    SOURCE_GROUP(${ROOT_NAME}/${SUB_NAME}/${SUB_NAME2} ${ARGN})
  ENDIF (WIN32)
ENDMACRO(SOURCE_SUB_GROUP2)

ADD_SUBDIRECTORY(juce)
ADD_SUBDIRECTORY(src)
ADD_SUBDIRECTORY(projects)
#ADD_SUBDIRECTORY(lbcpp-lib)

OPTION(LBCPP_EXAMPLES "Include examples into the project" OFF)
IF (LBCPP_EXAMPLES)
  ADD_SUBDIRECTORY(examples)
ENDIF(LBCPP_EXAMPLES)

OPTION(LBCPP_EXPLORER "Include explorer into the project" ON)
IF (LBCPP_EXPLORER)
  ADD_SUBDIRECTORY(explorer)
ENDIF(LBCPP_EXPLORER)

OPTION(LBCPP_DOCUMENTATION "Include documentation into the project" OFF)
IF (LBCPP_DOCUMENTATION)
  ADD_SUBDIRECTORY(dox)
ENDIF (LBCPP_DOCUMENTATION)
