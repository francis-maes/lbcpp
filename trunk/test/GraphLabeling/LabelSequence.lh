/*-----------------------------------------.---------------------------------.
| Filename: LabelSequence.lh               | A vector of labels              |
| Author  : Francis Maes                   |                                 |
| Started : 10/02/2009 22:32               |                                 |
`------------------------------------------/                                 |
                               |                                             |
                               `--------------------------------------------*/

namespace cralgo
{

class LabelSequence;
typedef ReferenceCountedObjectPtr<LabelSequence> LabelSequencePtr;

class LabelSequence : public Object
{
public:
  LabelSequence(const LabelSequence& other) : labels(other.labels), v(other.v) {}
  LabelSequence(StringDictionaryPtr labels, size_t size) : labels(labels), v(size, labels->getNumElements()) {}
  LabelSequence(StringDictionaryPtr labels) : labels(labels) {}
  
  LabelSequence& operator =(const LabelSequence& other)
    {labels = other.labels; v = other.v; return *this;}

  StringDictionaryPtr getLabelDictionary() const
    {return labels;}

  featureGenerator labelFeature(int position) const
  {
    if (position < 0 || position >= (int)v.size())
      featureSense ("N/A");//, labels.getNumLabels() + 1);
    else if (v[position] < labels->getNumElements())
      featureSense (labels->getString(v[position])); //, v[idx]);
    else
      featureSense ("?");
  }
  
  featureGenerator halfWindowFeatures(size_t position, size_t contextSize, bool sign) const
  { 
    for (size_t i = 1; i <= contextSize; ++i)
      featureCall (i)
        labelFeature((int)position + (sign ? (int)i : -(int)i));
  }

  featureGenerator windowFeatures(size_t position, size_t contextSize) const
  {
    featureCall("previous") halfWindowFeatures(position, contextSize, false);
    featureCall("next") halfWindowFeatures(position, contextSize, true);
  }
  
  void set(size_t index, size_t label)
    {assert(index < v.size()); v[index] = label;}
    
  void append(size_t label)
    {v.push_back(label);}
    
  void reserve(size_t numbersAdditional)
    {v.reserve(v.size() + numbersAdditional);}
  
  size_t& operator [](size_t index) 
    {assert(index < v.size()); return v[index];}

  size_t operator [](size_t index) const
    {assert(index < v.size()); return v[index];}
  
  size_t get(size_t index) const
    {return (*this)[index];}
    
  size_t size() const
    {return v.size();}
      
  bool operator ==(const LabelSequence& otherSequence) const
    {return labels == otherSequence.labels && v == otherSequence.v;}

  friend std::ostream& operator <<(std::ostream& ostr, const LabelSequence& labelVector)
  {
    ostr << "[";
    for (size_t i = 0; i < labelVector.size(); ++i)
    {
      if (i > 0)
        ostr << ", ";
      if (labelVector[i] < labelVector.labels->getNumElements())
        ostr << labelVector.labels->getString(labelVector[i]);
      else
        ostr << "?" << labelVector[i];
    }
    return ostr << "]";
  }
  
  size_t numberOfLabelsInCommonWith(const LabelSequencePtr otherSequence) const
  {
    assert(v.size() == otherSequence->v.size());
    size_t res = 0;
    for (size_t i = 0; i < v.size(); ++i)
      if (v[i] == otherSequence->v[i])
        ++res;
    return res;
  }

private:
  StringDictionaryPtr labels;
  std::vector<size_t> v;
};

}; /* namespace cralgo */
