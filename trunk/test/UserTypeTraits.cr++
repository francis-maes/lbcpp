struct Toto {int i;};

namespace lbcpp
{

template<>
struct Traits<Toto>
{
  static inline std::string toString(const Toto& toto)
    {return "toto" + Traits<int>::toString(toto.i);}
  static inline void write(std::ostream& ostr, const Toto& toto)
    {Traits<int>::write(ostr, toto.i);}
  static inline bool read(std::istream& istr, Toto& result)
    {return Traits<int>::read(istr, result.i);}
};

};  // namespace lbcpp 

int main(int argc, char* argv[])
{
  Toto toto1; toto1.i = 1;
  Toto toto2; toto2.i = 2;
  Toto* totoptr = &toto1;
  Toto** totoptrptr = &totoptr;
  std::vector<Toto> totos(5);
  for (size_t i = 0; i < totos.size(); ++i) totos[i].i = i;
  std::vector<Toto* > totoptrs(5);
  for (size_t i = 0; i < totoptrs.size(); ++i) {totoptrs[i] = new Toto(); totoptrs[i]->i = i;}
  
  std::cout << lbcpp::toString(toto1) << std::endl;
  std::cout << lbcpp::toString(toto2) << std::endl;
  std::cout << lbcpp::toString(&toto1) << std::endl;
  std::cout << lbcpp::toString(&toto2) << std::endl;
  std::cout << lbcpp::toString(totoptr) << std::endl;
  std::cout << lbcpp::toString(totoptrptr) << std::endl;
  std::cout << lbcpp::toString(totos) << std::endl;
  std::cout << lbcpp::toString(totoptrs) << std::endl;
  std::cout << lbcpp::toString(&totoptrs) << std::endl;
  return 0;
}
