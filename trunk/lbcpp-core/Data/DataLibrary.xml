<?xml version="1.0" encoding="UTF-8"?>

<library name="Data" directory="Data">
  <import name="Stream"/>
  <import name="Container"/>

  <include file="lbcpp/Data/RandomGenerator.h"/>
  <include file="lbcpp/Data/RandomVariable.h"/>
  <include file="lbcpp/Data/DoubleVector.h"/>
  <include file="lbcpp/Data/IndexSet.h"/>
  <include file="lbcpp/Data/BinaryKey.h"/>
  <include file="lbcpp/Data/BinaryConfusionMatrix.h"/>
  <include file="lbcpp/Data/Table.h"/>

  <!-- Random Generator -->
  <class name="RandomGenerator">
    <function lang="lua" name="create" static="yes"/>
    <function lang="lua" name="sample"/>
  </class>
  
  <!-- Random Variable -->
  <class name="ScalarVariableMean" base="NameableObject">
    <code>
      virtual bool isConvertibleToDouble() const
        {return true;}
    </code>

    <variable type="NewDouble" name="samplesSum"/>
    <variable type="NewDouble" name="samplesCount"/>

    <function lang="lua" name="clear"/>
    <function lang="lua" name="observe"/>
    
    <function lang="lua" name="getMean"/>
    <function lang="lua" name="getSum"/>
    <function lang="lua" name="getCount"/>
  </class>
  
  <class name="ScalarVariableMeanAndVariance" base="ScalarVariableMean">
    <variable type="NewDouble" name="samplesSumOfSquares"/>
    <function lang="lua" name="getStandardDeviation"/>
    <function lang="lua" name="getVariance"/>
  </class>
  
  <class name="ScalarVariableStatistics" base="ScalarVariableMeanAndVariance">
    <variable type="NewDouble" name="minimumValue"/>
    <variable type="NewDouble" name="maximumValue"/>
    <function lang="lua" name="getMinimum"/>
    <function lang="lua" name="getMaximum"/>
  </class>

  <class name="ScalarVariableRecentMean" base="NameableObject"/>
  <class name="ScalarVariableRecentMeanAndVariance" base="ScalarVariableRecentMean"/>

  <!-- DoubleVector -->
  <template name="DoubleVector" base="Vector[elementsType]" abstract="yes">
    <parameter name="elementsEnumeration" type="EnumValue"/>
    <parameter name="elementsType" type="Double"/>

    <function lang="lua" name="add"/>
    <function lang="lua" name="mul"/>
    <function lang="lua" name="dot"/>
    <function lang="lua" name="l0norm"/>
    <function lang="lua" name="l1norm"/>
    <function lang="lua" name="l2norm"/>
    <function lang="lua" name="argmin"/>
    <function lang="lua" name="argmax"/>
  </template>

  <template name="SparseDoubleVector" base="DoubleVector[elementsEnumeration, elementsType]">
    <parameter name="elementsEnumeration" type="EnumValue"/>
    <parameter name="elementsType" type="Double"/>
    <function lang="lua" name="append"/>
    <function lang="lua" name="increment"/>
  </template>

  <template name="DenseDoubleVector" base="DoubleVector[elementsEnumeration, elementsType]">
    <parameter name="elementsEnumeration" type="EnumValue"/>
    <parameter name="elementsType" type="Double"/>
  </template>

  <template name="CompositeDoubleVector" base="DoubleVector[elementsEnumeration, elementsType]">
    <parameter name="elementsEnumeration" type="EnumValue"/>
    <parameter name="elementsType" type="Double"/>
  </template>

  <!-- IndexSet -->
  <class name="IndexSet" base="Object">
    <variable type="IntegerVector[NewPositiveInteger]" name="v"/>
  </class>
  <class name="BinaryKey" base="Object"/>

  <!-- Data Table -->
  <class name="Table"/>

  <!-- Confusion Matrix -->
  <class name="BinaryConfusionMatrix" base="Object">
    <variable type="NewPositiveInteger" name="truePositive"/>
    <variable type="NewPositiveInteger" name="falsePositive"/>
    <variable type="NewPositiveInteger" name="falseNegative"/>
    <variable type="NewPositiveInteger" name="trueNegative"/>
  </class>

  <!-- Iteration Function -->
  <class name="IterationFunction" base="Object" abstract="yes"/>

  <class name="ConstantIterationFunction" base="IterationFunction" shortName="constant">
    <constructor arguments="double value"/>
    <variable type="NewDouble" name="value"/>
  </class>

  <class name="InvLinearIterationFunction" base="IterationFunction" shortName="invLinear">
    <constructor arguments="double initialValue, size_t numberIterationsToReachHalfInitialValue"/>
    <variable type="NewDouble" name="initialValue"/>
    <variable type="NewPositiveInteger" name="numberIterationsToReachHalfInitialValue"/>
  </class>

</library>
