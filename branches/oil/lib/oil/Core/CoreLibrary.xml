<?xml version="1.0" encoding="UTF-8"?>

<library name="Core" directory="Core">
  <import name="CoreLoader"/>

  <include file="lbcpp/Core/Pair.h"/>
  <include file="lbcpp/Core/Vector.h"/>
  <include file="lbcpp/Core/Loader.h"/>
  <include file="lbcpp/Core/XmlSerialisation.h"/>
  <include file="lbcpp/Core/Boolean.h"/>
  <include file="lbcpp/Core/Integer.h"/>
  <include file="lbcpp/Core/Double.h"/>
  <include file="lbcpp/Core/string.h"/>

  <!-- Object -->
  <class name="Object" base="" abstract="yes">
    <code>
      virtual bool isConvertibleToBoolean() const
        {return false;}

      virtual bool isConvertibleToDouble() const
        {return false;}
        
      virtual size_t getNumMemberVariables() const
        {return 0;}

      virtual ClassPtr getMemberVariableType(size_t index) const
        {jassert(false); return ClassPtr();}

      virtual string getMemberVariableName(size_t index) const
        {jassert(false); return string::empty;}

      virtual string getMemberVariableShortName(size_t index) const
        {jassert(false); return string::empty;}

      virtual string getMemberVariableDescription(size_t index) const
        {jassert(false); return string::empty;}

      virtual int findMemberVariable(const string&amp; name) const
        {return -1;}

      virtual ObjectPtr getMemberVariableValue(const Object* pthis, size_t index) const
        {jassert(false); return ObjectPtr();}

      virtual size_t getNumMemberFunctions() const
        {return 0;}

      virtual FunctionSignaturePtr getMemberFunction(size_t index) const
        {jassert(false); return FunctionSignaturePtr();}

      virtual int findMemberFunction(const string&amp; name) const
        {return -1;}
    </code>

    <function lang="lua" name="create" static="yes"/>
    <function lang="lua" name="fromFile" static="yes"/>
    <function lang="lua" name="clone"/>
    <function lang="lua" name="toShortString"/>
    <function lang="lua" name="save"/>
  </class>

  <class name="NameableObject" base="Object" abstract="yes">
    <variable type="String" name="name"/>
  </class>

  <!-- Signature -->
  <class name="Signature" base="NameableObject">
    <variable type="String" name="shortName"/>
    <variable type="String" name="description"/>
  </class>
  <class name="FunctionSignature" base="Signature">
    <variable type="Boolean" name="staticFunction"/>
  </class>
  <class name="LuaFunctionSignature" base="FunctionSignature">
    <!-- variable: lua function -->
  </class>
  <class name="VariableSignature" base="Signature">
    <variable type="Class" name="type"/>
  </class>

  <!-- Type -->
  <class name="Class" base="NameableObject" abstract="yes">
    <variable type="Class" name="baseType"/>
    <variable type="TemplateClass" name="templateType"/>
    <variable type="Vector[Class]" name="templateArguments"/>
    <variable type="String" name="shortName"/>
  </class>

  <class name="EnumerationElement" base="Object">
    <variable type="String" name="name"/>
    <variable type="String" name="oneLetterCode"/>
    <variable type="String" name="shortName"/>
    <variable type="String" name="description"/>
  </class>

  <class name="Enumeration" base="Class" abstract="yes"/>

  <class name="DefaultEnumeration" base="Enumeration">
    <variable type="Vector[EnumerationElement]" name="elements"/>
  </class>

  <class name="ConcatenateEnumeration" base="Enumeration">
    <variable type="Vector[Pair[String,Enumeration]]" name="subEnumerations"/>
  </class>

  <class name="DefaultClass" base="Class">
    <variable type="Vector[VariableSignature]" name="variables"/>
    <variable type="Boolean" name="abstractClass"/>
  </class>

  <!-- Template Class -->
  <class name="TemplateClass" base="NameableObject" abstract="yes"/>

    <!-- Loader -->
  <class name="Loader" base="Object" abstract="yes"/>
  <class name="TextLoader" base="Loader" abstract="yes"/>

  <class name="Library" base="Object" abstract="yes"/>

  <!-- Builtin Types -->
  <class name="Boolean">
    <code>
      virtual bool isConvertibleToDouble() const
        {return true;}
      virtual bool isConvertibleToBoolean() const
        {return true;}
    </code>
  </class>
  <class name="Integer">
    <code>
      virtual bool isConvertibleToDouble() const
        {return true;}
    </code>
  </class>
  <class name="PositiveInteger" base="Integer"/>
  <class name="MemorySize" base="PositiveInteger"/>
  <class name="EnumValue" base="PositiveInteger"/>
  <class name="Double">
    <code>
      virtual bool isConvertibleToDouble() const
        {return true;}
    </code>
  </class>
  <class name="Probability" base="Double">
    <code>
      virtual bool isConvertibleToBoolean() const
      {return true;}
    </code>
  </class>
  <class name="Time" base="Double"/>
  <class name="String"/>
  <class name="File" base="String"/>
  <class name="Directory" base="File"/>
  
  <!-- Pair -->
  <template name="Pair" base="Object">
    <parameter name="firstType" type="Object"/>
    <parameter name="secondType" type="Object"/>
    <class>
      <variable type="firstType" name="first"/>
      <variable type="secondType" name="second"/>
    </class>
  </template>

  <!-- Vector -->
  <template name="Vector" base="Object">
    <parameter name="elementsType"/>
    <class name="BVector">
      <specialization name="elementsType" type="Boolean"/>
    </class>
    <class name="IVector">
      <specialization name="elementsType" type="Integer"/>
    </class>
    <class name="DVector">
      <specialization name="elementsType" type="Double"/>
    </class>
    <class name="SVector">
      <specialization name="elementsType" type="String"/>
    </class>
    <class name="OVector"/>
  </template>

  <class name="PositiveIntegerEnumeration" metaclass="Enumeration">
    <code>
      virtual size_t getNumElements() const
        {return 0;}
      virtual EnumerationElementPtr getElement(size_t index) const
        {string str((int)index); return new EnumerationElement(str, string::empty, str);}
      virtual int findElementByName(const string&amp; name) const
        {return name.getIntValue();}
    </code>
  </class>

  <!-- XmlElement -->
  <class name="XmlElement" base="Object">
    <variable type="String" name="tagName"/>
    <variable type="Vector[XmlElement]" name="childElements"/>
    <variable type="Vector[Pair[String, String]]" name="attributes"/>
    <variable type="String" name="text"/>
  </class>

</library>
