<?xml version="1.0" encoding="UTF-8"?>

<library name="SequentialDecisionCore" directory="Core">

  <!-- Search Tree -->
  <template name="SearchTreeNode" base="Object">
    <parameter name="stateClass" type="DecisionProblemState"/>
    <parameter name="actionType"/>
    
    <variable type="PositiveInteger" name="nodeIndex"/>
    <variable type="stateClass" name="state"/>
    <variable type="PositiveInteger" name="depth"/>
    <variable type="Double" name="reward"/>
    <variable type="Double" name="currentReturn"/>
    <variable type="actionType" name="previousAction"/>
    <variable type="PositiveInteger" name="parentIndex"/>
    <variable type="PositiveInteger" name="childBeginIndex"/>
    <variable type="PositiveInteger" name="childEndIndex"/>
    <variable type="Double" name="bestReturn"/>
  </template>
  
  <class name="SearchTree" base="Object">
    <variable type="DecisionProblem" name="problem"/>
    <variable type="ObjectVector[SearchTreeNode[DecisionProblemState,Variable]]" name="nodes"/>
    <variable type="GenericVector[PositiveInteger]" name="openedNodes"/>
  </class>

  <!-- Search Policy -->
  <class name="SearchPolicy" abstract="yes"/>

  <class name="RandomSearchPolicy" base="SearchPolicy">
    <constructor/>
  </class>

  <class name="BestFirstSearchPolicy" base="SearchPolicy">
    <constructor arguments="FunctionPtr heuristic"/>
    <variable type="Function" name="heuristic"/>
  </class>

  <class name="BeamSearchPolicy" base="BestFirstSearchPolicy">
    <constructor arguments="FunctionPtr heuristic, size_t beamSize" returnType="SearchPolicy"/>
    <variable type="PositiveInteger" name="beamSize"/>
  </class>
  
  <!-- Search Heuristic -->
  <class name="GreedySearchHeuristic" base="Function" shortName="greedy">
    <constructor arguments="double discount, double maxReward"/>
    <variable type="Double" name="discount"/>
    <variable type="Double" name="maxReward"/>
  </class>
  <class name="MaxReturnSearchHeuristic" base="Function" shortName="maxReturn">
    <constructor arguments="double maxReturn"/>
    <variable type="Double" name="maxReturn"/>
  </class>
  <class name="MinDepthSearchHeuristic" base="Function" shortName="minDepth">
    <constructor arguments="double maxDepth, bool applyLogFunction"/>
    <variable type="Double" name="maxDepth"/>
    <variable type="Boolean" name="applyLogFunction"/>
  </class>
  <class name="OptimisticPlanningSearchHeuristic" base="Function" shortName="optimistic">
    <constructor arguments="double discount, double maxReward"/>
    <variable type="Double" name="discount"/>
    <variable type="Double" name="maxReward"/>
  </class>
  <class name="LinearInterpolatedSearchHeuristic" base="Function" shortName="lerp">
    <constructor arguments="FunctionPtr heuristic1, FunctionPtr heuristic2, double k"/>
    <variable type="Function" name="heuristic1"/>
    <variable type="Function" name="heuristic2"/>
    <variable type="Double" name="k"/>
  </class>
  
  <class name="LearnableSearchHeuristic" base="CompositeFunction" abstract="yes"/>

  <!-- SearchFunction -->
  <class name="SearchFunction" base="Function">
    <variable type="DecisionProblem" name="problem"/>
    <variable type="Policy" name="searchPolicy"/>
    <variable type="StochasticGDParameters" name="learnerParameters"/>
    <variable type="Policy" name="explorationPolicy"/>
    <variable type="PositiveInteger" name="maxSearchNodes"/>
  </class>

  <class name="SearchFunctionOnlineLearner" base="OnlineLearner">
    <constructor arguments="RankingLossFunctionPtr rankingLoss"/>
    <variable type="RankingLossFunction" name="rankingLoss"/>
  </class>

  <!-- SearchSpace Evaluator -->
  <class name="SearchTreeScoreObject" base="ScoreObject">
    <variable type="ScalarVariableStatistics" name="bestReturn"/>
    <variable type="ScalarVariableMean" name="numOpenedNodes"/>
  </class>
  <class name="SearchTreeEvaluator" base="Evaluator"/>

  <!-- MCTS Optimizer -->
  <class name="SinglePlayerMCTSNode" base="Object">
    <variable type="DecisionProblemState" name="state"/>
    <variable type="Container[Variable]" name="actions"/>
    <variable type="ObjectVector[SinglePlayerMCTSNode]" name="subNodes"/>
    <variable type="PositiveInteger" name="indexInParent"/>
    <variable type="PositiveInteger" name="numRewards"/>
    <variable type="Double" name="rewardsSum"/>
  </class>

  <class name="SinglePlayerMCTSOptimizerState" base="OptimizerState">
    <variable type="SinglePlayerMCTSNode" name="rootNode"/>
    <variable type="Function" name="objective"/>
  </class>

  <class name="SinglePlayerMCTSOptimizer" base="Optimizer">
    <variable type="PositiveInteger" name="budget"/>
  </class>

  <!-- Nested Monte Carlo Optimizer -->
  <class name="NestedMonteCarloWorkUnit" base="WorkUnit">
    <variable type="PositiveInteger" name="level"/>
  </class>

  <class name="NestedMonteCarloOptimizer" base="Optimizer">
    <variable type="PositiveInteger" name="level"/>
    <variable type="PositiveInteger" name="numIterations"/>
  </class>

  <!-- Beam Search Optimizer -->
  <class name="BeamSearchOptimizerState" base="OptimizerState">
    <variable type="PositiveInteger" name="beamSize"/>
  </class>

  <class name="BeamSearchOptimizer" base="Optimizer">
    <variable type="PositiveInteger" name="beamSize"/>
  </class>
  
</library>
