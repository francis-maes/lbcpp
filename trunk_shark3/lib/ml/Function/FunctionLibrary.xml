<?xml version="1.0" encoding="UTF-8"?>

<library name="Function" directory="Function">

  <!-- Base classes -->
  <class name="Function" abstract="yes"/>
  <class name="HomogeneousUnaryFunction" base="Function" abstract="yes"/>
  <class name="HomogeneousBinaryFunction" base="Function" abstract="yes"/>
  <class name="HomogeneousTernaryFunction" base="Function" abstract="yes"/>

  <!-- Boolean Functions -->
  <class name="NotBooleanFunction" base="HomogeneousUnaryFunction">
    <constructor returnType="Function"/>
  </class>
  
  <class name="BinaryBooleanFunction" base="HomogeneousBinaryFunction" abstract="yes"/>
  <class name="AndBooleanFunction" base="BinaryBooleanFunction">
    <constructor returnType="Function"/>
  </class>
  <class name="OrBooleanFunction" base="BinaryBooleanFunction">
    <constructor returnType="Function"/>
  </class>
  <class name="NandBooleanFunction" base="BinaryBooleanFunction">
    <constructor returnType="Function"/>
  </class>
  <class name="NorBooleanFunction" base="BinaryBooleanFunction">
    <constructor returnType="Function"/>
  </class>
  <class name="EqualBooleanFunction" base="BinaryBooleanFunction">
    <constructor returnType="Function"/>
  </class>

  <class name="IfThenElseBooleanFunction" base="HomogeneousTernaryFunction">
    <constructor returnType="Function"/>
  </class>

  <!-- Integer Functions -->
  <class name="BinaryIntegerFunction" base="HomogeneousBinaryFunction" abstract="yes"/>
  <class name="AddIntegerFunction" base="BinaryIntegerFunction">
    <constructor returnType="Function"/>
  </class>
  <class name="SubIntegerFunction" base="BinaryIntegerFunction">
    <constructor returnType="Function"/>
  </class>
  <class name="MulIntegerFunction" base="BinaryIntegerFunction">
    <constructor returnType="Function"/>
  </class>
  <class name="DivIntegerFunction" base="BinaryIntegerFunction">
    <constructor returnType="Function"/>
  </class>

  <!-- Double Functions -->
  <class name="UnaryDoubleFunction" base="HomogeneousBinaryFunction" abstract="yes"/>

  <class name="OppositeDoubleFunction" base="UnaryDoubleFunction">
    <constructor returnType="Function"/>
  </class>
  <class name="InverseDoubleFunction" base="UnaryDoubleFunction">
    <constructor returnType="Function"/>
  </class>
  <class name="AbsDoubleFunction" base="UnaryDoubleFunction">
    <constructor returnType="Function"/>
  </class>
  <class name="LogDoubleFunction" base="UnaryDoubleFunction">
    <constructor returnType="Function"/>
  </class>
  <class name="ProtectedLogDoubleFunction" base="UnaryDoubleFunction">
    <constructor returnType="Function"/>
  </class>
  <class name="ExpDoubleFunction" base="UnaryDoubleFunction">
    <constructor returnType="Function"/>
  </class>
  <class name="SqrtDoubleFunction" base="UnaryDoubleFunction">
    <constructor returnType="Function"/>
  </class>
  <class name="CosDoubleFunction" base="UnaryDoubleFunction">
    <constructor returnType="Function"/>
  </class>
  <class name="SinDoubleFunction" base="UnaryDoubleFunction">
    <constructor returnType="Function"/>
  </class>

  <class name="NormalizerFunction" base="HomogeneousUnaryFunction">
    <constructor returnType="Function"/>
  </class>

  <class name="BinaryDoubleFunction" base="HomogeneousBinaryFunction" abstract="yes"/>
  <class name="AddDoubleFunction" base="BinaryDoubleFunction">
    <constructor returnType="Function"/>
  </class>
  <class name="SubDoubleFunction" base="BinaryDoubleFunction">
    <constructor returnType="Function"/>
  </class>
  <class name="MulDoubleFunction" base="BinaryDoubleFunction">
    <constructor returnType="Function"/>
  </class>
  <class name="DivDoubleFunction" base="BinaryDoubleFunction">
    <constructor returnType="Function"/>
  </class>
  <class name="ProtectedDivDoubleFunction" base="BinaryDoubleFunction">
    <constructor returnType="Function"/>
  </class>
  <class name="PowDoubleFunction" base="BinaryDoubleFunction">
    <constructor returnType="Function"/>
  </class>
  <class name="MinDoubleFunction" base="BinaryDoubleFunction">
    <constructor returnType="Function"/>
  </class>
  <class name="MaxDoubleFunction" base="BinaryDoubleFunction">
    <constructor returnType="Function"/>
  </class>
  <class name="GreaterThanDoubleFunction" base="Function">
    <constructor returnType="Function"/>
  </class>

  <!-- Enumeration Functions -->
  <class name="EqualsConstantEnumFunction" base="Function">
    <constructor arguments="EnumerationPtr enumeration, size_t value"/>
    <variable type="Enumeration" name="enumeration"/>
    <variable type="PositiveInteger" name="value"/>
  </class>

  <!-- Object Functions -->
  <class name="UnaryObjectFunction" base="Function" abstract="yes"/>
  <class name="GetVariableFunction" base="UnaryObjectFunction">
    <constructor arguments="ClassPtr inputClass, size_t variableIndex" returnType="Function"/>
    <constructor arguments="ClassPtr inputClass, const string&amp; variableName" returnType="Function"/>
    <variable type="Class" name="inputClass"/>
    <variable type="PositiveInteger" name="variableIndex"/>
  </class>
  <class name="GetContainerLengthFunction" base="Function">
    <constructor/>
  </class>

  <!-- DoubleVector Functions -->
  <class name="GetDoubleVectorElementFunction" base="Function">
    <constructor arguments="EnumerationPtr enumeration, size_t index"/>
    <variable type="Enumeration" name="enumeration"/>
    <variable type="PositiveInteger" name="index"/>
  </class>

  <class name="ScalarVariableStatisticsPerception">
    <variable type="Double" name="mean"/>
    <variable type="Double" name="stddev"/>
    <variable type="Double" name="min"/>
    <variable type="Double" name="max"/>
    <variable type="Double" name="sum"/>
    <variable type="Double" name="l0norm"/>
    <variable type="Double" name="l1norm"/>
    <variable type="Double" name="l2norm"/>
  </class>
  <class name="ComputeDoubleVectorStatisticsFunction" base="Function">
    <constructor/>
  </class>
  
  <class name="GetDoubleVectorExtremumsFunction" base="Function">
    <constructor arguments="EnumerationPtr enumeration" returnType="Function"/>
    <variable type="Enumeration" name="enumeration"/>
  </class>

  <!-- Special Functions -->
  <class name="StumpFunction" base="Function">
    <constructor arguments="double threshold"/>
    <variable type="Double" name="threshold"/>
  </class>
  
  <!-- Vote Functions -->
  <class name="VoteFunction" base="Function" abstract="yes"/>
  <class name="ScalarVoteFunction" base="VoteFunction">
    <constructor arguments="double vote" returnType="Function"/>
    <variable type="Double" name="vote"/>
  </class>
  <class name="VectorVoteFunction" base="VoteFunction">
    <constructor arguments="const DenseDoubleVectorPtr&amp; vote" returnType="Function"/>
    <variable type="DenseDoubleVector[PositiveIntegerEnumeration,Double]" name="vote"/>
  </class>

</library>
