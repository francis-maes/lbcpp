/*!
 *  \author O.Krause
 *  \date 22011
 *
 *  \par Copyright (c) 1998-2011:
 *      Institut f&uuml;r Neuroinformatik<BR>
 *      Ruhr-Universit&auml;t Bochum<BR>
 *      D-44780 Bochum, Germany<BR>
 *      Phone: +49-234-32-25558<BR>
 *      Fax:   +49-234-32-14209<BR>
 *      eMail: Shark-admin@neuroinformatik.ruhr-uni-bochum.de<BR>
 *      www:   http://www.neuroinformatik.ruhr-uni-bochum.de<BR>
 *      <BR>
 *
 *
 *  <BR><HR>
 *  This file is part of Shark. This library is free software;
 *  you can redistribute it and/or modify it under the terms of the
 *  GNU General Public License as published by the Free Software
 *  Foundation; either version 3, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this library; if not, see <http://www.gnu.org/licenses/>.
 *
*/
#ifndef MODELS_IMPL_NEURONS_H
#define MODELS_IMPL_NEURONS_H

#include <shark/LinAlg/Base.h>

 
namespace shark{
namespace detail{
	///\brief Baseclass for all Neurons. it defines y=operator(x) for evaluation and derivative(y) for the derivative of the sigmoid.
	///
	///You need to provide a public static member function function() and functionDerivative() in the derived class.
	///Those functions calculate value and derivative for a single input.
	///Due to template magic, the neurons can either use vectors or matrices as input.
	///Additionally, they avoid temporary values completely using ublas magic.
	///Usage: 
	///struct Neuron:public NeuronBase<Neuron> { 
	///    static double function(double x){return ...}
        ///    static double functionDerivative(double y){return ...}
	///};
	template<class Derived>
	//again, one step ahead using templates!
	class NeuronBase{
	private:
		//defines an inner struct Function which converts the static function into an ublas Functor
		SHARK_UNARY_FUNCTOR(Function,Derived::function,false,(void)0);
		//defines an inner struct Function which converts the static function into an ublas Functor
		SHARK_UNARY_FUNCTOR(FunctionDerivative,Derived::functionDerivative,false,(void)0);
	public:
		
		///for a given matrix or vector, calculates the elementwise application of the sigmoid function defined by Derived.
		template<class E>
		typename detail::UnaryTransformation<E, Function >::type operator()(E const& x)const{
			typedef detail::UnaryTransformation<E, Function > Transformation;
			typedef typename Transformation::type type;
			typedef typename Transformation::functor_type functor_type;
			return type(x,functor_type());
		}
		///Calculates the elementwise application of the sigmoid function derivative defined by Derived.
		///It's input is a matrix or vector of previously calculated neuron responses generated by operator()
		template<class E>
		typename detail::UnaryTransformation<E, FunctionDerivative >::type derivative(const E& y)const{
			//generated expression type of ublas
			typedef detail::UnaryTransformation<E, FunctionDerivative > Transformation;
			typedef typename Transformation::type type;
			typedef typename Transformation::functor_type functor_type;
			return type(y,functor_type());
		}
	};
}
	 
}
 
 #endif
